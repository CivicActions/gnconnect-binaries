{"version":3,"sources":["webpack:///./components/login/login_mfa.jsx","webpack:///./components/login/login_controller/index.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx"],"names":["__webpack_require__","_reactIntl","_utils","LoginMfa","props","_classCallCheck3","default","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","handleChange","e","preventDefault","token","target","value","trim","replace","state","setState","handleSubmit","submit","loginId","password","saving","serverError","errorClass","_react2","createElement","className","onSubmit","FormattedMessage","id","defaultMessage","type","name","placeholder","localizeMessage","spellCheck","autoComplete","autoFocus","onChange","_save_button2","disabled","onClick","savingMessage","React","PureComponent","propTypes","PropTypes","string","isRequired","func","_reactRedux","_general","connect","config","getConfig","isLicensed","getLicense","IsLicensed","customBrandText","CustomBrandText","customDescriptionText","CustomDescriptionText","enableCustomBrand","EnableCustomBrand","enableLdap","EnableLdap","enableOpenServer","EnableOpenServer","enableSaml","EnableSaml","enableSignInWithEmail","EnableSignInWithEmail","enableSignInWithUsername","EnableSignInWithUsername","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableSignUpWithOffice365","EnableSignUpWithOffice365","experimentalPrimaryTeam","ExperimentalPrimaryTeam","ldapLoginFieldName","LdapLoginFieldName","samlLoginButtonText","SamlLoginButtonText","siteName","SiteName","LoginController","_reactRouterDom","_client","GlobalActions","_team_actions","_user_actions","_browser_history","TextFormatting","Utils","preSubmit","bind","finishSignin","handleLoginIdChange","handlePasswordChange","URLSearchParams","location","search","get","Constants","SIGNIN_VERIFIED","ldapEnabled","usernameSigninEnabled","emailSigninEnabled","samlEnabled","showMfa","loading","object","bool","document","title","BrowserStore","removeGlobalItem","UserStore","getCurrentUser","redirectUserToDefaultTeam","refs","focus","_this2","newQuery","browserHistory","pathname","hash","toLowerCase","msgId","values","ldapUsername","checkMfa","requiresMfa","err","message","_this3","webLogin","params","inviteToken","inviteId","addUserToTeamFromInvite","team","push","encodeURIComponent","primaryTeam","TeamStore","getByName","redirectTo","loadCurrentLocale","match","DEFAULT_CHANNEL","text","formattedText","formatText","src","Client4","getBrandImageUrl","_message_html_to_component2","mentions","loginPlaceholders","length","slice","join","extraParam","extraBox","SIGNIN_CHANGE","SESSION_EXPIRED","PASSWORD_CHANGE","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","loginButton","key","_form_error2","error","margin","ref","createLoginPlaceholder","autoCapitalize","checkSignUpEnabled","Link","to","href","getOAuthRoute","getUrl","_props","content","customContent","customClass","_login_mfa2","createLoginOptions","createCustomLogin","_announcement_bar2","logoImage","_site_name_and_description2","Component","module","exports","p","SiteNameAndDescription","description","Fragment","defaultProps"],"mappings":"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","file":"25.daecb7eb4fe1ecde3027.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={localizeMessage('login_mfa.token', 'MFA Token')}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n\n    return {\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        siteName,\n    };\n}\n\nexport default connect(mapStateToProps)(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {addUserToTeamFromInvite} from 'actions/team_actions.jsx';\nimport {checkMfa, webLogin} from 'actions/user_actions.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport * as TextFormatting from 'utils/text_formatting.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error.jsx';\n\nimport LoginMfa from '../login_mfa.jsx';\nexport default class LoginController extends React.Component {\n    static get propTypes() {\n        return {\n            location: PropTypes.object.isRequired,\n            isLicensed: PropTypes.bool.isRequired,\n\n            customBrandText: PropTypes.string,\n            customDescriptionText: PropTypes.string,\n            enableCustomBrand: PropTypes.bool.isRequired,\n            enableLdap: PropTypes.bool.isRequired,\n            enableOpenServer: PropTypes.bool.isRequired,\n            enableSaml: PropTypes.bool.isRequired,\n            enableSignInWithEmail: PropTypes.bool.isRequired,\n            enableSignInWithUsername: PropTypes.bool.isRequired,\n            enableSignUpWithEmail: PropTypes.bool.isRequired,\n            enableSignUpWithGitLab: PropTypes.bool.isRequired,\n            enableSignUpWithGoogle: PropTypes.bool.isRequired,\n            enableSignUpWithOffice365: PropTypes.bool.isRequired,\n            experimentalPrimaryTeam: PropTypes.string,\n            ldapLoginFieldName: PropTypes.string,\n            samlLoginButtonText: PropTypes.string,\n            siteName: PropTypes.string,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.preSubmit = this.preSubmit.bind(this);\n        this.submit = this.submit.bind(this);\n        this.finishSignin = this.finishSignin.bind(this);\n\n        this.handleLoginIdChange = this.handleLoginIdChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n        };\n    }\n\n    componentDidMount() {\n        document.title = this.props.siteName;\n        BrowserStore.removeGlobalItem('team');\n        if (UserStore.getCurrentUser()) {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            this.refs.password.focus();\n        }\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.refs.loginId.value;\n        if (loginId !== this.state.loginId) {\n            this.setState({loginId});\n        }\n\n        const password = this.refs.password.value;\n        if (password !== this.state.password) {\n            this.setState({password});\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        checkMfa(\n            loginId,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(loginId, password, '');\n                }\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token) {\n        this.setState({serverError: null, loading: true});\n\n        webLogin(\n            loginId,\n            password,\n            token,\n            () => {\n                // check for query params brought over from signup_user_complete\n                const params = new URLSearchParams(this.props.location.search);\n                const inviteToken = params.get('t') || '';\n                const inviteId = params.get('id') || '';\n\n                if (inviteId || inviteToken) {\n                    addUserToTeamFromInvite(\n                        inviteToken,\n                        inviteId,\n                        (team) => {\n                            this.finishSignin(team);\n                        },\n                        () => {\n                            // there's not really a good way to deal with this, so just let the user log in like normal\n                            this.finishSignin();\n                        }\n                    );\n\n                    return;\n                }\n\n                this.finishSignin();\n            },\n            (err) => {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (err.id === 'store.sql_user.get_for_login.app_error' ||\n                    err.id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (err.id === 'api.user.check_user_password.invalid.app_error' || err.id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else {\n                    this.setState({showMfa: false, serverError: err.message, loading: false});\n                }\n            }\n        );\n    }\n\n    finishSignin(team) {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const primaryTeam = TeamStore.getByName(experimentalPrimaryTeam);\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        GlobalActions.loadCurrentLocale();\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (primaryTeam) {\n            browserHistory.push(`/${primaryTeam.name}/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange(e) {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange(e) {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    createCustomLogin() {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const formattedText = TextFormatting.formatText(text);\n\n            return (\n                <div>\n                    <img\n                        src={Client4.getBrandImageUrl(0)}\n                    />\n                    <div>\n                        {messageHtmlToComponent(formattedText, false, {mentions: false})}\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder() {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled() {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    createLoginOptions() {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n        let extraBox = '';\n        if (extraParam) {\n            if (extraParam === Constants.SIGNIN_CHANGE) {\n                extraBox = (\n                    <div className='alert alert-success'>\n                        <i\n                            className='fa fa-check'\n                            title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                        />\n                        <FormattedMessage\n                            id='login.changed'\n                            defaultMessage=' Sign-in method changed successfully'\n                        />\n                    </div>\n                );\n            } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n                extraBox = (\n                    <div className='alert alert-success'>\n                        <i\n                            className='fa fa-check'\n                            title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                        />\n                        <FormattedMessage\n                            id='login.verified'\n                            defaultMessage=' Email Verified'\n                        />\n                    </div>\n                );\n            } else if (extraParam === Constants.SESSION_EXPIRED) {\n                extraBox = (\n                    <div className='alert alert-warning'>\n                        <i\n                            className='fa fa-exclamation-triangle'\n                            title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                        />\n                        <FormattedMessage\n                            id='login.session_expired'\n                            defaultMessage=' Your session has expired. Please login again.'\n                        />\n                    </div>\n                );\n            } else if (extraParam === Constants.PASSWORD_CHANGE) {\n                extraBox = (\n                    <div className='alert alert-success'>\n                        <i\n                            className='fa fa-check'\n                            title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                        />\n                        <FormattedMessage\n                            id='login.passwordChanged'\n                            defaultMessage=' Password updated successfully'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            let loginButton = (\n                <FormattedMessage\n                    id='login.signIn'\n                    defaultMessage='Sign in'\n                />\n            );\n\n            if (this.state.loading) {\n                loginButton =\n                (<span>\n                    <span\n                        className='fa fa-refresh icon--rotate'\n                        title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                    />\n                    <FormattedMessage\n                        id='login.signInLoading'\n                        defaultMessage='Signing in...'\n                    />\n                </span>);\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref='loginId'\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus='true'\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref='password'\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={Utils.localizeMessage('login.password', 'Password')}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                { loginButton }\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password'\n                        />\n                    </Link>\n                </div>\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {extraBox}\n                {loginControls}\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n\n        let content;\n        let customContent;\n        let customClass;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <div className='col-sm-12'>\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/5d6be4015bde2a4e0358c8bc110deadc.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SiteNameAndDescription extends React.PureComponent {\n    static propTypes = {\n        customDescriptionText: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        siteName: 'Mattermost',\n    };\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1>{siteName}</h1>\n                <h4 className='color--light'>\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n"],"sourceRoot":""}