{"version":3,"sources":["webpack:///./node_modules/mattermost-redux/actions/timezone.js","webpack:///./node_modules/moment-timezone/index.js","webpack:///./node_modules/moment-timezone/moment-timezone.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","autoUpdateTimezone","deviceTimezone","_this","this","_ref","fn","gen","apply","Promise","resolve","reject","step","arg","info","error","done","then","err","_asyncToGenerator","regeneratorRuntime","mark","_callee","dispatch","getState","currentUer","currentTimezone","newTimezoneExists","timezone","updatedUser","wrap","_context","prev","next","_users","getCurrentUser","_timezone","getUserTimezone","id","automaticTimezone","useAutomaticTimezone","manualTimezone","_users2","updateMe","stop","_x","_x2","__webpack_require__","module","tz","load","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","undefined","moment","cachedGuess","zones","links","names","guesses","version","logError","momentVersion","split","major","minor","charCodeToInt","charCode","unpackBase60","string","parts","whole","fractional","multiplier","out","sign","charCodeAt","arrayToInt","array","mapIndices","indices","unpack","data","offsets","untils","Math","round","Infinity","intToUntil","name","abbrs","population","Zone","packedString","_set","OffsetAt","at","timeString","toTimeString","abbr","match","join","offset","getTimezoneOffset","ZoneScore","zone","offsetScore","abbrScore","findChange","low","high","mid","diff","Date","sortZoneScores","a","b","addToGuesses","guessesForUserOffsets","j","guessesOffset","offsetsLength","filteredGuesses","push","rebuildGuess","intlName","Intl","DateTimeFormat","resolvedOptions","timeZone","normalizeName","e","zoneScore","change","startYear","getFullYear","last","userOffsets","zoneScores","getZone","scoreOffsetAt","sort","toLowerCase","replace","addZone","packed","normalized","caller","Error","link","addLink","aliases","alias","normal0","normal1","needsOffset","m","isUnixTimestamp","_f","_a","_tzm","message","console","input","args","Array","slice","utc","isMoment","add","parse","unpacked","_index","timestamp","offsetNext","offsetPrev","max","moveAmbiguousForward","moveInvalidForward","mom","utcOffset","offsetAt","abs","dataVersion","_zones","_links","_names","zoneExists","didShowError","guess","ignoreCache","abbrWrap","old","_z","defaultZone","updateOffset","keepTime","_isUTC","_d","zoneName","zoneAbbr","resetZoneWrap","setDefault","momentProperties","toString"],"mappings":"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","file":"6.315dc07a43d5c994b8f8.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.autoUpdateTimezone = autoUpdateTimezone;\n\nvar _users = require('../selectors/entities/users');\n\nvar _timezone = require('../selectors/entities/timezone');\n\nvar _users2 = require('./users');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nfunction autoUpdateTimezone(deviceTimezone) {\n    var _this = this;\n\n    return function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {\n            var currentUer, currentTimezone, newTimezoneExists, timezone, updatedUser;\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                    switch (_context.prev = _context.next) {\n                        case 0:\n                            currentUer = (0, _users.getCurrentUser)(getState());\n                            currentTimezone = (0, _timezone.getUserTimezone)(getState(), currentUer.id);\n                            newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n\n\n                            if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n                                timezone = {\n                                    useAutomaticTimezone: 'true',\n                                    automaticTimezone: deviceTimezone,\n                                    manualTimezone: currentTimezone.manualTimezone\n                                };\n                                updatedUser = _extends({}, currentUer, {\n                                    timezone: timezone\n                                });\n\n\n                                (0, _users2.updateMe)(updatedUser)(dispatch, getState);\n                            }\n\n                        case 4:\n                        case 'end':\n                            return _context.stop();\n                    }\n                }\n            }, _callee, _this);\n        }));\n\n        return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n        };\n    }();\n}","var moment = module.exports = require(\"./moment-timezone\");\nmoment.tz.load(require('./data/packed/latest.json'));\n","//! moment-timezone.js\n//! version : 0.5.20\n//! Copyright (c) JS Foundation and other contributors\n//! license : MIT\n//! github.com/moment/moment-timezone\n\n(function (root, factory) {\n\t\"use strict\";\n\n\t/*global define*/\n\tif (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory(require('moment')); // Node\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine(['moment'], factory);                 // AMD\n\t} else {\n\t\tfactory(root.moment);                        // Browser\n\t}\n}(this, function (moment) {\n\t\"use strict\";\n\n\t// Do not load moment-timezone a second time.\n\t// if (moment.tz !== undefined) {\n\t// \tlogError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);\n\t// \treturn moment;\n\t// }\n\n\tvar VERSION = \"0.5.20\",\n\t\tzones = {},\n\t\tlinks = {},\n\t\tnames = {},\n\t\tguesses = {},\n\t\tcachedGuess;\n\n\tif (!moment || typeof moment.version !== 'string') {\n\t\tlogError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');\n\t}\n\n\tvar momentVersion = moment.version.split('.'),\n\t\tmajor = +momentVersion[0],\n\t\tminor = +momentVersion[1];\n\n\t// Moment.js version check\n\tif (major < 2 || (major === 2 && minor < 6)) {\n\t\tlogError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');\n\t}\n\n\t/************************************\n\t\tUnpacking\n\t************************************/\n\n\tfunction charCodeToInt(charCode) {\n\t\tif (charCode > 96) {\n\t\t\treturn charCode - 87;\n\t\t} else if (charCode > 64) {\n\t\t\treturn charCode - 29;\n\t\t}\n\t\treturn charCode - 48;\n\t}\n\n\tfunction unpackBase60(string) {\n\t\tvar i = 0,\n\t\t\tparts = string.split('.'),\n\t\t\twhole = parts[0],\n\t\t\tfractional = parts[1] || '',\n\t\t\tmultiplier = 1,\n\t\t\tnum,\n\t\t\tout = 0,\n\t\t\tsign = 1;\n\n\t\t// handle negative numbers\n\t\tif (string.charCodeAt(0) === 45) {\n\t\t\ti = 1;\n\t\t\tsign = -1;\n\t\t}\n\n\t\t// handle digits before the decimal\n\t\tfor (i; i < whole.length; i++) {\n\t\t\tnum = charCodeToInt(whole.charCodeAt(i));\n\t\t\tout = 60 * out + num;\n\t\t}\n\n\t\t// handle digits after the decimal\n\t\tfor (i = 0; i < fractional.length; i++) {\n\t\t\tmultiplier = multiplier / 60;\n\t\t\tnum = charCodeToInt(fractional.charCodeAt(i));\n\t\t\tout += num * multiplier;\n\t\t}\n\n\t\treturn out * sign;\n\t}\n\n\tfunction arrayToInt (array) {\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tarray[i] = unpackBase60(array[i]);\n\t\t}\n\t}\n\n\tfunction intToUntil (array, length) {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tarray[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds\n\t\t}\n\n\t\tarray[length - 1] = Infinity;\n\t}\n\n\tfunction mapIndices (source, indices) {\n\t\tvar out = [], i;\n\n\t\tfor (i = 0; i < indices.length; i++) {\n\t\t\tout[i] = source[indices[i]];\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction unpack (string) {\n\t\tvar data = string.split('|'),\n\t\t\toffsets = data[2].split(' '),\n\t\t\tindices = data[3].split(''),\n\t\t\tuntils  = data[4].split(' ');\n\n\t\tarrayToInt(offsets);\n\t\tarrayToInt(indices);\n\t\tarrayToInt(untils);\n\n\t\tintToUntil(untils, indices.length);\n\n\t\treturn {\n\t\t\tname       : data[0],\n\t\t\tabbrs      : mapIndices(data[1].split(' '), indices),\n\t\t\toffsets    : mapIndices(offsets, indices),\n\t\t\tuntils     : untils,\n\t\t\tpopulation : data[5] | 0\n\t\t};\n\t}\n\n\t/************************************\n\t\tZone object\n\t************************************/\n\n\tfunction Zone (packedString) {\n\t\tif (packedString) {\n\t\t\tthis._set(unpack(packedString));\n\t\t}\n\t}\n\n\tZone.prototype = {\n\t\t_set : function (unpacked) {\n\t\t\tthis.name       = unpacked.name;\n\t\t\tthis.abbrs      = unpacked.abbrs;\n\t\t\tthis.untils     = unpacked.untils;\n\t\t\tthis.offsets    = unpacked.offsets;\n\t\t\tthis.population = unpacked.population;\n\t\t},\n\n\t\t_index : function (timestamp) {\n\t\t\tvar target = +timestamp,\n\t\t\t\tuntils = this.untils,\n\t\t\t\ti;\n\n\t\t\tfor (i = 0; i < untils.length; i++) {\n\t\t\t\tif (target < untils[i]) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tparse : function (timestamp) {\n\t\t\tvar target  = +timestamp,\n\t\t\t\toffsets = this.offsets,\n\t\t\t\tuntils  = this.untils,\n\t\t\t\tmax     = untils.length - 1,\n\t\t\t\toffset, offsetNext, offsetPrev, i;\n\n\t\t\tfor (i = 0; i < max; i++) {\n\t\t\t\toffset     = offsets[i];\n\t\t\t\toffsetNext = offsets[i + 1];\n\t\t\t\toffsetPrev = offsets[i ? i - 1 : i];\n\n\t\t\t\tif (offset < offsetNext && tz.moveAmbiguousForward) {\n\t\t\t\t\toffset = offsetNext;\n\t\t\t\t} else if (offset > offsetPrev && tz.moveInvalidForward) {\n\t\t\t\t\toffset = offsetPrev;\n\t\t\t\t}\n\n\t\t\t\tif (target < untils[i] - (offset * 60000)) {\n\t\t\t\t\treturn offsets[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn offsets[max];\n\t\t},\n\n\t\tabbr : function (mom) {\n\t\t\treturn this.abbrs[this._index(mom)];\n\t\t},\n\n\t\toffset : function (mom) {\n\t\t\tlogError(\"zone.offset has been deprecated in favor of zone.utcOffset\");\n\t\t\treturn this.offsets[this._index(mom)];\n\t\t},\n\n\t\tutcOffset : function (mom) {\n\t\t\treturn this.offsets[this._index(mom)];\n\t\t}\n\t};\n\n\t/************************************\n\t\tCurrent Timezone\n\t************************************/\n\n\tfunction OffsetAt(at) {\n\t\tvar timeString = at.toTimeString();\n\t\tvar abbr = timeString.match(/\\([a-z ]+\\)/i);\n\t\tif (abbr && abbr[0]) {\n\t\t\t// 17:56:31 GMT-0600 (CST)\n\t\t\t// 17:56:31 GMT-0600 (Central Standard Time)\n\t\t\tabbr = abbr[0].match(/[A-Z]/g);\n\t\t\tabbr = abbr ? abbr.join('') : undefined;\n\t\t} else {\n\t\t\t// 17:56:31 CST\n\t\t\t// 17:56:31 GMT+0800 (台北標準時間)\n\t\t\tabbr = timeString.match(/[A-Z]{3,5}/g);\n\t\t\tabbr = abbr ? abbr[0] : undefined;\n\t\t}\n\n\t\tif (abbr === 'GMT') {\n\t\t\tabbr = undefined;\n\t\t}\n\n\t\tthis.at = +at;\n\t\tthis.abbr = abbr;\n\t\tthis.offset = at.getTimezoneOffset();\n\t}\n\n\tfunction ZoneScore(zone) {\n\t\tthis.zone = zone;\n\t\tthis.offsetScore = 0;\n\t\tthis.abbrScore = 0;\n\t}\n\n\tZoneScore.prototype.scoreOffsetAt = function (offsetAt) {\n\t\tthis.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);\n\t\tif (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {\n\t\t\tthis.abbrScore++;\n\t\t}\n\t};\n\n\tfunction findChange(low, high) {\n\t\tvar mid, diff;\n\n\t\twhile ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {\n\t\t\tmid = new OffsetAt(new Date(low.at + diff));\n\t\t\tif (mid.offset === low.offset) {\n\t\t\t\tlow = mid;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\tfunction userOffsets() {\n\t\tvar startYear = new Date().getFullYear() - 2,\n\t\t\tlast = new OffsetAt(new Date(startYear, 0, 1)),\n\t\t\toffsets = [last],\n\t\t\tchange, next, i;\n\n\t\tfor (i = 1; i < 48; i++) {\n\t\t\tnext = new OffsetAt(new Date(startYear, i, 1));\n\t\t\tif (next.offset !== last.offset) {\n\t\t\t\tchange = findChange(last, next);\n\t\t\t\toffsets.push(change);\n\t\t\t\toffsets.push(new OffsetAt(new Date(change.at + 6e4)));\n\t\t\t}\n\t\t\tlast = next;\n\t\t}\n\n\t\tfor (i = 0; i < 4; i++) {\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));\n\t\t}\n\n\t\treturn offsets;\n\t}\n\n\tfunction sortZoneScores (a, b) {\n\t\tif (a.offsetScore !== b.offsetScore) {\n\t\t\treturn a.offsetScore - b.offsetScore;\n\t\t}\n\t\tif (a.abbrScore !== b.abbrScore) {\n\t\t\treturn a.abbrScore - b.abbrScore;\n\t\t}\n\t\treturn b.zone.population - a.zone.population;\n\t}\n\n\tfunction addToGuesses (name, offsets) {\n\t\tvar i, offset;\n\t\tarrayToInt(offsets);\n\t\tfor (i = 0; i < offsets.length; i++) {\n\t\t\toffset = offsets[i];\n\t\t\tguesses[offset] = guesses[offset] || {};\n\t\t\tguesses[offset][name] = true;\n\t\t}\n\t}\n\n\tfunction guessesForUserOffsets (offsets) {\n\t\tvar offsetsLength = offsets.length,\n\t\t\tfilteredGuesses = {},\n\t\t\tout = [],\n\t\t\ti, j, guessesOffset;\n\n\t\tfor (i = 0; i < offsetsLength; i++) {\n\t\t\tguessesOffset = guesses[offsets[i].offset] || {};\n\t\t\tfor (j in guessesOffset) {\n\t\t\t\tif (guessesOffset.hasOwnProperty(j)) {\n\t\t\t\t\tfilteredGuesses[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (i in filteredGuesses) {\n\t\t\tif (filteredGuesses.hasOwnProperty(i)) {\n\t\t\t\tout.push(names[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction rebuildGuess () {\n\n\t\t// use Intl API when available and returning valid time zone\n\t\ttry {\n\t\t\tvar intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\t\t\tif (intlName && intlName.length > 3) {\n\t\t\t\tvar name = names[normalizeName(intlName)];\n\t\t\t\tif (name) {\n\t\t\t\t\treturn name;\n\t\t\t\t}\n\t\t\t\tlogError(\"Moment Timezone found \" + intlName + \" from the Intl api, but did not have that data loaded.\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// Intl unavailable, fall back to manual guessing.\n\t\t}\n\n\t\tvar offsets = userOffsets(),\n\t\t\toffsetsLength = offsets.length,\n\t\t\tguesses = guessesForUserOffsets(offsets),\n\t\t\tzoneScores = [],\n\t\t\tzoneScore, i, j;\n\n\t\tfor (i = 0; i < guesses.length; i++) {\n\t\t\tzoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);\n\t\t\tfor (j = 0; j < offsetsLength; j++) {\n\t\t\t\tzoneScore.scoreOffsetAt(offsets[j]);\n\t\t\t}\n\t\t\tzoneScores.push(zoneScore);\n\t\t}\n\n\t\tzoneScores.sort(sortZoneScores);\n\n\t\treturn zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;\n\t}\n\n\tfunction guess (ignoreCache) {\n\t\tif (!cachedGuess || ignoreCache) {\n\t\t\tcachedGuess = rebuildGuess();\n\t\t}\n\t\treturn cachedGuess;\n\t}\n\n\t/************************************\n\t\tGlobal Methods\n\t************************************/\n\n\tfunction normalizeName (name) {\n\t\treturn (name || '').toLowerCase().replace(/\\//g, '_');\n\t}\n\n\tfunction addZone (packed) {\n\t\tvar i, name, split, normalized;\n\n\t\tif (typeof packed === \"string\") {\n\t\t\tpacked = [packed];\n\t\t}\n\n\t\tfor (i = 0; i < packed.length; i++) {\n\t\t\tsplit = packed[i].split('|');\n\t\t\tname = split[0];\n\t\t\tnormalized = normalizeName(name);\n\t\t\tzones[normalized] = packed[i];\n\t\t\tnames[normalized] = name;\n\t\t\taddToGuesses(normalized, split[2].split(' '));\n\t\t}\n\t}\n\n\tfunction getZone (name, caller) {\n\t\tif (typeof name !== 'string') {\n\t\t\tthrow new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');\n\t\t}\n\n\t\tname = normalizeName(name);\n\n\t\tvar zone = zones[name];\n\t\tvar link;\n\n\t\tif (zone instanceof Zone) {\n\t\t\treturn zone;\n\t\t}\n\n\t\tif (typeof zone === 'string') {\n\t\t\tzone = new Zone(zone);\n\t\t\tzones[name] = zone;\n\t\t\treturn zone;\n\t\t}\n\n\t\t// Pass getZone to prevent recursion more than 1 level deep\n\t\tif (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {\n\t\t\tzone = zones[name] = new Zone();\n\t\t\tzone._set(link);\n\t\t\tzone.name = names[name];\n\t\t\treturn zone;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfunction getNames () {\n\t\tvar i, out = [];\n\n\t\tfor (i in names) {\n\t\t\tif (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {\n\t\t\t\tout.push(names[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn out.sort();\n\t}\n\n\tfunction addLink (aliases) {\n\t\tvar i, alias, normal0, normal1;\n\n\t\tif (typeof aliases === \"string\") {\n\t\t\taliases = [aliases];\n\t\t}\n\n\t\tfor (i = 0; i < aliases.length; i++) {\n\t\t\talias = aliases[i].split('|');\n\n\t\t\tnormal0 = normalizeName(alias[0]);\n\t\t\tnormal1 = normalizeName(alias[1]);\n\n\t\t\tlinks[normal0] = normal1;\n\t\t\tnames[normal0] = alias[0];\n\n\t\t\tlinks[normal1] = normal0;\n\t\t\tnames[normal1] = alias[1];\n\t\t}\n\t}\n\n\tfunction loadData (data) {\n\t\taddZone(data.zones);\n\t\taddLink(data.links);\n\t\ttz.dataVersion = data.version;\n\t}\n\n\tfunction zoneExists (name) {\n\t\tif (!zoneExists.didShowError) {\n\t\t\tzoneExists.didShowError = true;\n\t\t\t\tlogError(\"moment.tz.zoneExists('\" + name + \"') has been deprecated in favor of !moment.tz.zone('\" + name + \"')\");\n\t\t}\n\t\treturn !!getZone(name);\n\t}\n\n\tfunction needsOffset (m) {\n\t\tvar isUnixTimestamp = (m._f === 'X' || m._f === 'x');\n\t\treturn !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);\n\t}\n\n\tfunction logError (message) {\n\t\tif (typeof console !== 'undefined' && typeof console.error === 'function') {\n\t\t\tconsole.error(message);\n\t\t}\n\t}\n\n\t/************************************\n\t\tmoment.tz namespace\n\t************************************/\n\n\tfunction tz (input) {\n\t\tvar args = Array.prototype.slice.call(arguments, 0, -1),\n\t\t\tname = arguments[arguments.length - 1],\n\t\t\tzone = getZone(name),\n\t\t\tout  = moment.utc.apply(null, args);\n\n\t\tif (zone && !moment.isMoment(input) && needsOffset(out)) {\n\t\t\tout.add(zone.parse(out), 'minutes');\n\t\t}\n\n\t\tout.tz(name);\n\n\t\treturn out;\n\t}\n\n\ttz.version      = VERSION;\n\ttz.dataVersion  = '';\n\ttz._zones       = zones;\n\ttz._links       = links;\n\ttz._names       = names;\n\ttz.add          = addZone;\n\ttz.link         = addLink;\n\ttz.load         = loadData;\n\ttz.zone         = getZone;\n\ttz.zoneExists   = zoneExists; // deprecated in 0.1.0\n\ttz.guess        = guess;\n\ttz.names        = getNames;\n\ttz.Zone         = Zone;\n\ttz.unpack       = unpack;\n\ttz.unpackBase60 = unpackBase60;\n\ttz.needsOffset  = needsOffset;\n\ttz.moveInvalidForward   = true;\n\ttz.moveAmbiguousForward = false;\n\n\t/************************************\n\t\tInterface with Moment.js\n\t************************************/\n\n\tvar fn = moment.fn;\n\n\tmoment.tz = tz;\n\n\tmoment.defaultZone = null;\n\n\tmoment.updateOffset = function (mom, keepTime) {\n\t\tvar zone = moment.defaultZone,\n\t\t\toffset;\n\n\t\tif (mom._z === undefined) {\n\t\t\tif (zone && needsOffset(mom) && !mom._isUTC) {\n\t\t\t\tmom._d = moment.utc(mom._a)._d;\n\t\t\t\tmom.utc().add(zone.parse(mom), 'minutes');\n\t\t\t}\n\t\t\tmom._z = zone;\n\t\t}\n\t\tif (mom._z) {\n\t\t\toffset = mom._z.utcOffset(mom);\n\t\t\tif (Math.abs(offset) < 16) {\n\t\t\t\toffset = offset / 60;\n\t\t\t}\n\t\t\tif (mom.utcOffset !== undefined) {\n\t\t\t\tmom.utcOffset(-offset, keepTime);\n\t\t\t} else {\n\t\t\t\tmom.zone(offset, keepTime);\n\t\t\t}\n\t\t}\n\t};\n\n\tfn.tz = function (name, keepTime) {\n\t\tif (name) {\n\t\t\tthis._z = getZone(name);\n\t\t\tif (this._z) {\n\t\t\t\tmoment.updateOffset(this, keepTime);\n\t\t\t} else {\n\t\t\t\tlogError(\"Moment Timezone has no data for \" + name + \". See http://momentjs.com/timezone/docs/#/data-loading/.\");\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif (this._z) { return this._z.name; }\n\t};\n\n\tfunction abbrWrap (old) {\n\t\treturn function () {\n\t\t\tif (this._z) { return this._z.abbr(this); }\n\t\t\treturn old.call(this);\n\t\t};\n\t}\n\n\tfunction resetZoneWrap (old) {\n\t\treturn function () {\n\t\t\tthis._z = null;\n\t\t\treturn old.apply(this, arguments);\n\t\t};\n\t}\n\n\tfn.zoneName = abbrWrap(fn.zoneName);\n\tfn.zoneAbbr = abbrWrap(fn.zoneAbbr);\n\tfn.utc      = resetZoneWrap(fn.utc);\n\n\tmoment.tz.setDefault = function(name) {\n\t\tif (major < 2 || (major === 2 && minor < 9)) {\n\t\t\tlogError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');\n\t\t}\n\t\tmoment.defaultZone = name ? getZone(name) : null;\n\t\treturn moment;\n\t};\n\n\t// Cloning a moment should include the _z property.\n\tvar momentProperties = moment.momentProperties;\n\tif (Object.prototype.toString.call(momentProperties) === '[object Array]') {\n\t\t// moment 2.8.1+\n\t\tmomentProperties.push('_z');\n\t\tmomentProperties.push('_a');\n\t} else if (momentProperties) {\n\t\t// moment 2.7.0\n\t\tmomentProperties._z = null;\n\t}\n\n\t// INJECT DATA\n\n\treturn moment;\n}));\n"],"sourceRoot":""}