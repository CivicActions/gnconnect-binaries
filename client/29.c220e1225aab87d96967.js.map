{"version":3,"sources":["webpack:///./utils/timezone.jsx","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./components/audit_table.jsx","webpack:///./components/user_settings/user_settings.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/manage_timezones.jsx","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_languages.jsx","webpack:///./components/user_settings/display/user_settings_theme.jsx","webpack:///./components/user_settings/display/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/color_chooser.jsx","webpack:///./components/color_input.jsx","webpack:///./components/user_settings/display/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/access_history_modal/index.js","webpack:///./components/access_history_modal/access_history_modal.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx"],"names":["getSupportedTimezones","_general","store","getState","getBrowserTimezone","moment","tz","guess","__webpack_require__","map","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","module","exports","formatAuditInfo","_reactIntl","Utils","holders","defineMessages","sessionRevoked","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","props","accessList","formatMessage","intl","i","audits","length","audit","auditInfo","uContent","showUserId","profile","UserStore","getProfile","userId","_react2","default","createElement","className","email","iContent","showIp","ip","sContent","showSession","sessionId","descStyle","desc","toLowerCase","indexOf","key","timestamp","userIdContent","FormattedMessage","ipContent","sessionContent","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelURL","channelObj","channelName","ChannelStore","getByName","display_name","username","getDirectTeammate","userIdField","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","getCurrentUser","isSystemAdmin","roles","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","FormattedDate","value","day","month","year","FormattedTime","hour","minute","user_id","ip_address","session_id","propTypes","intlShape","isRequired","PropTypes","array","bool","injectIntl","utils","UserSettings","_classCallCheck3","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","onListenerChange","areObjectsEqual","state","setState","addChangeListener","removeChangeListener","activeTab","_general2","activeSection","prevActiveSection","updateSection","updateTab","closeModal","collapseModal","_security2","setRequireConfirm","_notifications2","_display2","setEnforceFocus","_sidebar2","_advanced2","React","Component","string","func","_reactRedux","connect","config","getConfig","license","getLicense","enablePreviewFeatures","EnablePreviewFeatures","buildEnterpriseReady","BuildEnterpriseReady","isLicensed","IsLicensed","AdvancedSettingsDisplay","_user_actions","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","getStateFromStores","advancedSettings","PreferenceStore","getCategory","Preferences","CATEGORY_ADVANCED_SETTINGS","settings","send_on_ctrl_enter","get","formatting","join_leave","preReleaseFeaturesKeys","_keys2","enabledFeatures","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","_getIterator3","next","done","_step$value","_slicedToArray3","name","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","feature","FeatureTogglePrefix","label","err","return","previewFeaturesEnabled","preReleaseFeatures","isSaving","updateSetting","setting","toggleFeature","checked","String","forEach","saveEnabledFeatures","features","push","handleSubmit","preferences","getCurrentId","Array","isArray","category","savePreferences","handleUpdateSection","section","renderFormattingSection","_setting_item_max2","title","inputs","type","onChange","bind","submit","saving","server_error","serverError","_setting_item_min2","describe","renderOnOffLabel","focused","prevSections","renderJoinLeaveSection","advancedCtrlSend","advancedPreviewFeatures","enabled","_this2","ctrlSendSection","ctrlSendActive","formattingSection","formattingSectionDivider","displayJoinLeaveSection","displayJoinLeaveSectionDivider","previewFeaturesSection","previewFeaturesSectionDivider","target","renderFeatureLabel","localizeMessage","values","count","data-dismiss","aria-label","onClick","aria-hidden","ref","_redux","_timezone","_users","_timezone2","_timezone_utils","timezones","currentUserId","getCurrentUserId","userTimezone","getUserTimezone","automaticTimezoneNotSet","useAutomaticTimezone","automaticTimezone","shouldAutoUpdateTimezone","allowCustomThemes","AllowCustomThemes","enableLinkPreviews","EnableLinkPreviews","defaultClientLocale","DefaultClientLocale","enableThemeSelection","EnableThemeSelection","enableTimezone","ExperimentalTimezone","configTeammateNameDisplay","TeammateNameDisplay","currentUserTimezone","getUserCurrentTimezone","dispatch","actions","bindActionCreators","autoUpdateTimezone","UserSettingsDisplay","I18n","getDisplayStateFromStores","militaryTime","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","USE_MILITARY_TIME_DEFAULT","teammateNameDisplay","NAME_NAME_FORMAT","channelDisplayMode","CHANNEL_DISPLAY_MODE","CHANNEL_DISPLAY_MODE_DEFAULT","messageDisplay","MESSAGE_DISPLAY","MESSAGE_DISPLAY_DEFAULT","collapseDisplay","COLLAPSE_DISPLAY","COLLAPSE_DISPLAY_DEFAULT","linkPreviewDisplay","LINK_PREVIEW_DISPLAY","LINK_PREVIEW_DISPLAY_DEFAULT","timePreference","teammateNameDisplayPreference","channelDisplayModePreference","messageDisplayPreference","collapseDisplayPreference","linkPreviewDisplayPreference","deletePreferences","handleClockRadio","handleTeammateNameDisplayRadio","updateState","newState","_extends3","theme","clock","linkpreview","message_display","channel_display_mode","languages","_props","display","firstOption","secondOption","thirdOption","description","firstMessage","radionButtonText","message","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdDisplay","thirdSection","handleOnChange","collapseSection","createSection","defaultDisplay","linkPreviewSection","clockSection","teammateNameDisplaySection","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","_manage_timezones2","manualTimezone","width","getTimezoneRegion","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","userLocale","locale","isLanguageAvailable","_manage_languages2","getLanguageInfo","getLanguages","themeSection","_user_settings_theme2","selected","object","shape","ManageTimezones","manualTimezoneInput","handleTimezoneSelected","timezoneNotChanged","_this$state","_this$props","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","changeTimezone","submitUser","_this$state2","timezone","toString","updatedUser","updateUser","handleAutomaticTimezone","handleManualTimezone","_state","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","disabled","providers","TimezoneProvider","_suggestion_box2","setSwitchBoxRef","onItemSelected","listComponent","SuggestionList","maxLength","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","FormattedHTMLMessage","containerStyle","PureComponent","_constants","TimezoneSuggestion","item","isSelection","handleClick","Suggestion","suggestionId","timezonePrefix","displayAllTimezones","filterTimezones","setTimeout","AppDispatcher","handleServerAction","ActionTypes","SUGGESTION_RECEIVED_SUGGESTIONS","matchedPretext","terms","items","component","filteredTimezones","filter","t","Provider","GlobalActions","ManageLanguage","setLanguage","changeLanguage","newLocalizationSelected","options","locales","l","order","sort","a","b","lang","input","UserActions","ThemeSetting","submitTheme","teamId","applyToAllTeams","saveTheme","originalTheme","_assign2","scrollToTop","updateTheme","themeChanged","field","hasOwnProperty","applyTheme","resetFields","handleImportModal","handleViewAction","TOGGLE_IMPORT_THEME_MODAL","callback","_jquery2","ReactDOM","findDOMNode","refs","addClass","removeClass","nextProps","getTheme","codeTheme","DEFAULT_CODE_THEME","showAllTeamsCheckbox","TeamStore","getAll","CATEGORY_THEME","size","scrollTop","displayCustom","custom","premade","_custom_theme_chooser2","_premade_theme_chooser2","themeUI","href","rel","allTeamsCheckbox","submitExtra","_reactBootstrap","_utils","UserAgent","messages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","CustomThemeChooser","_initialiseProps","copyTheme","setCopyTheme","on","onCodeThemeChange","off","image","_stringify2","node","isIos","toggleClass","slideToggle","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","Popover","bsStyle","src","defaultValue","OverlayTrigger","trigger","placement","overlay","group","_color_chooser2","color","handleColorChange","mentionBj","pasteBox","onPaste","pasteBoxChange","onChangeHandle","selectTheme","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","settingId","_this3","newTheme","_defineProperty3","text","window","clipboardData","getData","JSON","parse","stopPropagation","textarea","focus","setSelectionRange","preventDefault","sidebarStylesHeader","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","ColorChooser","handleChange","newColor","_color_input2","_reactColor","ColorInput","checkClick","colorPickerDOMNode","ReactDom","colorPicker","contains","isOpened","togglePicker","newColorData","hex","getColorPicker","idOpened","prevProps","prevState","prevIsOpened","document","addEventListener","removeEventListener","readOnly","style","backgroundColor","ChromePicker","allowedThemes","AllowedThemes","PremadeThemeChooser","premadeThemes","hasAllowedThemes","k","THEMES","premadeTheme","$","extend","activeClass","arrayOf","defaultProps","sendEmailNotifications","SendEmailNotifications","requireEmailVerification","RequireEmailVerification","maxFileSize","parseInt","MaxFileSize","ldapFirstNameAttributeSet","LdapFirstNameAttributeSet","ldapLastNameAttributeSet","LdapLastNameAttributeSet","samlFirstNameAttributeSet","SamlFirstNameAttributeSet","samlLastNameAttributeSet","SamlLastNameAttributeSet","ldapNicknameAttributeSet","LdapNicknameAttributeSet","samlNicknameAttributeSet","SamlNicknameAttributeSet","positionAttributeSet","PositionAttributeSet","getMe","UserSettingsGeneralTab","_diagnostics_actions","usernameReserved","usernameRestrictions","validEmail","emailMatch","checkEmail","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","profilePicture","close","position","ACCEPTED_PROFILE_IMAGE_TYPES","submitUsername","usernameError","isValidUsername","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","submitNickname","submitName","firstName","lastName","first_name","last_name","submitEmail","confirmEmail","isEmail","emailError","emailUpdated","sectionIsSaving","ErrorStore","storeLastError","emitChange","emailChangeInProgress","submitPicture","pictureFile","submitActive","file","includes","loadingPicture","uploadProfileImage","setupInitialState","submitPosition","updateUsername","updateFirstName","updateLastName","updateNickname","updatePosition","updateEmail","updateConfirmEmail","files","originalEmail","emailSection","emailEnabled","emailVerificationEnabled","helpText","newEmail","auth_service","autoFocus","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","extraInfo","onFocus","moveCursorToEnd","notifLink","notify","isMobile","nicknameSection","nicknameLabel","MAX_NICKNAME_LENGTH","autoCapitalize","usernameSection","usernameLabel","positionSection","positionLabel","MAX_POSITION_LENGTH","createEmailSection","pictureSection","_setting_picture2","onSubmit","imageURLForUser","onFileChange","minMessage","last_picture_update","number","enableEmailBatching","EnableEmailBatching","siteName","SiteName","sendPushNotifications","SendPushNotifications","enableAutoResponder","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","getNotificationsStateFromStores","desktop","NotificationLevels","MENTION","sound","comments","enableEmail","pushActivity","pushStatus","UserStatuses","AWAY","autoResponderActive","autoResponderMessage","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","arguments","data","mentionKeys","stringKeys","updateUserNotifyProps","handleCancel","setStateValue","handleEmailRadio","wrapper","updateUsernameKey","val","updateFirstNameKey","updateChannelKey","updateCustomMentionKeys","customcheck","custommentions","onCustomChange","createPushNotificationSection","pushActivityRadio","ALL","NONE","pushStatusRadio","ONLINE","pushStatusSettings","handlePushStatusRadio","OFFLINE","handlePushRadio","keysSection","concat","commentsSection","commentsActive","handleNotifyCommentsRadio","autoResponderSection","_manage_auto_responder2","setParentState","error","pushNotificationSection","_desktop_notification_settings2","activity","cancel","active","_email_notification_setting2","emailInterval","getEmailInterval","onCancel","DesktopNotificationSettings","handleMinUpdateSection","handleMaxUpdateSection","currentTarget","getAttribute","buildMaximizedSetting","activityRadio","soundSection","soundRadio","hasSoundOptions","data-key","data-value","buildMinimizedSetting","seconds","DEFAULT_NOTIFICATION_DURATION","EmailNotificationSetting","savePreference","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","INTERVAL_IMMEDIATE","INTERVAL_HOUR","batchingOptions","batchingInfo","INTERVAL_FIFTEEN_MINUTES","data-enable-email","data-email-interval","INTERVAL_NEVER","ManageAutoResponder","handleAutoResponderChecked","onMessageChanged","activeToggle","_autosize_textarea2","resize","rows","placeholder","shiftEnter","UserUtils","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","hasUserAccessTokenRole","mfaLicensed","MFA","enableOAuthServiceProvider","EnableOAuthServiceProvider","enableMultifactorAuthentication","EnableMultifactorAuthentication","enforceMultifactorAuthentication","EnforceMultifactorAuthentication","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableLdap","EnableLdap","enableSaml","EnableSaml","enableSignUpWithOffice365","EnableSignUpWithOffice365","experimentalEnableAuthenticationTransfer","ExperimentalEnableAuthenticationTransfer","canUseAccessTokens","passwordConfig","getPasswordConfig","SecurityTab","_reactRouterDom","_browser_history","SECTION_MFA","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SECTION_TOKENS","submitPassword","currentPassword","newPassword","confirmPassword","_Utils$isValidPasswor","isValidPassword","valid","savingPassword","updatePassword","getDefaultState","passwordError","defaultState","setupMfa","browserHistory","removeMfa","deactivateMfa","updateCurrentPassword","updateNewPassword","updateConfirmPassword","deauthorizeApp","appId","deauthorizeOAuthApp","authorizedApps","app","createMfaSection","content","mfa_active","mfaRemoveHelp","mfaButtonText","createPasswordSection","d","last_password_update","hours12","getBool","time","hour12","createSignInSection","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","Link","to","encodeURIComponent","link","createOAuthAppsSection","apps","homepage","data-app","alt","icon_url","icon50","wrapperClass","cancelButtonText","tokenError","authService","getAuthorizedApps","passwordSection","numMethods","signInSection","mfaSection","oauthSection","tokensSection","_user_access_token_section2","_toggle_modal_button2","dialogType","AccessHistoryModal","ActivityLogModal","getUserAudits","onAuditChange","onShow","onHide","getStateFromStoresForAudits","moreInfo","show","getAudits","perfectScrollbar","addAuditsChangeListener","removeAuditsChangeListener","_loading_screen2","_audit_table2","Modal","dialogClassName","onExited","bsSize","Header","closeButton","Title","Body","_i18n","getCurrentLocale","getSessions","revokeSession","isMobileSession","session","device_id","mobileSessionInfo","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","submitRevoke","handleMoreInfo","sessions","altId","modalContent","closest","then","addSessionsChangeListener","removeSessionsChangeListener","newMoreInfo","activityList","currentSession","lastAccessTime","last_activity_at","firstAccessTime","platform","sessionInfo","os","browser","getMonthLong","loading","role","userAccessTokens","entities","users","myUserAccessTokens","getUserAccessTokensForUser","createUserAccessToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","UserAccessTokenSection","_user_agent","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","startCreatingToken","tokenCreationState","stopCreatingToken","handleCreateToken","_asyncToGenerator3","_regenerator2","mark","_callee","_ref2","wrap","_context","prev","handleCancelConfirm","newtokendescription","abrupt","confirmCopyToken","sent","newToken","stop","confirmAction","showConfirmModal","confirmTitle","confirmMessage","confirmButton","confirmComplete","confirmHideCancel","confirmCreateToken","saveTokenKeyPress","isKeyPressed","KeyCodes","ENTER","confirmRevokeToken","tokenId","revokeToken","_ref3","_callee2","_ref4","_context2","_x","apply","activateToken","_ref5","_callee3","_ref6","_context3","_x2","deactivateToken","_ref7","_callee4","_ref8","_context4","_x3","tokenListClass","tokenList","_values2","activeLink","activeStatus","is_active","noTokenText","newTokenSection","onKeyPress","_save_button2","btnClass","savingMessage","infoPosition","_confirm_modal2","confirmButtonText","onConfirm","hideCancel","_preferences","_preferences2","_constants2","closeUnusedDirectMessages","CATEGORY_SIDEBAR_SETTINGS","displayUnreadSection","ExperimentalGroupUnreadChannels","GroupUnreadChannels","DEFAULT_ON","showUnusedOption","CloseUnusedDirectMessages","showUnreadOption","DISABLED","UserSettingsSidebar","close_unused_direct_messages","show_unread_section","_this$props2","renderAutoCloseDMLabel","renderAutoCloseDMSection","renderUnreadLabel","renderUnreadSection","autoCloseDMSection","unreadSection"],"mappings":"+IAQgBA,sBAAT,WACH,OAAO,EAAAC,EAAAD,uBAAaE,UAAMC,eAGdC,mBAAT,WACH,OAAOC,UAAOC,GAAGC,SAVrB,IAAAN,EAAAO,EAAA,QACAA,EAAA,WAEAA,EAAA,gFCNA,IAAAC,GACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,gBAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,UAAA,IACAC,aAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,UAAA,IACAC,aAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,YAAA,IACAC,eAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IAC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","file":"29.c220e1225aab87d96967.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getSupportedTimezones as getTimezones} from 'mattermost-redux/selectors/entities/general';\nimport moment from 'moment-timezone';\n\nimport store from 'stores/redux_store.jsx';\n\nexport function getSupportedTimezones() {\n    return getTimezones(store.getState());\n}\n\nexport function getBrowserTimezone() {\n    return moment.tz.guess();\n}\n","var map = {\n\t\"./af\": 894,\n\t\"./af.js\": 894,\n\t\"./ar\": 895,\n\t\"./ar-dz\": 896,\n\t\"./ar-dz.js\": 896,\n\t\"./ar-kw\": 897,\n\t\"./ar-kw.js\": 897,\n\t\"./ar-ly\": 898,\n\t\"./ar-ly.js\": 898,\n\t\"./ar-ma\": 899,\n\t\"./ar-ma.js\": 899,\n\t\"./ar-sa\": 900,\n\t\"./ar-sa.js\": 900,\n\t\"./ar-tn\": 901,\n\t\"./ar-tn.js\": 901,\n\t\"./ar.js\": 895,\n\t\"./az\": 902,\n\t\"./az.js\": 902,\n\t\"./be\": 903,\n\t\"./be.js\": 903,\n\t\"./bg\": 904,\n\t\"./bg.js\": 904,\n\t\"./bm\": 905,\n\t\"./bm.js\": 905,\n\t\"./bn\": 906,\n\t\"./bn.js\": 906,\n\t\"./bo\": 907,\n\t\"./bo.js\": 907,\n\t\"./br\": 908,\n\t\"./br.js\": 908,\n\t\"./bs\": 909,\n\t\"./bs.js\": 909,\n\t\"./ca\": 910,\n\t\"./ca.js\": 910,\n\t\"./cs\": 911,\n\t\"./cs.js\": 911,\n\t\"./cv\": 912,\n\t\"./cv.js\": 912,\n\t\"./cy\": 913,\n\t\"./cy.js\": 913,\n\t\"./da\": 914,\n\t\"./da.js\": 914,\n\t\"./de\": 915,\n\t\"./de-at\": 916,\n\t\"./de-at.js\": 916,\n\t\"./de-ch\": 917,\n\t\"./de-ch.js\": 917,\n\t\"./de.js\": 915,\n\t\"./dv\": 918,\n\t\"./dv.js\": 918,\n\t\"./el\": 919,\n\t\"./el.js\": 919,\n\t\"./en-au\": 920,\n\t\"./en-au.js\": 920,\n\t\"./en-ca\": 921,\n\t\"./en-ca.js\": 921,\n\t\"./en-gb\": 922,\n\t\"./en-gb.js\": 922,\n\t\"./en-ie\": 923,\n\t\"./en-ie.js\": 923,\n\t\"./en-il\": 924,\n\t\"./en-il.js\": 924,\n\t\"./en-nz\": 925,\n\t\"./en-nz.js\": 925,\n\t\"./eo\": 926,\n\t\"./eo.js\": 926,\n\t\"./es\": 927,\n\t\"./es-do\": 928,\n\t\"./es-do.js\": 928,\n\t\"./es-us\": 929,\n\t\"./es-us.js\": 929,\n\t\"./es.js\": 927,\n\t\"./et\": 930,\n\t\"./et.js\": 930,\n\t\"./eu\": 931,\n\t\"./eu.js\": 931,\n\t\"./fa\": 932,\n\t\"./fa.js\": 932,\n\t\"./fi\": 933,\n\t\"./fi.js\": 933,\n\t\"./fo\": 934,\n\t\"./fo.js\": 934,\n\t\"./fr\": 935,\n\t\"./fr-ca\": 936,\n\t\"./fr-ca.js\": 936,\n\t\"./fr-ch\": 937,\n\t\"./fr-ch.js\": 937,\n\t\"./fr.js\": 935,\n\t\"./fy\": 938,\n\t\"./fy.js\": 938,\n\t\"./gd\": 939,\n\t\"./gd.js\": 939,\n\t\"./gl\": 940,\n\t\"./gl.js\": 940,\n\t\"./gom-latn\": 941,\n\t\"./gom-latn.js\": 941,\n\t\"./gu\": 942,\n\t\"./gu.js\": 942,\n\t\"./he\": 943,\n\t\"./he.js\": 943,\n\t\"./hi\": 944,\n\t\"./hi.js\": 944,\n\t\"./hr\": 945,\n\t\"./hr.js\": 945,\n\t\"./hu\": 946,\n\t\"./hu.js\": 946,\n\t\"./hy-am\": 947,\n\t\"./hy-am.js\": 947,\n\t\"./id\": 948,\n\t\"./id.js\": 948,\n\t\"./is\": 949,\n\t\"./is.js\": 949,\n\t\"./it\": 950,\n\t\"./it.js\": 950,\n\t\"./ja\": 951,\n\t\"./ja.js\": 951,\n\t\"./jv\": 952,\n\t\"./jv.js\": 952,\n\t\"./ka\": 953,\n\t\"./ka.js\": 953,\n\t\"./kk\": 954,\n\t\"./kk.js\": 954,\n\t\"./km\": 955,\n\t\"./km.js\": 955,\n\t\"./kn\": 956,\n\t\"./kn.js\": 956,\n\t\"./ko\": 957,\n\t\"./ko.js\": 957,\n\t\"./ky\": 958,\n\t\"./ky.js\": 958,\n\t\"./lb\": 959,\n\t\"./lb.js\": 959,\n\t\"./lo\": 960,\n\t\"./lo.js\": 960,\n\t\"./lt\": 961,\n\t\"./lt.js\": 961,\n\t\"./lv\": 962,\n\t\"./lv.js\": 962,\n\t\"./me\": 963,\n\t\"./me.js\": 963,\n\t\"./mi\": 964,\n\t\"./mi.js\": 964,\n\t\"./mk\": 965,\n\t\"./mk.js\": 965,\n\t\"./ml\": 966,\n\t\"./ml.js\": 966,\n\t\"./mn\": 967,\n\t\"./mn.js\": 967,\n\t\"./mr\": 968,\n\t\"./mr.js\": 968,\n\t\"./ms\": 969,\n\t\"./ms-my\": 970,\n\t\"./ms-my.js\": 970,\n\t\"./ms.js\": 969,\n\t\"./mt\": 971,\n\t\"./mt.js\": 971,\n\t\"./my\": 972,\n\t\"./my.js\": 972,\n\t\"./nb\": 973,\n\t\"./nb.js\": 973,\n\t\"./ne\": 974,\n\t\"./ne.js\": 974,\n\t\"./nl\": 975,\n\t\"./nl-be\": 976,\n\t\"./nl-be.js\": 976,\n\t\"./nl.js\": 975,\n\t\"./nn\": 977,\n\t\"./nn.js\": 977,\n\t\"./pa-in\": 978,\n\t\"./pa-in.js\": 978,\n\t\"./pl\": 979,\n\t\"./pl.js\": 979,\n\t\"./pt\": 980,\n\t\"./pt-br\": 981,\n\t\"./pt-br.js\": 981,\n\t\"./pt.js\": 980,\n\t\"./ro\": 982,\n\t\"./ro.js\": 982,\n\t\"./ru\": 983,\n\t\"./ru.js\": 983,\n\t\"./sd\": 984,\n\t\"./sd.js\": 984,\n\t\"./se\": 985,\n\t\"./se.js\": 985,\n\t\"./si\": 986,\n\t\"./si.js\": 986,\n\t\"./sk\": 987,\n\t\"./sk.js\": 987,\n\t\"./sl\": 988,\n\t\"./sl.js\": 988,\n\t\"./sq\": 989,\n\t\"./sq.js\": 989,\n\t\"./sr\": 990,\n\t\"./sr-cyrl\": 991,\n\t\"./sr-cyrl.js\": 991,\n\t\"./sr.js\": 990,\n\t\"./ss\": 992,\n\t\"./ss.js\": 992,\n\t\"./sv\": 993,\n\t\"./sv.js\": 993,\n\t\"./sw\": 994,\n\t\"./sw.js\": 994,\n\t\"./ta\": 995,\n\t\"./ta.js\": 995,\n\t\"./te\": 996,\n\t\"./te.js\": 996,\n\t\"./tet\": 997,\n\t\"./tet.js\": 997,\n\t\"./tg\": 998,\n\t\"./tg.js\": 998,\n\t\"./th\": 999,\n\t\"./th.js\": 999,\n\t\"./tl-ph\": 1000,\n\t\"./tl-ph.js\": 1000,\n\t\"./tlh\": 1001,\n\t\"./tlh.js\": 1001,\n\t\"./tr\": 1002,\n\t\"./tr.js\": 1002,\n\t\"./tzl\": 1003,\n\t\"./tzl.js\": 1003,\n\t\"./tzm\": 1004,\n\t\"./tzm-latn\": 1005,\n\t\"./tzm-latn.js\": 1005,\n\t\"./tzm.js\": 1004,\n\t\"./ug-cn\": 1006,\n\t\"./ug-cn.js\": 1006,\n\t\"./uk\": 1007,\n\t\"./uk.js\": 1007,\n\t\"./ur\": 1008,\n\t\"./ur.js\": 1008,\n\t\"./uz\": 1009,\n\t\"./uz-latn\": 1010,\n\t\"./uz-latn.js\": 1010,\n\t\"./uz.js\": 1009,\n\t\"./vi\": 1011,\n\t\"./vi.js\": 1011,\n\t\"./x-pseudo\": 1012,\n\t\"./x-pseudo.js\": 1012,\n\t\"./yo\": 1013,\n\t\"./yo.js\": 1013,\n\t\"./zh-cn\": 1014,\n\t\"./zh-cn.js\": 1014,\n\t\"./zh-hk\": 1015,\n\t\"./zh-hk.js\": 1015,\n\t\"./zh-tw\": 1016,\n\t\"./zh-tw.js\": 1016\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1140;","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport ChannelStore from 'stores/channel_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: 'audit_table.sessionRevoked',\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: 'audit_table.channelCreated',\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: 'audit_table.establishedDM',\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: 'audit_table.nameUpdated',\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: 'audit_table.headerUpdated',\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: 'audit_table.channelDeleted',\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: 'audit_table.userAdded',\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: 'audit_table.userRemoved',\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: 'audit_table.attemptedRegisterApp',\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: 'audit_table.attemptedAllowOAuthAccess',\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: 'audit_table.successfullOAuthAccess',\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: 'audit_table.failedOAuthAccess',\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: 'audit_table.attemptedOAuthToken',\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: 'audit_table.successfullOAuthToken',\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: 'audit_table.oauthTokenFailed',\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: 'audit_table.attemptedLogin',\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: 'audit_table.authenticated',\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: 'audit_table.successfullLogin',\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: 'audit_table.failedLogin',\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: 'audit_table.updatePicture',\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: 'audit_table.updateGeneral',\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: 'audit_table.attemptedPassword',\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: 'audit_table.successfullPassword',\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: 'audit_table.failedPassword',\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: 'audit_table.updatedRol',\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: 'audit_table.member',\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: 'audit_table.accountActive',\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: 'audit_table.accountInactive',\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: 'audit_table.by',\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: 'audit_table.byAdmin',\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: 'audit_table.sentEmail',\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: 'audit_table.attemptedReset',\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: 'audit_table.successfullReset',\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: 'audit_table.updateGlobalNotifications',\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: 'audit_table.attemptedWebhookCreate',\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: 'audit_table.successfullWebhookCreate',\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: 'audit_table.failedWebhookCreate',\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: 'audit_table.attemptedWebhookDelete',\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: 'audit_table.successfullWebhookDelete',\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: 'audit_table.failedWebhookDelete',\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: 'audit_table.logout',\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: 'audit_table.verified',\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: 'audit_table.revokedAll',\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: 'audit_table.loginAttempt',\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: 'audit_table.loginFailure',\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: 'audit_table.attemptedLicenseAdd',\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: 'audit_table.successfullLicenseAdd',\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: 'audit_table.failedExpiredLicenseAdd',\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: 'audit_table.failedInvalidLicenseAdd',\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: 'audit_table.licenseRemoved',\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nfunction AuditTable(props) {\n    var accessList = [];\n\n    const {formatMessage} = props.intl;\n    for (var i = 0; i < props.audits.length; i++) {\n        const audit = props.audits[i];\n        const auditInfo = formatAuditInfo(audit, formatMessage);\n\n        let uContent;\n        if (props.showUserId) {\n            var profile = UserStore.getProfile(auditInfo.userId);\n            if (profile) {\n                uContent = <td className='word-break--all'>{profile.email}</td>;\n            } else {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n        }\n\n        let iContent;\n        if (props.showIp) {\n            iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n        }\n\n        let sContent;\n        if (props.showSession) {\n            sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n        }\n\n        let descStyle = '';\n        if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n            descStyle = ' color--error';\n        }\n\n        accessList[i] = (\n            <tr key={audit.id}>\n                <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                {uContent}\n                <td\n                    className={'word-break--all' + descStyle}\n                >\n                    {auditInfo.desc}\n                </td>\n                {iContent}\n                {sContent}\n            </tr>\n        );\n    }\n\n    let userIdContent;\n    if (props.showUserId) {\n        userIdContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.userId'\n                    defaultMessage='User ID'\n                />\n            </th>\n        );\n    }\n\n    let ipContent;\n    if (props.showIp) {\n        ipContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.ip'\n                    defaultMessage='IP Address'\n                />\n            </th>\n        );\n    }\n\n    let sessionContent;\n    if (props.showSession) {\n        sessionContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.session'\n                    defaultMessage='Session ID'\n                />\n            </th>\n        );\n    }\n\n    return (\n        <table className='table'>\n            <thead>\n                <tr>\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.timestamp'\n                            defaultMessage='Timestamp'\n                        />\n                    </th>\n                    {userIdContent}\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.action'\n                            defaultMessage='Action'\n                        />\n                    </th>\n                    {ipContent}\n                    {sessionContent}\n                </tr>\n            </thead>\n            <tbody>\n                {accessList}\n            </tbody>\n        </table>\n    );\n}\n\nAuditTable.propTypes = {\n    intl: intlShape.isRequired,\n    audits: PropTypes.array.isRequired,\n    showUserId: PropTypes.bool,\n    showIp: PropTypes.bool,\n    showSession: PropTypes.bool,\n};\n\nexport default injectIntl(AuditTable);\n\nexport function formatAuditInfo(audit, formatMessage) {\n    const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n    let auditDesc = '';\n\n    if (actionURL.indexOf('/channels') === 0) {\n        const channelInfo = audit.extra_info.split(' ');\n        const channelNameField = channelInfo[0].split('=');\n\n        let channelURL = '';\n        let channelObj;\n        let channelName = '';\n        if (channelNameField.indexOf('name') >= 0) {\n            channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n            channelObj = ChannelStore.getByName(channelURL);\n            if (channelObj) {\n                channelName = channelObj.display_name;\n            } else {\n                channelName = channelURL;\n            }\n        }\n\n        switch (actionURL) {\n        case '/channels/create':\n            auditDesc = formatMessage(holders.channelCreated, {channelName});\n            break;\n        case '/channels/create_direct':\n            auditDesc = formatMessage(holders.establishedDM, {username: Utils.getDirectTeammate(channelObj.id).username});\n            break;\n        case '/channels/update':\n            auditDesc = formatMessage(holders.nameUpdated, {channelName});\n            break;\n        case '/channels/update_desc': // support the old path\n        case '/channels/update_header':\n            auditDesc = formatMessage(holders.headerUpdated, {channelName});\n            break;\n        default: {\n            let userIdField = [];\n            let userId = '';\n            let username = '';\n\n            if (channelInfo[1]) {\n                userIdField = channelInfo[1].split('=');\n\n                if (userIdField.indexOf('user_id') >= 0) {\n                    userId = userIdField[userIdField.indexOf('user_id') + 1];\n                    var profile = UserStore.getProfile(userId);\n                    if (profile) {\n                        username = profile.username;\n                    }\n                }\n            }\n\n            if (/\\/channels\\/[A-Za-z0-9]+\\/delete/.test(actionURL)) {\n                auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n            } else if (/\\/channels\\/[A-Za-z0-9]+\\/add/.test(actionURL)) {\n                auditDesc = formatMessage(holders.userAdded, {username, channelName});\n            } else if (/\\/channels\\/[A-Za-z0-9]+\\/remove/.test(actionURL)) {\n                auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n            }\n\n            break;\n        }\n        }\n    } else if (actionURL.indexOf('/oauth') === 0) {\n        const oauthInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/oauth/register': {\n            const clientIdField = oauthInfo[0].split('=');\n\n            if (clientIdField[0] === 'client_id') {\n                auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n            }\n\n            break;\n        }\n        case '/oauth/allow':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthAccess);\n            } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                auditDesc = formatMessage(holders.failedOAuthAccess);\n            }\n\n            break;\n        case '/oauth/access_token':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedOAuthToken);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthToken);\n            } else {\n                const oauthTokenFailure = oauthInfo[0].split('-');\n\n                if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                    auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                }\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/users') === 0) {\n        const userInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/users/login':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLogin);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullLogin);\n            } else if (userInfo[0] === 'authenticated') {\n                auditDesc = formatMessage(holders.authenticated);\n            } else if (userInfo[0]) {\n                auditDesc = formatMessage(holders.failedLogin);\n            }\n\n            break;\n        case '/users/revoke_session':\n            auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n            break;\n        case '/users/newimage':\n            auditDesc = formatMessage(holders.updatePicture);\n            break;\n        case '/users/update':\n            auditDesc = formatMessage(holders.updateGeneral);\n            break;\n        case '/users/newpassword':\n            if (userInfo[0] === 'attempted') {\n                auditDesc = formatMessage(holders.attemptedPassword);\n            } else if (userInfo[0] === 'completed') {\n                auditDesc = formatMessage(holders.successfullPassword);\n            } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                auditDesc = formatMessage(holders.failedPassword);\n            }\n\n            break;\n        case '/users/update_roles': {\n            const userRoles = userInfo[0].split('=')[1];\n\n            auditDesc = formatMessage(holders.updatedRol);\n            if (userRoles.trim()) {\n                auditDesc += userRoles;\n            } else {\n                auditDesc += formatMessage(holders.member);\n            }\n\n            break;\n        }\n        case '/users/update_active': {\n            const updateType = userInfo[0].split('=')[0];\n            const updateField = userInfo[0].split('=')[1];\n\n            /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n            if (updateType === 'active') {\n                if (updateField === 'true') {\n                    auditDesc = formatMessage(holders.accountActive);\n                } else if (updateField === 'false') {\n                    auditDesc = formatMessage(holders.accountInactive);\n                }\n\n                const actingUserInfo = userInfo[1].split('=');\n                if (actingUserInfo[0] === 'session_user') {\n                    const actingUser = UserStore.getProfile(actingUserInfo[1]);\n                    const user = UserStore.getCurrentUser();\n                    if (user && actingUser && (Utils.isSystemAdmin(user.roles))) {\n                        auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                    } else if (user && actingUser) {\n                        auditDesc += formatMessage(holders.byAdmin);\n                    }\n                }\n            } else if (updateType === 'session_id') {\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n            }\n\n            break;\n        }\n        case '/users/send_password_reset':\n            auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n            break;\n        case '/users/reset_password':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedReset);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullReset);\n            }\n\n            break;\n        case '/users/update_notify':\n            auditDesc = formatMessage(holders.updateGlobalNotifications);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/hooks') === 0) {\n        const webhookInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/hooks/incoming/create':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookCreate);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n            } else if (webhookInfo === 'fail - bad channel permissions') {\n                auditDesc = formatMessage(holders.failedWebhookCreate);\n            }\n\n            break;\n        case '/hooks/incoming/delete':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookDelete);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullWebhookDelete);\n            } else if (webhookInfo === 'fail - inappropriate conditions') {\n                auditDesc = formatMessage(holders.failedWebhookDelete);\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/license') === 0) {\n        const licenseInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/license/add':\n            if (licenseInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLicenseAdd);\n            } else if (licenseInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullLicenseAdd);\n            } else if (licenseInfo === 'failed - expired or non-started license') {\n                auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n            } else if (licenseInfo === 'failed - invalid license') {\n                auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n            }\n\n            break;\n        case '/license/remove':\n            auditDesc = formatMessage(holders.licenseRemoved);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n        auditDesc = Utils.toTitleCase(audit.extra_info);\n    } else {\n        switch (actionURL) {\n        case '/logout':\n            auditDesc = formatMessage(holders.logout);\n            break;\n        case '/verify_email':\n            auditDesc = formatMessage(holders.verified);\n            break;\n        default:\n            break;\n        }\n    }\n\n    /* If all else fails... */\n    if (!auditDesc) {\n        /* Currently not called anywhere */\n        if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n            auditDesc = formatMessage(holders.revokedAll);\n        } else {\n            let actionDesc = '';\n            if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                actionDesc = Utils.toTitleCase(actionDesc);\n            }\n\n            let extraInfoDesc = '';\n            if (audit.extra_info) {\n                extraInfoDesc = audit.extra_info;\n\n                if (extraInfoDesc.indexOf('=') !== -1) {\n                    extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                }\n            }\n            auditDesc = actionDesc + ' ' + extraInfoDesc;\n        }\n    }\n\n    const date = new Date(audit.create_at);\n    const auditInfo = {};\n    auditInfo.timestamp = (\n        <div>\n            <div>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n            </div>\n            <div>\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </div>\n        </div>\n    );\n    auditInfo.userId = audit.user_id;\n    auditInfo.desc = auditDesc;\n    auditInfo.ip = audit.ip_address;\n    auditInfo.sessionId = audit.session_id;\n\n    return auditInfo;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport UserStore from 'stores/user_store.jsx';\nimport * as utils from 'utils/utils.jsx';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport default class UserSettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {user: UserStore.getCurrentUser()};\n    }\n\n    componentDidMount() {\n        UserStore.addChangeListener(this.onListenerChange);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeChangeListener(this.onListenerChange);\n    }\n\n    onListenerChange = () => {\n        var user = UserStore.getCurrentUser();\n        if (!utils.areObjectsEqual(this.state.user, user)) {\n            this.setState({user});\n        }\n    }\n\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.state.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.state.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.state.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.state.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}\n\nUserSettings.propTypes = {\n    activeTab: PropTypes.string,\n    activeSection: PropTypes.string,\n    prevActiveSection: PropTypes.string,\n    updateSection: PropTypes.func,\n    updateTab: PropTypes.func,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    setEnforceFocus: PropTypes.func.isRequired,\n    setRequireConfirm: PropTypes.func.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n    const buildEnterpriseReady = config.BuildEnterpriseReady === 'true';\n    const isLicensed = license && license.IsLicensed === 'true';\n\n    return {\n        enablePreviewFeatures,\n        buildEnterpriseReady,\n        isLicensed,\n    };\n}\n\nexport default connect(mapStateToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {savePreferences} from 'actions/user_actions.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromStores();\n\n        this.prevSections = {\n            advancedCtrlSend: 'dummySectionName', // dummy value that should never match any section name\n            formatting: 'advancedCtrlSend',\n            join_leave: 'formatting',\n            advancedPreviewFeatures: 'join_leave',\n        };\n    }\n\n    getStateFromStores = () => {\n        const advancedSettings = PreferenceStore.getCategory(Constants.Preferences.CATEGORY_ADVANCED_SETTINGS);\n        const settings = {\n            send_on_ctrl_enter: PreferenceStore.get(\n                Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                'send_on_ctrl_enter',\n                'false'\n            ),\n            formatting: PreferenceStore.get(\n                Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                'formatting',\n                'true'\n            ),\n            join_leave: PreferenceStore.get(\n                Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                'join_leave',\n                'true'\n            ),\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const [name, value] of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[name] = value;\n\n                    if (value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = (settings) => {\n        const preferences = [];\n        const userId = UserStore.getCurrentId();\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n\n        savePreferences(\n            preferences,\n            () => {\n                this.handleUpdateSection('');\n            }\n        );\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromStores());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <div key='formattingSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled. Changing this setting requires the page to be refreshed.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                focused={this.props.prevActiveSection === this.prevSections.formatting}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderJoinLeaveSection = () => {\n        if (this.props.buildEnterpriseReady && this.props.isLicensed) {\n            if (this.props.activeSection === 'join_leave') {\n                return (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.joinLeaveTitle'\n                                defaultMessage='Enable Join/Leave Messages'\n                            />\n                        }\n                        inputs={[\n                            <div key='joinLeaveSetting'>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='joinLeaveOn'\n                                            type='radio'\n                                            name='join_leave'\n                                            checked={this.state.settings.join_leave !== 'false'}\n                                            onChange={this.updateSetting.bind(this, 'join_leave', 'true')}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.advance.on'\n                                            defaultMessage='On'\n                                        />\n                                    </label>\n                                    <br/>\n                                </div>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='joinLeaveOff'\n                                            type='radio'\n                                            name='join_leave'\n                                            checked={this.state.settings.join_leave === 'false'}\n                                            onChange={this.updateSetting.bind(this, 'join_leave', 'false')}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.advance.off'\n                                            defaultMessage='Off'\n                                        />\n                                    </label>\n                                    <br/>\n                                </div>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.joinLeaveDesc'\n                                        defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        setting={'join_leave'}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            return (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    describe={this.renderOnOffLabel(this.state.settings.join_leave)}\n                    focused={this.props.prevActiveSection === this.prevSections.join_leave}\n                    section={'join_leave'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <div key='ctrlSendSetting'>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={this.updateSetting.bind(this, 'send_on_ctrl_enter', 'true')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.on'\n                                defaultMessage='On'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={this.updateSetting.bind(this, 'send_on_ctrl_enter', 'false')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.sendDesc'\n                            defaultMessage='If enabled ENTER inserts a new line and CTRL+ENTER submits the message.'\n                        />\n                    </div>\n                </div>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'send_on_ctrl_enter'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    describe={this.renderOnOffLabel(this.state.settings.send_on_ctrl_enter)}\n                    focused={this.props.prevActiveSection === this.prevSections.advancedCtrlSend}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        const displayJoinLeaveSection = this.renderJoinLeaveSection();\n        let displayJoinLeaveSectionDivider = null;\n        if (displayJoinLeaveSection) {\n            displayJoinLeaveSectionDivider = <div className='divider-light'/>;\n            this.prevSections.advancedPreviewFeatures = 'join_leave';\n        } else {\n            this.prevSections.advancedPreviewFeatures = this.prevSections.join_leave;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview pre-release features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview pre-release features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        focused={this.props.prevActiveSection === this.prevSections.advancedPreviewFeatures}\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.back', 'Back Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    {displayJoinLeaveSectionDivider}\n                    {displayJoinLeaveSection}\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nAdvancedSettingsDisplay.propTypes = {\n    updateSection: PropTypes.func,\n    activeSection: PropTypes.string,\n    prevActiveSection: PropTypes.string,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    enablePreviewFeatures: PropTypes.bool,\n    buildEnterpriseReady: PropTypes.bool,\n    isLicensed: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport {deletePreferences, savePreferences} from 'actions/user_actions.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport ManageTimezones from './manage_timezones.jsx';\nimport ManageLanguages from './manage_languages.jsx';\nimport ThemeSetting from './user_settings_theme';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromStores(props) {\n    return {\n        militaryTime: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, props.configTeammateNameDisplay),\n        channelDisplayMode: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromStores(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    handleSubmit = () => {\n        const userId = UserStore.getCurrentId();\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [timePreference, channelDisplayModePreference, messageDisplayPreference, collapseDisplayPreference, linkPreviewDisplayPreference];\n        if (this.state.teammateNameDisplay === this.props.configTeammateNameDisplay) {\n            deletePreferences([teammateNameDisplayPreference]);\n        } else {\n            preferences.push(teammateNameDisplayPreference);\n        }\n\n        savePreferences(preferences, () => {\n            this.updateSection('');\n        });\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromStores(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n        } = props;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [\n                <div key={key}>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </div>,\n            ];\n\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === this.prevSections[section]}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: 'user.settings.display.collapseDisplay',\n                message: 'Default appearance of image previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: 'user.settings.display.collapseOn',\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: 'user.settings.display.collapseOff',\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: 'user.settings.display.collapseDesc',\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: 'user.settings.display.linkPreviewDisplay',\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: 'user.settings.display.linkPreviewOn',\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: 'user.settings.display.linkPreviewOff',\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: 'user.settings.display.linkPreviewDesc',\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: 'user.settings.display.clockDisplay',\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: 'user.settings.display.normalClock',\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: 'user.settings.display.militaryClock',\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: 'user.settings.display.preferTime',\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: 'user.settings.display.teammateNameDisplayTitle',\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: 'user.settings.display.teammateNameDisplayUsername',\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: 'user.settings.display.teammateNameDisplayNicknameFullname',\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: 'user.settings.display.teammateNameDisplayFullname',\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: 'user.settings.display.teammateNameDisplayDescription',\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: 'user.settings.display.messageDisplayTitle',\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: 'user.settings.display.messageDisplayClean',\n                    message: 'Standard',\n                    moreId: 'user.settings.display.messageDisplayCleanDes',\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: 'user.settings.display.messageDisplayCompact',\n                    message: 'Compact',\n                    moreId: 'user.settings.display.messageDisplayCompactDes',\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: 'user.settings.display.messageDisplayDescription',\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: 'user.settings.display.channelDisplayTitle',\n                message: 'Channel Display Mode',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: 'user.settings.display.fullScreen',\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: 'user.settings.display.fixedWidthCentered',\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: 'user.settings.display.channeldisplaymode',\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        focused={this.props.prevActiveSection === this.prevSections.languages}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.back', 'Back Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n\nUserSettingsDisplay.propTypes = {\n    user: PropTypes.object,\n    updateSection: PropTypes.func,\n    activeSection: PropTypes.string,\n    prevActiveSection: PropTypes.string,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    setRequireConfirm: PropTypes.func.isRequired,\n    setEnforceFocus: PropTypes.func.isRequired,\n    timezones: PropTypes.array.isRequired,\n    userTimezone: PropTypes.object.isRequired,\n    allowCustomThemes: PropTypes.bool,\n    enableLinkPreviews: PropTypes.bool,\n    defaultClientLocale: PropTypes.string,\n    enableThemeSelection: PropTypes.bool,\n    configTeammateNameDisplay: PropTypes.string,\n    currentUserTimezone: PropTypes.string,\n    enableTimezone: PropTypes.bool,\n    shouldAutoUpdateTimezone: PropTypes.bool,\n    actions: PropTypes.shape({\n        getSupportedTimezones: PropTypes.func.isRequired,\n        autoUpdateTimezone: PropTypes.func.isRequired,\n    }).isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport {updateUser} from 'actions/user_actions.jsx';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        updateUser(\n            updatedUser,\n            () => this.props.updateSection(''),\n            (err) => {\n                let serverError;\n                if (err.message) {\n                    serverError = err.message;\n                } else {\n                    serverError = err;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        );\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe padding-top'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nManageTimezones.propTypes = {\n    user: PropTypes.object.isRequired,\n    updateSection: PropTypes.func.isRequired,\n    useAutomaticTimezone: PropTypes.bool.isRequired,\n    automaticTimezone: PropTypes.string.isRequired,\n    manualTimezone: PropTypes.string.isRequired,\n    timezones: PropTypes.array.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport {ActionTypes} from 'utils/constants.jsx';\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(suggestionId, timezonePrefix) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(suggestionId, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(suggestionId, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(suggestionId) {\n        setTimeout(() => {\n            AppDispatcher.handleServerAction({\n                type: ActionTypes.SUGGESTION_RECEIVED_SUGGESTIONS,\n                id: suggestionId,\n                matchedPretext: '',\n                terms: getSupportedTimezones(),\n                items: getSupportedTimezones(),\n                component: TimezoneSuggestion,\n            });\n        }, 0);\n    }\n\n    async filterTimezones(suggestionId, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        setTimeout(() => {\n            AppDispatcher.handleServerAction({\n                type: ActionTypes.SUGGESTION_RECEIVED_SUGGESTIONS,\n                id: suggestionId,\n                matchedPretext: timezonePrefix,\n                terms: filteredTimezones,\n                items: filteredTimezones,\n                component: TimezoneSuggestion,\n            });\n        }, 0);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {updateUser} from 'actions/user_actions.jsx';\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\n\nexport default class ManageLanguage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            locale: props.locale,\n            isSaving: false,\n        };\n    }\n\n    setLanguage = (e) => {\n        this.setState({locale: e.target.value});\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        updateUser(\n            user,\n            () => {\n                GlobalActions.newLocalizationSelected(user.locale);\n            },\n            (err) => {\n                let serverError;\n                if (err.message) {\n                    serverError = err.message;\n                } else {\n                    serverError = err;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        );\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                <option\n                    key={lang.value}\n                    value={lang.value}\n                >\n                    {lang.name}\n                </option>\n            );\n        });\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <select\n                        id='displayLanguage'\n                        ref='language'\n                        className='form-control'\n                        value={this.state.locale}\n                        onChange={this.setLanguage}\n                    >\n                        {options}\n                    </select>\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedHTMLMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.<br /><br />Would like to help with translations? Join the <a href=\"http://translate.mattermost.com/\" target=\"_blank\">Mattermost Translation Server</a> to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nManageLanguage.propTypes = {\n    user: PropTypes.object.isRequired,\n    locale: PropTypes.string.isRequired,\n    updateSection: PropTypes.func.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as UserActions from 'actions/user_actions.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport {ActionTypes, Constants, Preferences} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromStores(),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        UserStore.addChangeListener(this.onChange);\n\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected && !nextProps.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        UserStore.removeChangeListener(this.onChange);\n\n        if (this.props.selected) {\n            const state = this.getStateFromStores();\n            Utils.applyTheme(state.theme);\n        }\n    }\n\n    getStateFromStores() {\n        const theme = PreferenceStore.getTheme();\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        // show the \"apply to all teams\" checkbox if the user is on more than one team\n        const showAllTeamsCheckbox = Object.keys(TeamStore.getAll()).length > 1;\n\n        // check the \"apply to all teams\" checkbox by default if the user has any team-specific themes\n        const applyToAllTeams = PreferenceStore.getCategory(Preferences.CATEGORY_THEME).size <= 1;\n\n        return {\n            teamId: TeamStore.getCurrentId(),\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox,\n            applyToAllTeams,\n        };\n    }\n\n    onChange = () => {\n        const newState = this.getStateFromStores();\n\n        if (!Utils.areObjectsEqual(this.state, newState)) {\n            this.setState(newState);\n        }\n\n        this.props.setEnforceFocus(true);\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.state.teamId;\n\n        this.setState({isSaving: true});\n\n        UserActions.saveTheme(\n            teamId,\n            this.state.theme,\n            () => {\n                this.props.setRequireConfirm(false);\n                this.originalTheme = Object.assign({}, this.state.theme);\n                this.scrollToTop();\n                this.props.updateSection('');\n                this.setState({isSaving: false});\n            }\n        );\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromStores();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='padding-top'\n                    >\n                        <a\n                            id='slackImportTheme'\n                            className='theme'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </a>\n                    </div>\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Popover} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: 'user.settings.custom_theme.sidebarBg',\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: 'user.settings.custom_theme.sidebarText',\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: 'user.settings.custom_theme.sidebarHeaderBg',\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: 'user.settings.custom_theme.sidebarHeaderTextColor',\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: 'user.settings.custom_theme.sidebarUnreadText',\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: 'user.settings.custom_theme.sidebarTextHoverBg',\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: 'user.settings.custom_theme.sidebarTextActiveBorder',\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: 'user.settings.custom_theme.sidebarTextActiveColor',\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: 'user.settings.custom_theme.onlineIndicator',\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: 'user.settings.custom_theme.awayIndicator',\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: 'user.settings.custom_theme.dndIndicator',\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: 'user.settings.custom_theme.mentionBj',\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: 'user.settings.custom_theme.mentionColor',\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: 'user.settings.custom_theme.centerChannelBg',\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: 'user.settings.custom_theme.centerChannelColor',\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: 'user.settings.custom_theme.newMessageSeparator',\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: 'user.settings.custom_theme.linkColor',\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: 'user.settings.custom_theme.buttonBg',\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: 'user.settings.custom_theme.buttonColor',\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: 'user.settings.custom_theme.errorTextColor',\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: 'user.settings.custom_theme.mentionHighlightBg',\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: 'user.settings.custom_theme.mentionHighlightLink',\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: 'user.settings.custom_theme.codeTheme',\n        defaultMessage: 'Code Theme',\n    },\n});\n\nclass CustomThemeChooser extends React.Component {\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = this.props.theme;\n        theme.codeTheme = e.target.value;\n        this.props.updateTheme(theme);\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        bsStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>{formatMessage(messages[element.id])}</label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                trigger={['hover', 'focus']}\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy and paste to share theme colors:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    value={this.state.copyTheme}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n            </div>\n        );\n\n        return (\n            <div className='appearance-section padding-top'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={localizeMessage('generic_icons.expand', 'Expand Icon')}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={localizeMessage('generic_icons.expand', 'Expand Icon')}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row form-group'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={localizeMessage('generic_icons.expand', 'Expand Icon')}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n\nCustomThemeChooser.propTypes = {\n    intl: intlShape.isRequired,\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(CustomThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.string.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport PropTypes from 'prop-types';\nimport {ChromePicker} from 'react-color';\n\nclass ColorInput extends React.Component {\n    static propTypes = {\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed. Takes hex format of color Ex: #ffeec0\n         */\n        onChange: PropTypes.func,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            idOpened: false,\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    checkClick = (e) => {\n        const colorPickerDOMNode = ReactDom.findDOMNode(this.colorPicker);\n        if (!colorPickerDOMNode || !colorPickerDOMNode.contains(e.target)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    togglePicker = () => {\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    handleChange = (newColorData) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    getColorPicker = (node) => {\n        this.colorPicker = node;\n    };\n\n    render() {\n        const {color} = this.props;\n        const {isOpened} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    className='form-control'\n                    type='text'\n                    value={color}\n                    readOnly={true}\n                />\n                <span\n                    className='input-group-addon'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.getColorPicker}\n                        className='color-popover'\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const positionAttributeSet = config.PositionAttributeSet === 'true';\n\n    return {\n        sendEmailNotifications,\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        positionAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedHTMLMessage, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {updateUser, uploadProfileImage} from 'actions/user_actions.jsx';\nimport ErrorStore from 'stores/error_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport SettingPicture from 'components/setting_picture.jsx';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: 'user.settings.general.usernameReserved',\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: 'user.settings.general.usernameRestrictions',\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: 'user.settings.general.validEmail',\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: 'user.settings.general.emailMatch',\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    checkEmail: {\n        id: 'user.settings.general.checkEmail',\n        defaultMessage: 'Check your email at {email} to verify the address.',\n    },\n    validImage: {\n        id: 'user.settings.general.validImage',\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: 'user.settings.general.imageTooLarge',\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: 'user.settings.general.uploadImage',\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: 'user.settings.general.mobile.uploadImage',\n        defaultMessage: 'Click to upload an image.',\n    },\n    fullName: {\n        id: 'user.settings.general.fullName',\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: 'user.settings.general.nickname',\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: 'user.settings.general.username',\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: 'user.settings.general.profilePicture',\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: 'user.settings.general.close',\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: 'user.settings.general.position',\n        defaultMessage: 'Position',\n    },\n});\n\nconst prevSections = {\n    name: 'dummySectionName', // dummy value that should never match any section name\n    username: 'name',\n    nickname: 'username',\n    position: 'nickname',\n    email: 'position',\n    picture: 'email',\n};\n\nconst ACCEPTED_PROFILE_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/bmp'];\n\nclass UserSettingsGeneralTab extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        prevActiveSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n        }).isRequired,\n        sendEmailNotifications: PropTypes.bool,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        positionAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !Utils.isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        this.setState({sectionIsSaving: true});\n\n        updateUser(\n            user,\n            () => {\n                this.updateSection('');\n                this.props.actions.getMe();\n                const verificationEnabled = this.props.sendEmailNotifications && this.props.requireEmailVerification && emailUpdated;\n\n                if (verificationEnabled) {\n                    ErrorStore.storeLastError({message: this.props.intl.formatMessage(holders.checkEmail, {email: user.email})});\n                    ErrorStore.emitChange();\n                    this.setState({emailChangeInProgress: true});\n                }\n            },\n            (err) => {\n                let serverError;\n                if (err.message) {\n                    serverError = err.message;\n                } else {\n                    serverError = err;\n                }\n                this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n            }\n        );\n    }\n\n    submitPicture = (e) => {\n        e.preventDefault();\n\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!ACCEPTED_PROFILE_IMAGE_TYPES.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        uploadProfileImage(\n            file,\n            () => {\n                this.updateSection('');\n                this.submitActive = false;\n            },\n            (err) => {\n                var state = this.setupInitialState(this.props);\n                state.serverError = err.message;\n                this.setState(state);\n            }\n        );\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        const emailChangeInProgress = this.state.emailChangeInProgress;\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {emailChangeInProgress, clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            pictureFile: null,\n            loadingPicture: false,\n            emailChangeInProgress: false,\n            sectionIsSaving: false,\n        };\n    }\n\n    createEmailSection() {\n        let emailSection;\n\n        if (this.props.activeSection === 'email') {\n            const emailEnabled = this.props.sendEmailNotifications;\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailEnabled) {\n                helpText = (\n                    <div className='setting-list__hint col-sm-12 text-danger'>\n                        <FormattedMessage\n                            id='user.settings.general.emailHelp2'\n                            defaultMessage='Email has been disabled by your System Administrator. No notification emails will be sent until it is enabled.'\n                        />\n                    </div>\n                );\n            } else if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            } else if (this.state.emailChangeInProgress) {\n                const newEmail = UserStore.getCurrentUser().email;\n                if (newEmail) {\n                    helpText = (\n                        <FormattedMessage\n                            id='user.settings.general.emailHelp4'\n                            defaultMessage='A verification email was sent to {email}.'\n                            values={{\n                                email: newEmail,\n                            }}\n                        />\n                    );\n                }\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    value={this.state.email}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    value={this.state.confirmEmail}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                if (this.state.emailChangeInProgress) {\n                    const newEmail = UserStore.getCurrentUser().email;\n                    if (newEmail) {\n                        describe = (\n                            <FormattedHTMLMessage\n                                id='user.settings.general.newAddress'\n                                defaultMessage='New Address: {email}<br />Check your email to verify the above address.'\n                                values={{\n                                    email: newEmail,\n                                }}\n                            />\n                        );\n                    } else {\n                        describe = (\n                            <FormattedMessage\n                                id='user.settings.general.checkEmailNoAddress'\n                                defaultMessage='Check your email to verify your new address'\n                            />\n                        );\n                    }\n                } else {\n                    describe = UserStore.getCurrentUser().email;\n                }\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.email}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                            />\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                value={this.state.lastName}\n                            />\n                        </div>\n                    </div>\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.name}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.nickname}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={UserStore.getCurrentUser().username}\n                    focused={this.props.prevActiveSection === prevSections.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.positionAttributeSet) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.position}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={this.submitPicture}\n                    src={Utils.imageURLForUser(user)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    focused={this.props.prevActiveSection === prevSections.picture}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\n    const enableEmailBatching = config.EnableEmailBatching === 'true';\n    const siteName = config.SiteName;\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendEmailNotifications,\n        enableEmailBatching,\n        siteName,\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {updateUserNotifyProps} from 'actions/user_actions.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport Constants, {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting.jsx';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromStores() {\n    const user = UserStore.getCurrentUser();\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nconst prevSections = {\n    desktop: 'dummySectionName', // dummy value that should never match any section name\n    email: 'desktop',\n    push: 'email',\n    keys: 'push',\n    comments: 'keys',\n};\n\nexport default class NotificationsTab extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromStores();\n    }\n\n    handleSubmit = (enableEmail = this.state.enableEmail) => {\n        const data = {};\n        data.user_id = this.props.user.id;\n        data.email = enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        updateUserNotifyProps(\n            data,\n            () => {\n                this.props.updateSection('');\n            },\n            (err) => {\n                this.setState({serverError: err.message, isSaving: false});\n            }\n        );\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.updateState();\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n            this.handleCancel();\n        }\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getNotificationsStateFromStores();\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    componentDidMount() {\n        UserStore.addChangeListener(this.onListenerChange);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeChangeListener(this.onListenerChange);\n    }\n\n    onListenerChange = () => {\n        this.updateState();\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n        this.refs.wrapper.focus();\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n        this.refs.wrapper.focus();\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n        this.refs.wrapper.focus();\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n        this.refs.wrapper.focus();\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <div>\n                            <hr/>\n                            <label>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </label>\n                            <br/>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </div>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div key='userNotificationLevelOption'>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.push_notification.send'\n                                defaultMessage='Send mobile push notifications'\n                            />\n                        </label>\n                        <br/>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='pushNotificationAllActivity'\n                                    type='radio'\n                                    name='pushNotificationLevel'\n                                    checked={pushActivityRadio[0]}\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.push_notification.allActivity'\n                                    defaultMessage='For all activity'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='pushNotificationMentions'\n                                    type='radio'\n                                    name='pushNotificationLevel'\n                                    checked={pushActivityRadio[1]}\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.push_notification.onlyMentions'\n                                    defaultMessage='For mentions and direct messages'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='pushNotificationNever'\n                                    type='radio'\n                                    name='pushNotificationLevel'\n                                    checked={pushActivityRadio[2]}\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <br/>\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.info'\n                                defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                            />\n                        </span>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-top'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                describe={describe}\n                focused={this.props.prevActiveSection === prevSections.push}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.keys}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <div key='userNotificationLevelOption'>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Mention any comments in a thread you participated in (This will include both mentions to your root post and any comments after you commented on a post)'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Mention any comments on your post'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage='No mentions for comments'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.comments}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.updateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.notifications.autoResponder'\n                                    defaultMessage='Automatic Direct Message Replies'\n                                />\n                            }\n                            width='medium'\n                            describe={describe}\n                            section={'auto-responder'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n        const enableEmail = this.state.enableEmail === 'true';\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.updateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                        focused={this.props.prevActiveSection === prevSections.desktop}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        enableEmail={enableEmail}\n                        emailInterval={Utils.getEmailInterval(this.props.enableEmailBatching, enableEmail)}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        focused={this.props.prevActiveSection === prevSections.email}\n                        sendEmailNotifications={this.props.sendEmailNotifications}\n                        enableEmailBatching={this.props.enableEmailBatching}\n                        siteName={this.props.siteName}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nNotificationsTab.propTypes = {\n    user: PropTypes.object,\n    updateSection: PropTypes.func,\n    activeSection: PropTypes.string,\n    prevActiveSection: PropTypes.string,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    sendEmailNotifications: PropTypes.bool,\n    enableEmailBatching: PropTypes.bool,\n    siteName: PropTypes.string,\n    sendPushNotifications: PropTypes.bool,\n    enableAutoResponder: PropTypes.bool,\n};\n\nNotificationsTab.defaultProps = {\n    user: null,\n    activeSection: '',\n    prevActiveSection: '',\n    activeTab: '',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <div>\n                        <hr/>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </label>\n                        <br/>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <br/>\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on IE11, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </span>\n                    </div>\n                );\n            } else {\n                soundSection = (\n                    <div>\n                        <hr/>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </label>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <label>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop'\n                        defaultMessage='Send desktop notifications'\n                    />\n                </label>\n                <br/>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='desktopNotificationAllActivity'\n                            type='radio'\n                            name='desktopNotificationLevel'\n                            checked={activityRadio[0]}\n                            data-key={'desktopActivity'}\n                            data-value={NotificationLevels.ALL}\n                            onChange={this.handleOnChange}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.allActivity'\n                            defaultMessage='For all activity'\n                        />\n                    </label>\n                    <br/>\n                </div>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='desktopNotificationMentions'\n                            type='radio'\n                            name='desktopNotificationLevel'\n                            checked={activityRadio[1]}\n                            data-key={'desktopActivity'}\n                            data-value={NotificationLevels.MENTION}\n                            onChange={this.handleOnChange}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.onlyMentions'\n                            defaultMessage='Only for mentions and direct messages'\n                        />\n                    </label>\n                    <br/>\n                </div>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='desktopNotificationNever'\n                            type='radio'\n                            name='desktopNotificationLevel'\n                            checked={activityRadio[2]}\n                            data-key={'desktopActivity'}\n                            data-value={NotificationLevels.NONE}\n                            onChange={this.handleOnChange}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.never'\n                            defaultMessage='Never'\n                        />\n                    </label>\n                </div>\n                <br/>\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.info'\n                        defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                    />\n                </span>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let describe = '';\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (Utils.hasSoundOptions() && this.props.sound !== 'false') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.mentionsSoundTimed'\n                        defaultMessage='For mentions and direct messages, with sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else if (Utils.hasSoundOptions() && this.props.sound === 'false') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.mentionsNoSoundTimed'\n                        defaultMessage='For mentions and direct messages, without sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.mentionsSoundHiddenTimed'\n                        defaultMessage='For mentions and direct messages, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else {\n            if (Utils.hasSoundOptions() && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.allSoundTimed'\n                        defaultMessage='For all activity, with sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else if (Utils.hasSoundOptions() && this.props.sound === 'false') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.allNoSoundTimed'\n                        defaultMessage='For all activity, without sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.allSoundHiddenTimed'\n                        defaultMessage='For all activity, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                describe={describe}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {savePreference} from 'actions/user_actions.jsx';\nimport {Preferences} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nexport default class EmailNotificationSetting extends React.Component {\n    static propTypes = {\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            enableEmail: props.enableEmail,\n            emailInterval: props.emailInterval,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.saving && (nextProps.enableEmail !== this.props.enableEmail || nextProps.emailInterval !== this.props.emailInterval)) {\n            this.setState({\n                enableEmail: nextProps.enableEmail,\n                emailInterval: nextProps.emailInterval,\n            });\n        }\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n        const emailInterval = parseInt(e.currentTarget.getAttribute('data-email-interval'), 10);\n        this.setState({\n            enableEmail,\n            emailInterval,\n        });\n    }\n\n    handleSubmit = () => {\n        const {enableEmail, emailInterval} = this.state;\n        if (this.props.enableEmail !== enableEmail || this.props.emailInterval !== emailInterval) {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            savePreference(Preferences.CATEGORY_NOTIFICATIONS, Preferences.EMAIL_INTERVAL, emailInterval.toString());\n\n            this.props.onSubmit(enableEmail);\n        } else {\n            this.props.updateSection('');\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                emailInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    render() {\n        if (!this.props.sendEmailNotifications && this.props.activeSection === 'email') {\n            const inputs = [];\n\n            inputs.push(\n                <div\n                    key='oauthEmailInfo'\n                    className='padding-top'\n                >\n                    <FormattedMessage\n                        id='user.settings.notifications.email.disabled_long'\n                        defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                    />\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    inputs={inputs}\n                    server_error={this.state.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        if (this.props.activeSection !== 'email') {\n            let description;\n\n            if (!this.props.sendEmailNotifications) {\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.disabled'\n                        defaultMessage='Email notifications are not enabled'\n                    />\n                );\n            } else if (this.props.enableEmail) {\n                switch (this.state.emailInterval) {\n                case Preferences.INTERVAL_IMMEDIATE:\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.immediately'\n                            defaultMessage='Immediately'\n                        />\n                    );\n                    break;\n                case Preferences.INTERVAL_HOUR:\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.everyHour'\n                            defaultMessage='Every hour'\n                        />\n                    );\n                    break;\n                default:\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.everyXMinutes'\n                            defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                            values={{count: this.state.emailInterval / 60}}\n                        />\n                    );\n                }\n            } else {\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n\n            return (\n                <SettingItemMin\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    describe={description}\n                    focused={this.props.focused}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={this.state.emailInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / 60}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={this.state.emailInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                inputs={[\n                    <div key='userNotificationEmailOptions'>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </label>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={this.state.emailInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={this.state.emailInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <br/>\n                        <div>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away from {siteName} for more than 5 minutes.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </div>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='padding-top'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div key='autoResponderHint'>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe} from 'mattermost-redux/actions/users';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const isLicensed = license && license.IsLicensed === 'true';\n    const mfaLicensed = license && license.MFA === 'true';\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableMultifactorAuthentication = config.EnableMultifactorAuthentication === 'true';\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        isLicensed,\n        mfaLicensed,\n        enableOAuthServiceProvider,\n        enableMultifactorAuthentication,\n        enforceMultifactorAuthentication,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {deactivateMfa, deauthorizeOAuthApp, getAuthorizedApps, updatePassword} from 'actions/user_actions.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not this instance of Mattermost is licensed.\n        isLicensed: PropTypes.bool,\n\n        // Whether or not this instance of Mattermost is licensed to use multi-factor authentication.\n        mfaLicensed: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not multi-factor authentication is enabled.\n        enableMultifactorAuthentication: PropTypes.bool,\n\n        // Whether or not multi-factor authentication is enforced.\n        enforceMultifactorAuthentication: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            getAuthorizedApps(\n                (authorizedApps) => {\n                    this.setState({authorizedApps, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n                },\n                (err) => {\n                    this.setState({serverError: err.message}); //eslint-disable-line react/no-did-mount-set-state\n                }\n            );\n        }\n    }\n\n    submitPassword = () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        updatePassword(\n            user.id,\n            currentPassword,\n            newPassword,\n            () => {\n                this.props.updateSection('');\n                this.props.actions.getMe();\n                this.setState(this.getDefaultState());\n            },\n            (err) => {\n                var state = this.getDefaultState();\n                if (err.message) {\n                    state.serverError = err.message;\n                } else {\n                    state.serverError = err;\n                }\n                state.passwordError = '';\n                this.setState(state);\n            }\n        );\n    }\n\n    setupMfa = (e) => {\n        e.preventDefault();\n        browserHistory.push('/mfa/setup');\n    }\n\n    removeMfa = () => {\n        deactivateMfa(\n            () => {\n                if (this.props.mfaLicensed &&\n                        this.props.enableMultifactorAuthentication &&\n                        this.props.enforceMultifactorAuthentication) {\n                    browserHistory.push('/mfa/setup');\n                    return;\n                }\n\n                this.props.updateSection('');\n                this.setState(this.getDefaultState());\n            },\n            (err) => {\n                const state = this.getDefaultState();\n                if (err.message) {\n                    state.serverError = err.message;\n                } else {\n                    state.serverError = err;\n                }\n                this.setState(state);\n            }\n        );\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = (e) => {\n        e.preventDefault();\n        const appId = e.currentTarget.getAttribute('data-app');\n        deauthorizeOAuthApp(\n            appId,\n            () => {\n                const authorizedApps = this.state.authorizedApps.filter((app) => {\n                    return app.id !== appId;\n                });\n\n                this.setState({authorizedApps, serverError: null});\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createMfaSection = () => {\n        if (this.props.activeSection === SECTION_MFA) {\n            let content;\n            let extraInfo;\n            if (this.props.user.mfa_active) {\n                let mfaRemoveHelp;\n                let mfaButtonText;\n\n                if (this.props.enforceMultifactorAuthentication) {\n                    mfaRemoveHelp = (\n                        <FormattedMessage\n                            id='user.settings.mfa.requiredHelp'\n                            defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                        />\n                    );\n\n                    mfaButtonText = (\n                        <FormattedMessage\n                            id='user.settings.mfa.reset'\n                            defaultMessage='Reset MFA on your account'\n                        />\n                    );\n                } else {\n                    mfaRemoveHelp = (\n                        <FormattedMessage\n                            id='user.settings.mfa.removeHelp'\n                            defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                        />\n                    );\n\n                    mfaButtonText = (\n                        <FormattedMessage\n                            id='user.settings.mfa.remove'\n                            defaultMessage='Remove MFA from your account'\n                        />\n                    );\n                }\n\n                content = (\n                    <div key='mfaQrCode'>\n                        <a\n                            className='btn btn-primary'\n                            href='#'\n                            onClick={this.removeMfa}\n                        >\n                            {mfaButtonText}\n                        </a>\n                        <br/>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        {mfaRemoveHelp}\n                    </span>\n                );\n            } else {\n                content = (\n                    <div key='mfaQrCode'>\n                        <a\n                            className='btn btn-primary'\n                            href='#'\n                            onClick={this.setupMfa}\n                        >\n                            <FormattedMessage\n                                id='user.settings.mfa.add'\n                                defaultMessage='Add MFA to your account'\n                            />\n                        </a>\n                        <br/>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.mfa.addHelp'\n                            defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n                        />\n                    </span>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div\n                    key='mfaSetting'\n                    className='padding-top'\n                >\n                    {content}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.mfa.title', 'Multi-factor Authentication')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='medium'\n                />\n            );\n        }\n\n        let describe;\n        if (this.props.user.mfa_active) {\n            describe = Utils.localizeMessage('user.settings.security.active', 'Active');\n        } else {\n            describe = Utils.localizeMessage('user.settings.security.inactive', 'Inactive');\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.mfa.title', 'Multi-factor Authentication')}\n                describe={describe}\n                section={SECTION_MFA}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n            const hours12 = !PreferenceStore.getBool(Constants.Preferences.CATEGORY_DISPLAY_SETTINGS, Constants.Preferences.USE_MILITARY_TIME, false);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={hours12}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='padding-bottom x2'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to using email and password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='padding-bottom x2 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='padding-bottom x2 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let mfaSection;\n        if (this.props.enableMultifactorAuthentication &&\n                this.props.isLicensed &&\n                (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE)) {\n            mfaSection = this.createMfaSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={Utils.localizeMessage('user.settings.security.close', 'Close')}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    {mfaSection}\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={Utils.localizeMessage('user.settings.security.viewHistory.icon', 'Access History Icon')}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link margin-top'\n                        dialogType={ActivityLogModal}\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={Utils.localizeMessage('user.settings.security.logoutActiveSessions.icon', 'Active Sessions Icon')}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Logout of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nSecurityTab.defaultProps = {\n    user: {},\n    activeSection: '',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getUserAudits} from 'mattermost-redux/actions/users';\n\nimport AccessHistoryModal from './access_history_modal.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        ...ownProps,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport UserStore from 'stores/user_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport AuditTable from 'components/audit_table.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class AccessHistoryModal extends React.Component {\n    static propTypes = {\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAudits: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.onAuditChange = this.onAuditChange.bind(this);\n        this.onShow = this.onShow.bind(this);\n        this.onHide = this.onHide.bind(this);\n\n        const state = this.getStateFromStoresForAudits();\n        state.moreInfo = [];\n        state.show = true;\n\n        this.state = state;\n    }\n\n    getStateFromStoresForAudits() {\n        return {\n            audits: UserStore.getAudits(),\n        };\n    }\n\n    onShow() {\n        this.props.actions.getUserAudits(UserStore.getCurrentId(), 0, 200);\n        if (!Utils.isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide() {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        UserStore.addAuditsChangeListener(this.onAuditChange);\n        this.onShow();\n    }\n\n    componentWillUnmount() {\n        UserStore.removeAuditsChangeListener(this.onAuditChange);\n    }\n\n    onAuditChange() {\n        const newState = this.getStateFromStoresForAudits();\n        if (!Utils.areObjectsEqual(newState.audits, this.state.audits)) {\n            this.setState(newState);\n        }\n    }\n\n    render() {\n        let content;\n        if (this.state.audits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.state.audits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    {content}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport UserStore from 'stores/user_store.jsx';\nimport {getMonthLong} from 'utils/i18n';\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class ActivityLogModal extends React.Component {\n    static propTypes = {\n        locale: PropTypes.string.isRequired,\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getSessions: PropTypes.func.isRequired,\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.submitRevoke = this.submitRevoke.bind(this);\n        this.onListenerChange = this.onListenerChange.bind(this);\n        this.handleMoreInfo = this.handleMoreInfo.bind(this);\n        this.onHide = this.onHide.bind(this);\n        this.onShow = this.onShow.bind(this);\n\n        const state = this.getStateFromStores();\n        state.moreInfo = [];\n        state.show = true;\n\n        this.state = state;\n    }\n\n    getStateFromStores() {\n        return {\n            sessions: UserStore.getSessions(),\n            clientError: null,\n        };\n    }\n\n    submitRevoke(altId, e) {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(UserStore.getCurrentId(), altId).then(() => {\n            this.props.actions.getSessions(UserStore.getCurrentId());\n        });\n    }\n\n    onShow() {\n        this.props.actions.getSessions(UserStore.getCurrentId());\n        if (!Utils.isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide() {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        UserStore.addSessionsChangeListener(this.onListenerChange);\n        this.onShow();\n    }\n\n    componentWillUnmount() {\n        UserStore.removeSessionsChangeListener(this.onListenerChange);\n    }\n\n    onListenerChange() {\n        const newState = this.getStateFromStores();\n        if (!Utils.areObjectsEqual(newState.sessions, this.state.sessions)) {\n            this.setState(newState);\n        }\n    }\n\n    handleMoreInfo(index) {\n        const newMoreInfo = this.state.moreInfo;\n        newMoreInfo[index] = true;\n        this.setState({moreInfo: newMoreInfo});\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = Utils.localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = 'activity_log_modal.iphoneNativeClassicApp';\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = 'activity_log_modal.iphoneNativeApp';\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = Utils.localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = 'activity_log_modal.androidNativeClassicApp';\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = 'activity_log_modal.androidNativeApp';\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const activityList = [];\n\n        for (let i = 0; i < this.state.sessions.length; i++) {\n            const currentSession = this.state.sessions[i];\n            const lastAccessTime = new Date(currentSession.last_activity_at);\n            const firstAccessTime = new Date(currentSession.create_at);\n            let devicePlatform = currentSession.props.platform;\n            let devicePicture = '';\n            let deviceTitle = '';\n\n            if (currentSession.props.type === 'UserAccessToken') {\n                continue;\n            }\n\n            if (currentSession.props.platform === 'Windows') {\n                devicePicture = 'fa fa-windows';\n                deviceTitle = Utils.localizeMessage('device_icons.windows', 'Windows Icon');\n            } else if (this.isMobileSession(currentSession)) {\n                const sessionInfo = this.mobileSessionInfo(currentSession);\n\n                devicePicture = sessionInfo.devicePicture;\n                devicePlatform = sessionInfo.devicePlatform;\n            } else if (currentSession.props.platform === 'Macintosh' ||\n                currentSession.props.platform === 'iPhone') {\n                devicePicture = 'fa fa-apple';\n                deviceTitle = Utils.localizeMessage('device_icons.apple', 'Apple Icon');\n            } else if (currentSession.props.platform === 'Linux') {\n                if (currentSession.props.os.indexOf('Android') >= 0) {\n                    devicePlatform = (\n                        <FormattedMessage\n                            id='activity_log_modal.android'\n                            defaultMessage='Android'\n                        />\n                    );\n                    devicePicture = 'fa fa-android';\n                    deviceTitle = Utils.localizeMessage('device_icons.android', 'Android Icon');\n                } else {\n                    devicePicture = 'fa fa-linux';\n                    deviceTitle = Utils.localizeMessage('device_icons.linux', 'Linux Icon');\n                }\n            } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = Utils.localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n\n            if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.desktop'\n                        defaultMessage='Native Desktop App'\n                    />\n                );\n            }\n\n            let moreInfo;\n            if (this.state.moreInfo[i]) {\n                moreInfo = (\n                    <div>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.firstTime'\n                                defaultMessage='First time active: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={firstAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(this.props.locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={firstAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.os'\n                                defaultMessage='OS: {os}'\n                                values={{\n                                    os: currentSession.props.os,\n                                }}\n                            />\n                        </div>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.browser'\n                                defaultMessage='Browser: {browser}'\n                                values={{\n                                    browser: currentSession.props.browser,\n                                }}\n                            />\n                        </div>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.sessionId'\n                                defaultMessage='Session ID: {id}'\n                                values={{\n                                    id: currentSession.id,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else {\n                moreInfo = (\n                    <a\n                        className='theme'\n                        href='#'\n                        onClick={this.handleMoreInfo.bind(this, i)}\n                    >\n                        <FormattedMessage\n                            id='activity_log.moreInfo'\n                            defaultMessage='More info'\n                        />\n                    </a>\n                );\n            }\n\n            activityList[i] = (\n                <div\n                    key={'activityLogEntryKey' + i}\n                    className='activity-log__table'\n                >\n                    <div className='activity-log__report'>\n                        <div className='report__platform'>\n                            <i\n                                className={devicePicture}\n                                title={deviceTitle}\n                            />{devicePlatform}\n                        </div>\n                        <div className='report__info'>\n                            <div>\n                                <FormattedMessage\n                                    id='activity_log.lastActivity'\n                                    defaultMessage='Last activity: {date}, {time}'\n                                    values={{\n                                        date: (\n                                            <FormattedDate\n                                                value={lastAccessTime}\n                                                day='2-digit'\n                                                month={getMonthLong(this.props.locale)}\n                                                year='numeric'\n                                            />\n                                        ),\n                                        time: (\n                                            <FormattedTime\n                                                value={lastAccessTime}\n                                                hour='2-digit'\n                                                minute='2-digit'\n                                            />\n                                        ),\n                                    }}\n                                />\n                            </div>\n                            {moreInfo}\n                        </div>\n                    </div>\n                    <div className='activity-log__action'>\n                        <button\n                            onClick={this.submitRevoke.bind(this, currentSession.id)}\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='activity_log.logout'\n                                defaultMessage='Logout'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n\n        let content;\n        if (this.state.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in to a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the System Admin. If you want to log out sooner, use the 'Logout' button below to end a session.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {isMobile} from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.active && this.props.active) {\n            this.setState({\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            });\n        }\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Have you copied your token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. <br /><br />Are you sure want to delete the {description} token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Deactivate'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Inactive)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Activate'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='margin-bottom margin-top x2'/>\n                </div>\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='<a href=\"https://about.mattermost.com/default-user-access-tokens\" target=\"_blank\">Personal access tokens</a> function similarly to session tokens and can be used by integrations to <a href=\"https://about.mattermost.com/default-api-authentication\" target=\"_blank\">authenticate against the REST API</a>. Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='<a href=\"https://about.mattermost.com/default-user-access-tokens\" target=\"_blank\">Personal access tokens</a> function similarly to session tokens and can be used by integrations to <a href=\"https://about.mattermost.com/default-api-authentication\" target=\"_blank\">authenticate against the REST API</a>.'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='padding-left x2'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label padding-right x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='padding-top x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error margin-top margin-bottom'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-default'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <i\n                        className='fa fa-warning margin-right'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create New Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='padding-top'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => {})} //eslint-disable-line no-empty-function\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {GroupUnreadChannels} from 'utils/constants.jsx';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        closeUnusedDirectMessages: getPreference(\n            state,\n            Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            'close_unused_direct_messages',\n            'after_seven_days'\n        ),\n        displayUnreadSection: getPreference(\n            state,\n            Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            'show_unread_section',\n            (config.ExperimentalGroupUnreadChannels === GroupUnreadChannels.DEFAULT_ON).toString()\n        ),\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        showUnreadOption: config.ExperimentalGroupUnreadChannels !== GroupUnreadChannels.DISABLED,\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * The preferences to show the unread channels section in the sidebar\n         */\n        displayUnreadSection: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         */\n        showUnreadOption: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromStores();\n    }\n\n    getStateFromStores = () => {\n        const {closeUnusedDirectMessages, displayUnreadSection} = this.props;\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                show_unread_section: displayUnreadSection,\n            },\n            isSaving: false,\n        };\n    };\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        preferences.push({\n            user_id: user.id,\n            category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: setting,\n            value: this.state.settings[setting],\n        });\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    updateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromStores());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        if (this.props.activeSection === 'autoCloseDM') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <div key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.autoCloseDMTitle'\n                        defaultMessage='Automatically Close Direct Messages'\n                    />\n                }\n                describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                section={'autoCloseDM'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    renderUnreadLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.showUnreadSection'\n                    defaultMessage='At the top of the channel sidebar'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderUnreadSection = () => {\n        if (this.props.activeSection === 'unreadChannels') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadSectionTitle'\n                            defaultMessage='Group unread channels'\n                        />\n                    }\n                    inputs={[\n                        <div key='unreadSectionSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadSectionEnabled'\n                                        type='radio'\n                                        name='unreadChannels'\n                                        checked={this.state.settings.show_unread_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'show_unread_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.showUnreadSection'\n                                        defaultMessage='At the top of the channel sidebar'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadSectionNever'\n                                        type='radio'\n                                        name='unreadChannels'\n                                        checked={this.state.settings.show_unread_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'show_unread_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.unreadSectionDesc'\n                                    defaultMessage='Unread channels will be sorted at the top of the channel sidebar until read.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'show_unread_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.unreadSectionTitle'\n                        defaultMessage='Group unread channels'\n                    />\n                }\n                describe={this.renderUnreadLabel(this.state.settings.show_unread_section)}\n                section={'unreadChannels'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showUnreadOption} = this.props;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const unreadSection = showUnreadOption ? this.renderUnreadSection() : null;\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {unreadSection}\n                    {showUnreadOption && <div className='divider-light'/>}\n                    {autoCloseDMSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}