{"version":3,"sources":["webpack:///./components/admin_console/jobs/index.jsx","webpack:///./utils/policy_roles_adapter.js","webpack:///./components/admin_console/blockable_link/index.js","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./components/audit_table.jsx","webpack:///./components/admin_console/request_button/request_button.jsx","webpack:///./components/formatted_markdown_message.jsx","webpack:///./components/admin_console/set_by_env.jsx","webpack:///./components/admin_console/generated_setting.jsx","webpack:///./components/admin_console/admin_definition_constants.jsx","webpack:///./components/admin_console/radio_setting.jsx","webpack:///./components/admin_console/banner.jsx","webpack:///./components/admin_console/schema_admin_settings.jsx","webpack:///./components/analytics/line_chart.jsx","webpack:///./components/analytics/statistic_count.jsx","webpack:///./components/analytics/format.jsx","webpack:///./components/svg/accordion_toggle_icon.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_tree.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_checkbox.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_description.jsx","webpack:///./components/team_info.jsx","webpack:///./components/admin_console/index.js","webpack:///./components/admin_console/admin_console.jsx","webpack:///./components/admin_console/client_versions_settings.jsx","webpack:///./components/admin_console/cluster_settings.jsx","webpack:///./components/admin_console/cluster_table_container.jsx","webpack:///./components/admin_console/cluster_table.jsx","webpack:///./images/status_green.png","webpack:///./images/status_yellow.png","webpack:///./components/admin_console/custom_brand_settings.jsx","webpack:///./components/admin_console/brand_image_setting/brand_image_setting.jsx","webpack:///./components/admin_console/brand_image_setting/upload_button.jsx","webpack:///./components/admin_console/custom_emoji_settings.jsx","webpack:///./components/admin_console/custom_gif_settings.jsx","webpack:///./components/admin_console/data_retention_settings.jsx","webpack:///./components/admin_console/jobs/table.jsx","webpack:///./actions/job_actions.jsx","webpack:///./components/admin_console/database_settings.jsx","webpack:///./components/admin_console/elasticsearch_settings.jsx","webpack:///./components/admin_console/email_settings.jsx","webpack:///./components/admin_console/email_connection_test/index.js","webpack:///./components/admin_console/email_connection_test/email_connection_test.jsx","webpack:///./components/admin_console/connection_security_dropdown_setting.jsx","webpack:///./components/admin_console/gitlab_settings.jsx","webpack:///./components/admin_console/message_export_settings.jsx","webpack:///./components/admin_console/oauth_settings.jsx","webpack:///./components/admin_console/password_settings.jsx","webpack:///./components/admin_console/plugin_management/index.js","webpack:///./components/admin_console/plugin_management/plugin_management.jsx","webpack:///./components/admin_console/custom_plugin_settings/index.js","webpack:///./components/admin_console/custom_plugin_settings/custom_plugin_settings.jsx","webpack:///./components/admin_console/multiselect_settings.jsx","webpack:///./components/admin_console/color_setting.jsx","webpack:///./components/admin_console/user_autocomplete_setting.jsx","webpack:///./components/admin_console/custom_integrations_settings/index.jsx","webpack:///./components/admin_console/custom_integrations_settings/custom_integrations_settings.jsx","webpack:///./components/admin_console/users_and_teams_settings/index.jsx","webpack:///./components/admin_console/users_and_teams_settings/users_and_teams_settings.jsx","webpack:///./components/admin_console/push_settings.jsx","webpack:///./components/admin_console/saml_settings.jsx","webpack:///./components/admin_console/file_upload_setting.jsx","webpack:///./components/admin_console/remove_file_setting.jsx","webpack:///./components/admin_console/session_settings.jsx","webpack:///./components/discard_changes_modal.jsx","webpack:///./components/admin_console/admin_sidebar/index.js","webpack:///./components/admin_console/admin_sidebar/admin_sidebar.jsx","webpack:///./components/admin_console/admin_sidebar_category.jsx","webpack:///./components/admin_console/admin_sidebar_header.jsx","webpack:///./components/admin_console/admin_navbar_dropdown/index.js","webpack:///./components/admin_console/admin_navbar_dropdown/admin_navbar_dropdown.jsx","webpack:///./components/admin_console/blockable_link/blockable_link.jsx","webpack:///./components/admin_console/admin_sidebar_section.jsx","webpack:///./components/admin_console/admin_definition.jsx","webpack:///./components/analytics/system_analytics/index.js","webpack:///./components/analytics/system_analytics/system_analytics.jsx","webpack:///./components/analytics/doughnut_chart.jsx","webpack:///./components/analytics/team_analytics/index.js","webpack:///./components/analytics/team_analytics/team_analytics.jsx","webpack:///./components/analytics/table_chart.jsx","webpack:///./components/admin_console/audits/index.js","webpack:///./components/admin_console/audits/audits.jsx","webpack:///./components/admin_console/compliance_reports/index.js","webpack:///./components/admin_console/compliance_reports/compliance_reports.jsx","webpack:///./components/admin_console/custom_url_schemes_setting.jsx","webpack:///./components/admin_console/license_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_schemes_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_scheme_summary/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_scheme_summary/permissions_scheme_summary.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/permission_system_scheme_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_group.jsx","webpack:///./components/svg/checkbox_checked_icon.jsx","webpack:///./components/svg/checkbox_partial_icon.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_row.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/edit_post_time_limit_button.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/edit_post_time_limit_modal.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/permission_team_scheme_settings.jsx","webpack:///./components/team_selector_modal/index.js","webpack:///./components/team_selector_modal/team_selector_modal.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/team_in_list.jsx","webpack:///./components/admin_console/system_users/index.js","webpack:///./components/admin_console/system_users/system_users.jsx","webpack:///./components/admin_console/system_users/list/index.js","webpack:///./components/admin_console/system_users/list/system_users_list.jsx","webpack:///./components/admin_console/manage_roles_modal/index.js","webpack:///./components/admin_console/manage_roles_modal/manage_roles_modal.jsx","webpack:///./components/admin_console/manage_teams_modal/manage_teams_modal.jsx","webpack:///./components/admin_console/manage_teams_modal/manage_teams_dropdown.jsx","webpack:///./components/admin_console/manage_teams_modal/remove_from_team_button.jsx","webpack:///./components/admin_console/manage_tokens_modal/index.js","webpack:///./components/admin_console/manage_tokens_modal/manage_tokens_modal.jsx","webpack:///./components/admin_console/revoke_token_button/index.js","webpack:///./components/admin_console/revoke_token_button/revoke_token_button.jsx","webpack:///./components/admin_console/reset_password_modal/index.js","webpack:///./components/admin_console/reset_password_modal/reset_password_modal.jsx","webpack:///./components/admin_console/reset_email_modal/reset_email_modal.jsx","webpack:///./components/user_list_row_with_error.jsx","webpack:///./components/admin_console/system_users/system_users_dropdown.jsx","webpack:///./components/admin_console/system_users/list/selectors.jsx","webpack:///./components/admin_console/server_logs/index.js","webpack:///./components/admin_console/server_logs/logs.jsx","webpack:///./components/admin_console/server_logs/log_list.jsx","webpack:///./components/admin_console/admin_settings.jsx","webpack:///./components/admin_console/settings_group.jsx","webpack:///./components/admin_console/text_setting.jsx","webpack:///./components/admin_console/boolean_setting.jsx","webpack:///./components/admin_console/setting.jsx","webpack:///./components/admin_console/dropdown_setting.jsx"],"names":["_reactRedux","__webpack_require__","_redux","_jobs","Selectors","connect","state","ownProps","_extends3","default","jobs","makeGetJobsByType","jobType","dispatch","actions","bindActionCreators","getJobsByType","Table","rolesFromMapping","mappingValues","roles","rolesClone","JSON","parse","_stringify2","pertinentRoleNames","roleNames","_values2","MAPPING","forEach","v1","v2","names","map","item","roleName","concat","_toConsumableArray3","_set2","roleNamesInMapping","_keys2","key","includes","purgeNonPertinentRoles","mappingKey","value","roleRules","Error","role","shouldHave","permission","permissions","push","addPermissionToRole","permissionIndex","indexOf","splice","removePermissionFromRole","mutateRolesBasedOnMapping","_entries2","_ref","_ref2","_slicedToArray3","roleClone","originalPermissionSet","newPermissionSet","difference","filter","x","has","size","length","mappingValueFromRoles","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","_getIterator3","mappingPartIterator","next","done","o","allConditionsAreMet","err","return","_index","enableTeamCreation","true","Permissions","CREATE_TEAM","false","enableOnlyAdminIntegrations","MANAGE_WEBHOOKS","MANAGE_SLASH_COMMANDS","MANAGE_OAUTH","mappingPart","hasUnmetCondition","_regenerator2","wrap","_context","prev","t0","keys","t1","hasOwnProperty","some","stop","_marked","this","_admin_actions","_admin","blocked","getNavigationBlocked","deferNavigation","BlockableLink","./af","./af.js","./ar","./ar-dz","./ar-dz.js","./ar-kw","./ar-kw.js","./ar-ly","./ar-ly.js","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bm","./bm.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de-ch","./de-ch.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-il","./en-il.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es-us","./es-us.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./gom-latn","./gom-latn.js","./gu","./gu.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./kn","./kn.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mi","./mi.js","./mk","./mk.js","./ml","./ml.js","./mn","./mn.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./mt","./mt.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl-be","./nl-be.js","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./sd","./sd.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./tet","./tet.js","./tg","./tg.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./ug-cn","./ug-cn.js","./uk","./uk.js","./ur","./ur.js","./uz","./uz-latn","./uz-latn.js","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./yo","./yo.js","./zh-cn","./zh-cn.js","./zh-hk","./zh-hk.js","./zh-tw","./zh-tw.js","webpackContext","req","id","webpackContextResolve","e","code","Object","resolve","module","exports","formatAuditInfo","_reactIntl","Utils","holders","defineMessages","sessionRevoked","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","props","accessList","formatMessage","intl","i","audits","audit","auditInfo","uContent","showUserId","profile","UserStore","getProfile","userId","_react2","createElement","className","email","iContent","showIp","ip","sContent","showSession","sessionId","descStyle","desc","toLowerCase","timestamp","userIdContent","FormattedMessage","ipContent","sessionContent","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelURL","channelObj","channelName","ChannelStore","getByName","display_name","username","getDirectTeammate","userIdField","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","getCurrentUser","isSystemAdmin","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","FormattedDate","day","month","year","FormattedTime","hour","minute","user_id","ip_address","session_id","propTypes","intlShape","isRequired","PropTypes","array","bool","injectIntl","RequestButton","_classCallCheck3","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","handleRequest","bind","busy","fail","success","_this2","preventDefault","setState","doRequest","requestAction","errMsg","message","includeDetailedError","detailed_error","saveNeeded","saveConfigAction","title","localizeMessage","errorMessage","values","error","showSuccessMessage","successMessage","contents","loadingText","buttonText","widgetClassNames","label","onClick","disabled","alternativeActionElement","helpText","React","Component","func","element","string","shape","defaultProps","CustomRenderer","href","text","marked","Renderer","FormattedMarkdownMessage","origMsg","markedUpMessage","_marked2","breaks","sanitize","renderer","dangerouslySetInnerHTML","__html","object","PureComponent","GeneratedSetting","regenerate","node","placeholder","onChange","setByEnv","disabledText","regenerateText","regenerateHelpText","crypto","randomBytes","toString","htmlFor","type","_set_by_env2","SECTION_NONE","SECTION_TLS","SECTION_STARTTLS","CONNECTION_SECURITY_HELP_TEXT_EMAIL","cellPadding","CONNECTION_SECURITY_HELP_TEXT_LDAP","CONNECTION_SECURITY_HELP_TEXT_WEBSERVER","WEBSERVER_MODE_HELP_TEXT","LOG_LEVEL_OPTIONS","display_name_default","RadioSetting","handleChange","target","options","name","checked","_setting2","inputId","Banner","description","I18n","_constants","_text_formatting","SchemaAdminSettings","_this$buildSettingFun","renderTitle","schema","translate","renderBanner","setting","label_html","FormattedHTMLMessage","label_values","label_default","renderHelpText","help_text","isHTML","helpTextValues","helpTextDefault","disabled_help_text","isDisabled","disabled_help_text_html","disabled_help_text_values","disabled_help_text_default","help_text_html","help_text_values","help_text_default","renderLabel","config","license","isHidden","buildButtonSetting","_request_button2","loading","loading_default","Boolean","success_message","error_message","error_message_default","success_message_default","buildTextSetting","inputType","SettingsTypes","TYPE_NUMBER","_text_setting2","placeholder_default","isSetByEnv","buildColorSetting","_color_setting2","buildBoolSetting","_boolean_setting2","buildDropdownSetting","_dropdown_setting2","buildLanguageSetting","locales","getAllLanguages","l","order","sort","a","b","multiple","noResultText","no_result","no_result_default","notPresent","not_present","not_present_default","_multiselect_settings2","selected","changedId","join","buildRadioSetting","_radio_setting2","buildBannerSetting","banner_type","buildGeneratedSetting","_generated_setting2","regenerate_help_text","handleGeneratedChange","s","buildUsernameSetting","_user_autocomplete_setting2","buildJobsTableSetting","_jobs2","job_type","getExtraInfoText","render_job","createJobButtonText","createJobHelpText","buildCustomSetting","CustomComponent","component","renderSettings","_loading_screen2","settingsList","settings","buildSettingFunctions","isPlugin","header","formatText","mentionHighlight","footer","_settings_group2","render","AdminSettings","prototype","_defineProperty3","TYPE_TEXT","TYPE_COLOR","TYPE_BOOL","TYPE_DROPDOWN","TYPE_RADIO","TYPE_BANNER","TYPE_GENERATED","TYPE_USERNAME","TYPE_BUTTON","TYPE_LANGUAGE","TYPE_JOBSTABLE","TYPE_CUSTOM","nextProps","getStateFromConfig","getSettingValue","onConfigSave","setConfigValue","_this3","arguments","getConfigValue","onConfigLoad","LineChart","chart","chartOptions","legend","display","initChart","update","refs","canvas","ctx","ReactDOM","findDOMNode","getContext","Chart","data","willHaveData","labels","hasChart","destroy","prevProps","areObjectsEqual","hasData","content","ref","width","height","number","StatisticCount","icon","isNaN","count","formatChannelDoughtnutData","totalPublic","totalPrivate","datasets","backgroundColor","hoverBackgroundColor","formatPostDoughtnutData","filePosts","hashtagPosts","totalPosts","formatPostsPerDayData","chartData","fillColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","index","row","formatUsersWithPostsPerDayData","AccordionToggleIcon","viewBox","stroke","strokeWidth","fill","fillRule","transform","d","cx","cy","r","GROUPS","combined","PermissionsTree","onClickEditPostTimeLimitButton","editTimeLimitModalIsVisible","toggleGroup","ids","readOnly","onToggle","_permission_group2","uniqId","selectRow","additionalValues","ADDITIONAL_VALUES","parentRole","scope","root","_edit_post_time_limit_modal2","onClose","show","edit_post","editTimeLimitButton","_edit_post_time_limit_button2","PermissionCheckbox","extraClass","_checkbox_checked_icon2","_checkbox_partial_icon2","_reactBootstrap","_utils","PermissionDescription","closeTooltip","open","openTooltip","elm","currentTarget","querySelector","isElipsis","offsetWidth","scrollWidth","parentPermissionClicked","isInheritLink","parentElement","stopPropagation","generateId","_props","inherited","rowType","tooltip","Overlay","delayShow","Constants","OVERLAY_TIME_DELAY","placement","Tooltip","onMouseOver","onMouseOut","TeamInList","team","teamIconUrl","imageURLForTeam","style","backgroundImage","_reactRouterDom","_general","_users","_admin3","withRouter","getConfig","environmentConfig","getEnvironmentConfig","getLicense","navigationBlocked","showNavigationPrompt","isCurrentUserSystemAdmin","setNavigationBlocked","cancelNavigation","confirmNavigation","AdminConsole","_global_actions","SCRoute","extraProps","rest","_objectWithoutProperties3","Route","reloadIfServerVersionChanged","_props$actions","Redirect","to","constructor","_announcement_bar2","discardChangesModal","_discard_changes_modal2","onConfirm","onCancel","_system_notice2","_admin_sidebar2","Switch","path","match","AdminDefinition","reporting","system_analytics","general","configuration","localization","UsersAndTeamsSettings","privacy","compliance","logging","schemes","systemScheme","teamScheme","authentication","GitLabSettings","OAuthSettings","ldap","SamlSettings","mfa","security","signup","PasswordSettings","public_links","SessionSettings","connections","ClientVersionsSettings","EmailSettings","PushSettings","CustomIntegrationSettings","integrations","webrtc","external","plugins","PluginManagement","CustomPluginSettings","files","storage","CustomBrandSettings","customization","announcement","CustomEmojiSettings","CustomGifSettings","posts","legal_and_support","native_app_links","DataRetentionSettings","MessageExportSettings","advanced","rate","DatabaseSettings","ElasticsearchSettings","developer","ClusterSettings","metrics","system_users","team_analytics","other","server_logs","getConfigFromState","ClientRequirements","AndroidLatestVersion","androidLatestVersion","AndroidMinVersion","androidMinVersion","DesktopLatestVersion","desktopLatestVersion","DesktopMinVersion","desktopMinVersion","IosLatestVersion","iosLatestVersion","IosMinVersion","iosMinVersion","_client","overrideHandleChange","Enable","ClusterName","OverrideHostname","UseIpAddress","UseExperimentalGossip","ReadOnlyConfig","GossipPort","parseIntNonZero","StreamingPort","showWarning","IsLicensed","Cluster","configLoadedFromCluster","Client4","clusterId","warning","clusterTableContainer","_cluster_table_container2","marginBottom","ClusterTableContainer","load","reload","interval","clusterInfos","getClusterStatus","setInterval","clearInterval","_cluster_table2","ClusterTable","versionMismatch","src","statusGreen","configMismatch","version","configHash","singleItem","config_hash","clusterInfo","statusYellow","items","status","hostname","ipaddress","clusterCell","clusterTable","margin","whiteSpace","p","TeamSettings","SiteName","siteName","CustomDescriptionText","customDescriptionText","EnableCustomBrand","enableCustomBrand","CustomBrandText","customBrandText","maxLength","MAX_SITENAME_LENGTH","_brand_image_setting2","BrandImageSetting","handleImageChange","handleImageSubmit","brandImage","brandImageExists","brandImageTimestamp","now","UploadStatuses","DEFAULT","fetch","getBrandImageUrl","then","resp","image","reader","FileReader","img","onload","_jquery2","attr","result","readAsDataURL","fileInput","prop","LOADING","uploadBrandImage","COMPLETE","btnPrimaryClass","letbtnDefaultClass","accept","_upload_button2","primaryClass","_form_error2","UploadButton","buttonIcon","ServiceSettings","EnableCustomEmoji","enableCustomEmoji","EnableEmojiPicker","enableEmojiPicker","EnableGifPicker","enableGifPicker","GfycatApiKey","gfycatApiKey","GfycatApiSecret","gfycatApiSecret","handleSubmit","showConfirmModal","handleSaveConfirmed","doSubmit","handleSaveCanceled","renderConfirmModal","EnableMessageDeletion","enableMessageDeletion","EnableFileDeletion","enableFileDeletion","MessageRetentionDays","parseInt","messageRetentionDays","FileRetentionDays","fileRetentionDays","DeletionJobStartTime","deletionJobStartTime","String","messageList","days","confirmButton","_confirm_modal2","confirmButtonText","enableMessageDeletionOptions","enableFileDeletionOptions","messageRetentionDaysSetting","fileRetentionDaysSetting","confirmModal","documentationLink","rel","JobTypes","DATA_RETENTION","_job_actions","JobTable","getStatus","job","JobStatuses","PENDING","IN_PROGRESS","SUCCESS","ERROR","CANCEL_REQUESTED","CANCELED","getRunLength","millis","last_activity_at","start_at","runningMillis","lastActivity","formatDate","formatTime","second","seconds","Math","round","minutes","getFinishAt","handleCancelJob","jobId","getAttribute","cancelJob","ErrorStore","storeLastError","emitChange","handleCreateJob","createJob","getCancelButton","cancelButton","data-job-id","colSpan","arrayOf","JobsActions","_callee","getState","sent","server_error_id","_callee2","_ref4","_context2","store","SqlSettings","MaxIdleConns","maxIdleConns","MaxOpenConns","maxOpenConns","AtRestEncryptKey","atRestEncryptKey","Trace","trace","QueryTimeout","queryTimeout","ConnMaxLifetimeMilliseconds","parseIntNonNegative","connMaxLifetimeMilliseconds","driverName","DriverName","dataSource","DataSource","recycleDbButton","recycleDatabaseConnection","featureName","reloadConfiguration","doTestConfig","handleSaved","ConnectionUrl","connectionUrl","Username","Password","password","Sniff","sniff","EnableIndexing","enableIndexing","EnableSearching","enableSearching","configTested","canSave","canPurgeAndIndex","_get3","elasticsearchTest","percent","Number","progress","ELASTICSEARCH_POST_INDEXING","getExtraInfo","elasticsearchPurgeIndexes","_connection_security_dropdown_setting","SendEmailNotifications","sendEmailNotifications","EnablePreviewModeBanner","enablePreviewModeBanner","FeedbackName","feedbackName","FeedbackEmail","feedbackEmail","FeedbackOrganization","feedbackOrganization","EnableSMTPAuth","enableSMTPAuth","SMTPUsername","smtpUsername","SMTPPassword","smtpPassword","SMTPServer","smtpServer","SMTPPort","smtpPort","ConnectionSecurity","connectionSecurity","EnableEmailBatching","enableEmailBatching","EnableSecurityFixAlert","enableSecurityFixAlert","SkipServerCertificateVerification","skipServerCertificateVerification","EmailNotificationContentsType","emailNotificationContentsType","newConfig","clearError","ErrorBarTypes","PREVIEW_MODE","enableEmailBatchingDisabledText","SiteURL","emailNotificationContentsTypeDropdown","emailNotificationContentsHelpText","EmailNotificationContents","emailNotificationContentsTypes","ConnectionSecurityDropdownSettingEmail","_email_connection_test2","testEmail","EmailConnectionTestButton","handleTestConnection","testing","testMessage","_admin_definition_constants","isGitLabURLSetByEnv","updateGitLabUrl","enable","Id","Secret","secret","UserApiEndpoint","userApiEndpoint","AuthEndpoint","authEndpoint","TokenEndpoint","tokenEndpoint","gitLabUrl","trimmedValue","endsWith","slice","exportFormats","EnableExport","enableComplianceExport","ExportFormat","exportFormat","DailyRunTime","exportJobStartTime","GlobalRelaySettings","CustomerType","globalRelayCustomerType","SmtpUsername","globalRelaySmtpUsername","SmtpPassword","globalRelaySmtpPassword","EmailAddress","globalRelayEmailAddress","exportFormatOptions","globalRelaySettings","globalRelayEmail","dropdownHelpText","MESSAGE_EXPORT","renderOffice365","renderGoogle","renderGitLab","changeType","GoogleSettings","Office365Settings","oauthType","GITLAB_SERVICE","GOOGLE_SERVICE","Scope","OFFICE365_SERVICE","oauthTypes","GoogleOAuth","Office365OAuth","getSampleErrorMsg","handlePasswordLengthChange","handleCheckboxChange","_assign2","passwordMinimumLength","MinimumLength","passwordLowercase","Lowercase","passwordNumber","passwordUppercase","Uppercase","passwordSymbol","Symbol","maximumLoginAttempts","MaximumLoginAttempts","sampleErrorMsgId","sampleErrorMsg","min","MIN_PASSWORD_LENGTH","max","MAX_PASSWORD_LENGTH","lowercase","uppercase","symbol","minLength","defaultChecked","entities","admin","pluginStatuses","uploadPlugin","removePlugin","getPluginStatuses","activatePlugin","deactivatePlugin","PluginItemState","PluginState","PLUGIN_STATE_NOT_RUNNING","PLUGIN_STATE_STARTING","PLUGIN_STATE_RUNNING","PLUGIN_STATE_FAILED_TO_START","PLUGIN_STATE_FAILED_TO_STAY_RUNNING","PLUGIN_STATE_STOPPING","PluginItemStateDescription","PluginItem","_ref3","pluginStatus","removing","handleActivate","handleDeactivate","handleRemove","showInstances","activateButton","activating","deactivating","active","data-plugin-id","settingsButton","settings_schema","Link","removeButton","is_prepackaged","removeButtonText","prepackagedLabel","notices","instances","instance","cluster_id","clusterSummary","fileSelected","fileName","_asyncToGenerator3","mark","file","_ref5","abrupt","uploading","serverError","clearFileInput","_x","apply","_ref6","pluginId","_ref7","_x2","_ref8","_callee3","_ref9","_context3","_x3","_ref10","_callee4","_ref11","_context4","_x4","PluginSettings","_this4","_banner2","btnClass","uploadButtonText","pluginsList","pluginsContainer","enableUploads","EnableUploads","uploadHelpText","uploadBtnClass","params","plugin_id","plugin","nextId","Plugins","configSettings","lowerKey","_deleteProperty2","MultiSelectSetting","newValue","n","mustBePresent","newProps","_reactSelect2","multi","labelKey","joinValues","clearable","noResultsText","errorText","_reactColor","ColorSetting","color","hex","togglePicker","showPicker","closePicker","closest","getPickerClass","onTextInput","document","addEventListener","removeEventListener","picker","ChromePicker","_user_actions","UserSuggestion","isSelection","first_name","last_name","nickname","getFullName","handleClick","getUsersRoute","last_picture_update","Suggestion","UserProvider","suggestionId","pretext","normalizedPretext","startNewRequest","autocompleteUsersInTeam","shouldCancelDispatch","users","AppDispatcher","handleServerAction","ActionTypes","SUGGESTION_RECEIVED_SUGGESTIONS","matchedPretext","terms","Provider","UserAutocompleteSetting","handleUserSelected","userSuggestionProviders","_suggestion_box2","onItemSelected","listComponent","SuggestionList","listStyle","providers","requiredCharacters","openOnFocus","_roles","_roles2","getRoles","loadRolesIfNeeded","editRole","WebhookSettings","_policy_roles_adapter","_this$setState","_extends4","edited","updatedRoles","saving","_promise2","all","enableIncomingWebhooks","enableOutgoingWebhooks","enableCommands","enablePostUsernameOverride","enablePostIconOverride","enableOAuthServiceProvider","enableUserAccessTokens","callback","saveConfig","savedConfig","errMessage","v","EnableIncomingWebhooks","EnableOutgoingWebhooks","EnableCommands","EnablePostUsernameOverride","EnablePostIconOverride","EnableOAuthServiceProvider","EnableUserAccessTokens","loaded","system_user","team_user","loadPoliciesIntoState","RESTRICT_DIRECT_MESSAGE_ANY","RESTRICT_DIRECT_MESSAGE_TEAM","enableUserCreation","maxUsersPerTeam","restrictCreationToDomains","restrictDirectMessage","teammateNameDisplay","maxChannelsPerTeam","maxNotificationsPerChannel","enableConfirmNotificationsToChannel","EnableUserCreation","MaxUsersPerTeam","DEFAULT_MAX_USERS_PER_TEAM","RestrictCreationToDomains","RestrictDirectMessage","TeammateNameDisplay","MaxChannelsPerTeam","DEFAULT_MAX_CHANNELS_PER_TEAM","MaxNotificationsPerChannel","DEFAULT_MAX_NOTIFICATIONS_PER_CHANNEL","EnableConfirmNotificationsToChannel","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","isPushNotificationServerSetByEnv","handleAgreeChange","handleDropdownChange","pushNotificationServerType","agree","pushNotificationServer","MHPNS","MTPNS","SendPushNotifications","PushNotificationServer","PushNotificationContents","pushNotificationContents","pushNotificationServerTypes","sendHelpText","pushServerHelpText","tosCheckbox","AdminActions","uploadCertificate","removeCertificate","EnableSyncWithLdap","enableSyncWithLdap","Verify","verify","Encrypt","encrypt","IdpUrl","idpUrl","IdpDescriptorUrl","idpDescriptorUrl","AssertionConsumerServiceURL","assertionConsumerServiceURL","IdpCertificateFile","idpCertificateFile","PublicCertificateFile","publicCertificateFile","PrivateKeyFile","privateKeyFile","FirstNameAttribute","firstNameAttribute","LastNameAttribute","lastNameAttribute","EmailAttribute","emailAttribute","UsernameAttribute","usernameAttribute","NicknameAttribute","nicknameAttribute","PositionAttribute","positionAttribute","LocaleAttribute","localeAttribute","LoginButtonText","loginButtonText","siteUrl","consumerServiceUrl","siteUrlSet","samlCertificateStatus","idp_certificate_file","public_certificate_file","private_key_file","complete","_this3$setState","uploadIdpSamlCertificate","uploadPublicSamlCertificate","uploadPrivateSamlCertificate","_this4$setState","_this4$setState2","removeIdpSamlCertificate","removePublicSamlCertificate","removePrivateSamlCertificate","SAML","idpCert","privKey","pubCert","_remove_file_setting2","removingText","onSubmit","_file_upload_setting2","uploadingText","fileType","idpCertificateFileError","privateKeyFileError","publicCertificateFileError","consumerServiceUrlHelp","FileUploadSetting","upload_button","button","data-loading-text","Setting","RemoveFileSetting","remove_button","SessionLengthWebInDays","sessionLengthWebInDays","SessionLengthMobileInDays","sessionLengthMobileInDays","SessionLengthSSOInDays","sessionLengthSSOInDays","SessionCacheInMinutes","sessionCacheInMinutes","timeout","sessionIdleTimeoutInMinutes","SessionIdleTimeoutInMinutes","idleTimeout","Compliance","DiscardChangesModal","modalClass","confirmButtonClass","buildEnterpriseReady","BuildEnterpriseReady","getPlugins","pure","AdminSidebar","updateTitle","currentSiteName","isMobile","perfectScrollbar","suppressScrollX","oauthSettings","ldapSettings","samlSettings","clusterSettings","metricsSettings","complianceSettings","mfaSettings","messageExportSettings","complianceSection","_admin_sidebar_section2","LDAP","Metrics","MFA","MessageExport","otherCategory","_admin_sidebar_category2","parentLink","webrtcSettings","elasticSearchSettings","Elasticsearch","dataRetentionSettings","DataRetention","clientVersions","customPlugins","_admin_sidebar_header2","sectionClass","CustomPermissionsSchemes","router","AdminSidebarCategory","link","NavLink","activeClassName","clonedChildren","children","Children","child","cloneElement","SidebarHeader","toggleDropdown","dropdown","blockToggle","find","me","profilePicture","getProfilePictureUrl","_admin_navbar_dropdown2","AdminNavbarDropdown","GlobalActions","_team_utils","handleAboutModal","showAboutModal","handleLogout","emitUserLoggedOutEvent","aboutModalDismissed","onTeamChange","teams","TeamStore","getAll","teamMembers","getMyTeamMembers","on","setTimeout","addChangeListener","off","removeChangeListener","teamsArray","switchTeams","teamMember","team_id","filterAndSortTeamsByDisplayName","_blockable_link2","createSafeId","DEFAULT_CHANNEL","data-toggle","aria-expanded","_menu_icon2","_about_build_modal2","onModalDismissed","_browser_history","browserHistory","AdminSidebarSection","getLink","subsection","sidebarItem","DefinitionConstants","MEBIBYTE","pow","needsUtils","not","and","_len","funcs","Array","_key","or","_len2","_key2","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","stateValueMatch","regex","stateValueEqual","stateValueTrue","stateValueFalse","hasLicense","SystemAnalytics","TeamAnalytics","SystemUsers","ServerLogs","name_default","reloadConfig","recycleDatabaseConnections","invalidateAllCaches","boldedConsoleLogLevel","PermissionSchemesSettings","PermissionSystemSchemeSettings","PermissionTeamSchemeSettings","ldapTest","LDAP_SYNC","mattermostUsers","ldapUsers","deleteCount","updateCount","mattermost_users_count","ldap_users_count","delete_count","update_count","notifications","testS3Connection","configVal","displayVal","CustomUrlSchemesSetting","LicenseSettings","Audits","isLicensed","_format","StatTypes","stats","AnalyticsStore","getAllSystem","getStandardAnalytics","getPostsPerDayAnalytics","getUsersPerDayAnalytics","getAdvancedAnalytics","nextState","skippedIntensiveQueries","TOTAL_POSTS","postCountsDay","POST_PER_DAY","userCountsWithPostsDay","USERS_WITH_POSTS_PER_DAY","banner","postCount","postTotalGraph","activeUserGraph","_statistic_count2","_line_chart2","advancedStats","advancedGraphs","sessionCount","commandCount","incomingCount","outgoingCount","TOTAL_SESSIONS","TOTAL_COMMANDS","TOTAL_IHOOKS","TOTAL_OHOOKS","TOTAL_WEBSOCKET_CONNECTIONS","TOTAL_MASTER_DB_CONNECTIONS","TOTAL_READ_DB_CONNECTIONS","channelTypeData","TOTAL_PUBLIC_CHANNELS","TOTAL_PRIVATE_GROUPS","postTypeData","TOTAL_FILE_POSTS","TOTAL_HASHTAG_POSTS","postTypeGraph","_doughnut_chart2","userCount","TOTAL_USERS","teamCount","TOTAL_TEAMS","channelCount","dailyActiveUsers","DAILY_ACTIVE_USERS","monthlyActiveUsers","MONTHLY_ACTIVE_USERS","firstRow","secondRow","thirdRow","DoughnutChart","_teams","_teams2","_i18n","LAST_ANALYTICS_TEAM","getTeamsList","teamId","BrowserStore","getGlobalItem","initialTeam","locale","getCurrentLocale","getTeams","getProfilesInTeam","formatRecentUsersData","formatNewUsersData","_constants2","_initialiseProps","getAllTeam","recentlyActiveUsers","newUsers","getData","totalPostsCount","userActiveGraph","recentActiveUsers","newlyCreatedUsers","handleTeamChange","_table_chart2","General","PROFILE_CHUNK_SIZE","t","setGlobalItem","getMonthLong","hour12","tip","TableChart","OverlayTrigger","trigger","overlay","getAudits","loadingAudits","auditTable","_audit_table2","_compliance_reports2","_admin2","enabled","ComplianceSettings","requests","createCompliance","reports","getComplianceReports","createComplianceReport","ComplianceReports","loadingReports","runReport","runningReport","emails","keywords","from","end_at","list","report","getDateTime","download","getBaseRoute","greenStatus","redStatus","dataCell","marginTop","stringToArray","str","arrayToString","arr","valueAsArray","uploadLicenseFile","window","location","removeLicenseFile","clearLastError","edition","licenseType","licenseKey","issued","displayDate","IssuedAt","displayTime","startsAt","StartsAt","expiresAt","ExpiresAt","Name","Company","Users","_schemes","_schemes2","getSchemes","jobsAreEnabled","RunJobs","clusterIsEnabled","EnableCluster","loadSchemes","loadSchemeTeams","PAGE_SIZE","loadMoreSchemes","loadingMore","page","promises","scheme","teamOverrideSchemesMigrationView","phase2MigrationIsComplete","docLink","teamOverrideUnavalableView","defaultMsg","_permissions_scheme_summary2","history","teamOverrideView","_formatted_markdown_message2","status_code","getSchemeTeams","makeGetSchemeTeams","schemeId","deleteScheme","PermissionsSchemeSummary","MAX_TEAMS_PER_SCHEME_SUMMARY","schemeName","deleting","handleDeleteConfirmed","handleDeleteCanceled","delete","goToEdit","extraTeams","rolesRequest","getRolesByNames","goToSelectedRow","openRoles","all_users","scrollIntoView","behavior","block","toggleRole","selectedPermission","deriveRolesFromAllUsers","PermissionsScope","channel_user","teamAdminPromise","channelAdminPromise","systemUserPromise","teamUserPromise","channelUserPromise","team_admin","channel_admin","results","roleId","newOpenRoles","togglePermission","newPermissions","resetDefaults","newRolesState","DefaultRolePermissions","hasCustomSchemes","_accordion_toggle_icon2","_permissions_tree2","system_admin","_save_button2","savingMessage","showResetDefaultModal","Modal","dialogClassName","onHide","Header","closeButton","Body","Footer","rolesNeeded","every","loadRolesIntoState","_props$roles","displayName","PermissionGroup","toggleExpanded","expanded","toggleSelectRow","getRecursivePermissions","toggleSelectSubGroup","toggleSelectGroup","_this$props","permissionsToToggle","fromParent","prevPermissions","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","isInScope","renderPermission","comesFromParent","_permission_row2","renderGroup","g","anyChecked","anyUnchecked","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","hasPermissionsOnScope","allPermissionsFromParent","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_this$props2","permissionsRows","group","addVals","classes","_permission_checkbox2","_permission_description2","CheckboxCheckedIcon","CheckboxPartialIcon","PermissionRow","toggleSelect","PostEditTimeLimit","timeLimit","EditPostTimeLimitButton","messageID","UNSET_POST_EDIT_TIME_LIMIT","updateConfig","EditPostTimeLimitModal","INT32_MAX","save","val","postEditTimeLimit","handleOptionChange","ALLOW_EDIT_POST_ALWAYS","handleSecondsChange","ALLOW_EDIT_POST_TIME_LIMIT","step","scheme_id","getScheme","loadScheme","patchScheme","updateTeamScheme","createScheme","addTeamOpen","default_team_user_role","default_team_admin_role","default_channel_user_role","default_channel_admin_role","isLoaded","getStateRoles","teamUser","teamAdmin","channelUser","channelAdmin","baseTeam","baseChannel","handleNameChange","handleDescriptionChange","schemeDescription","allUsers","derived","_derived","newScheme","teamEditPromises","currentTeams","serverTeams","addedTeams","removedTeams","_teamId","_result","finish","t2","openAddTeam","removeTeam","addTeams","closeAddTeam","_team_selector_modal2","onTeamsSelected","currentSchemeId","alreadySelected","rows","_team_in_list2","onRemoveTeam","_search","searchTerm","views","search","modalSearch","startsWith","loadTeams","setModalSearchTerm","searchTeams","TeamSelectorModal","TEAMS_PER_PAGE","handleHide","handleExit","addValue","confirmed","teamIds","confirmAddModal","confirmAddTeam","setTeamsLoadingState","loadingState","loadingTeams","handlePageChange","prevPage","handleDelete","term","searchTimeoutId","clearTimeout","SEARCH_TIMEOUT_MILLISECONDS","option","isSelected","onAdd","rowSelected","_team_info2","_this5","numRemainingText","buttonSubmitText","delete_at","aName","toUpperCase","bName","onExited","Title","_multiselect2","optionRenderer","renderOption","valueKey","valueRenderer","renderValue","perPage","handleInput","handleAdd","getTeamStats","loadTeamStats","mfaEnabled","EnableMultifactorAuthentication","experimentalEnableAuthenticationTransfer","ExperimentalEnableAuthenticationTransfer","systemUsersSearch","totalUsers","SearchUserTeamFilter","ALL_USERS","NO_TEAM","total_member_count","analytics","Stats","TOTAL_INACTIVE_USERS","getUser","getUserAccessToken","setSystemUsersSearch","getUserByTokenOrId","getUserById","loadDataForTeam","loadComplete","handleTermChange","nextPage","doSearch","renderFilterRow","searching","loadProfiles","loadProfilesWithoutTeam","loadProfilesAndTeamMembers","UserSearchOptions","ALLOW_INACTIVE","WITHOUT_TEAM","searchUsers","hasProfile","onInput","_list2","usersPerPage","total","onTermChange","_selectors","getUsers","updateTeamMemberSchemeRoles","SystemUsersList","previousPage","doManageTeams","showManageTeamsModal","doManageRoles","showManageRolesModal","doManageTokens","showManageTokensModal","doManageTeamsDismiss","doManageRolesDismiss","doManageTokensDismiss","doPasswordReset","showPasswordModal","doPasswordResetDismiss","doPasswordResetSubmit","doEmailReset","showEmailModal","doEmailResetDismiss","doEmailResetSubmit","info","auth_service","service","LDAP_SERVICE","SAML_SERVICE","mfa_active","startCount","endCount","isSearch","extraInfo","getInfoForUser","_searchable_user_list2","renderCount","SystemUsersDropdown","actionProps","rowComponentType","UserListRowWithError","_manage_teams_modal2","_manage_roles_modal2","_manage_tokens_modal2","_reset_password_modal2","onModalSubmit","_reset_email_modal2","focusOnMount","userAccessTokensEnabled","updateUserRoles","ManageRolesModal","UserUtils","_diagnostics_actions","getStateFromProps","hasPostAllRole","hasPostAllPublicRole","hasUserAccessTokenRole","handleError","handleSystemAdminChange","handleUserAccessTokenChange","handlePostAllChange","handlePostAllPublicChange","trackRoleChanges","oldRoles","trackEvent","SYSTEM_USER_ACCESS_TOKEN_ROLE","SYSTEM_POST_ALL_ROLE","SYSTEM_POST_ALL_PUBLIC_ROLE","handleSave","SYSTEM_USER_ROLE","SYSTEM_ADMIN_ROLE","renderContents","additionalRoles","userAccessTokenContent","nextUser","TeamActions","ManageTeamsModal","loadTeamsAndTeamMembers","getTeamsForUser","getTeamMembersForUser","handleMemberChange","handleMemberRemove","_this$state","isAdmin","teamList","_remove_from_team_button2","onError","onMemberRemove","_manage_teams_dropdown2","onMemberChange","systemAdminIndicator","_team_actions","ManageTeamsDropdown","makeTeamAdmin","makeMember","removeFromTeam","prevState","removeUserFromTeam","isTeamAdmin","scheme_admin","MenuItem","onSelect","Dropdown","Toggle","useAnchor","Menu","RemoveFromTeamButton","userAccessTokens","userAccessTokensByUser","getUserAccessTokensForUser","ManageTokensModal","tokenList","userAccessTokensList","_revoke_token_button2","tokenId","nextUserId","revokeUserAccessToken","RevokeTokenButton","passwordConfig","getPasswordConfig","ResetPasswordModal","doCancel","serverErrorNewPass","serverErrorCurrentPass","currentPassword","errorMsg","_Utils$isValidPasswor","isValidPassword","valid","adminResetPassword","urlClass","newPasswordFocus","getCurrentId","urlClassCurrentPass","autoFocus","tabIndex","ResetEmailModal","isEmail","adminResetEmail","errorObj","buttons","Action","actionUserProps","emailStyle","userCountID","userCountEmail","_profile_picture2","displayEntireNameForUser","handleMakeActive","updateActive","handleManageTeams","handleManageRoles","handleManageTokens","handleResetPassword","handleResetEmail","handleResetMfa","adminResetMfa","handleDemoteSystemAdmin","showDemoteModal","handleDemoteCancel","handleDemoteSubmit","doMakeMember","teamUrl","getCurrentTeamUrl","handleShowDeactivateMemberModal","showDeactivateMemberModal","handleDeactivateMember","handleDeactivateCancel","renderDeactivateMemberModal","EMAIL_SERVICE","deactivateMemberButton","handleShowRevokeSessionsModal","showRevokeSessionsModal","handleRevokeSessions","revokeAllSessions","clientLogout","handleRevokeSessionsCancel","renderRevokeSessionsModal","revokeUserButtonButton","renderAccessToken","messageId","currentRoles","showMakeActive","showMakeNotActive","showManageTeams","showRevokeSessions","showMfaReset","disableActivationToggle","menuClass","makeActive","makeNotActive","manageTeams","mfaReset","passwordReset","emailReset","revokeSessions","_system_permission_gate2","REVOKE_USER_ACCESS_TOKEN","manageTokens","makeDemoteModal","deactivateMemberModal","revokeSessionsModal","searchProfilesInTeam","searchProfiles","USER_ID_LENGTH","getProfiles","getProfilesWithoutTeam","logs","getLogs","Logs","loadingLogs","_log_list2","nextDisabled","logPanel","scrollTop","scrollHeight","focus","nextTimeoutId","nextButton","previousButton","fontFamily","errorTooltip","serverErrorId","defaultValue","reduce","obj","pathPart","setValue","pathParts","part","SettingsGroup","TextSetting","input","oneOfType","oneOf","BooleanSetting","trueText","falseText","_react","Settings","DropdownSetting"],"mappings":"4JAGAA,EAAAC,EAAA,KACAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,MACYG,0JAAZH,EAAA,WAEAA,EAAA,qEAiBe,EAAAD,EAAAK,SAff,SAAyBC,EAAOC,GAC5B,SAAAC,EAAAC,YACOF,GACHG,KAAMN,EAAUO,kBAAkBJ,EAASK,QAArCR,CAA8CE,MAI5D,SAA4BO,GACxB,OACIC,SAAS,EAAAZ,EAAAa,qBACLC,+BACDH,KAII,CAA6CI,kNCO5CC,iBAAT,SAA0BC,EAAeC,GAC5C,IAAMC,EAAaC,KAAKC,OAAM,EAAAC,EAAAf,SAAeW,IAuB7C,OAmBJ,SAAgCA,GAC5B,IAAMK,EA2BV,WACI,IAAIC,KASJ,OAPA,EAAAC,EAAAlB,SAAcmB,GAASC,QAAQ,SAACC,IAC5B,EAAAH,EAAAlB,SAAcqB,GAAID,QAAQ,SAACE,GACvB,IAAMC,EAAQD,EAAGE,IAAI,SAACC,GAAD,OAAUA,EAAKC,WACpCT,EAAYA,EAAUU,OAAOJ,UAIrCI,QAAA,EAAAC,EAAA5B,SAAW,IAAA6B,EAAA7B,QAAQiB,EAAUO,IAAI,SAACC,GAAD,OAAUA,OArChBK,IAE3B,EAAAC,EAAA/B,SAAYW,GAAOS,QAAQ,SAACY,GACnBhB,EAAmBiB,SAASD,WACtBrB,EAAMqB,KA5CrBE,CAAuBtB,IAEvB,EAAAmB,EAAA/B,SAAYmB,GAASC,QAAQ,SAACe,GAC1B,IAAMC,EAAQ1B,EAAcyB,GACxBC,GA6CZ,SAAmCD,EAAYC,EAAOzB,GAClD,IAAM0B,EAAYlB,EAAQgB,GAAYC,GAEtC,QAAyB,IAAdC,EACP,MAAM,IAAIC,MAAJ,UAAoBF,EAApB,qCAA8DD,EAA9D,MAGVE,EAAUjB,QAAQ,SAACK,GACf,IAAMc,EAAO5B,EAAMc,EAAKC,UACpBD,EAAKe,WAqCjB,SAA6BC,EAAYF,GAChCA,EAAKG,YAAYT,SAASQ,IAC3BF,EAAKG,YAAYC,KAAKF,GAtClBG,CAAoBnB,EAAKgB,WAAYF,GA0CjD,SAAkCE,EAAYF,GAC1C,IAAMM,EAAkBN,EAAKG,YAAYI,QAAQL,IACxB,IAArBI,GACAN,EAAKG,YAAYK,OAAOF,EAAiB,GA3CrCG,CAAyBvB,EAAKgB,WAAYF,KAxD1CU,CAA0Bd,EAAYC,EAAOxB,MAKrD,EAAAsC,EAAAlD,SAAeY,GAAYQ,QAAQ,SAAA+B,GAA2B,IAAAC,GAAA,EAAAC,EAAArD,SAAAmD,EAAA,GAAzBzB,EAAyB0B,EAAA,GAAfE,EAAeF,EAAA,GACpDG,EAAwB,IAAA1B,EAAA7B,QAAQW,EAAMe,GAAUgB,aAChDc,EAAmB,IAAA3B,EAAA7B,QAAQsD,EAAUZ,aACrCe,KAAa9B,QAAA,EAAAC,EAAA5B,SAAIwD,IAAkBE,OAAO,SAACC,GAAD,OAAQJ,EAAsBK,IAAID,KAE9EJ,EAAsBM,OAASL,EAAiBK,MAA8B,IAAtBJ,EAAWK,eAC5DlD,EAAWc,KAInBd,KAUKmD,sBAAT,SAA+B/B,EAAKrB,GAAO,IAAAqD,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAC9C,QAAAC,EAAAC,GAAA,EAAAC,EAAAtE,SAAgBuE,EAAoBpD,EAAQa,GAAMrB,MAAlDqD,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA0D,KAA/CU,EAA+CN,EAAAhC,MACtD,GAAIsC,EAAEC,oBACF,OAAOD,EAAEtC,OAH6B,MAAAwC,GAAAX,GAAA,EAAAC,EAAAU,EAAA,aAAAZ,GAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAM9C,MAAM,IAAI5B,MAAJ,4CAAsDN,EAAtD,4BArEV,IAAA8C,EAAAtF,EAAA,4EAiHU+E,GA/GJpD,GACF4D,oBACIC,OAAQtD,SAAU,cAAee,WAAYwC,cAAYC,YAAa1C,YAAY,IAClF2C,QAASzD,SAAU,cAAee,WAAYwC,cAAYC,YAAa1C,YAAY,KAGvF4C,6BACIJ,OACKtD,SAAU,YAAae,WAAYwC,cAAYI,gBAAiB7C,YAAY,IAC5Ed,SAAU,YAAae,WAAYwC,cAAYK,sBAAuB9C,YAAY,IAClFd,SAAU,cAAee,WAAYwC,cAAYM,aAAc/C,YAAY,IAEhF2C,QACKzD,SAAU,YAAae,WAAYwC,cAAYI,gBAAiB7C,YAAY,IAC5Ed,SAAU,YAAae,WAAYwC,cAAYK,sBAAuB9C,YAAY,IAClFd,SAAU,cAAee,WAAYwC,cAAYM,aAAc/C,YAAY,MAgGxF,SAAU+B,EAAoBiB,EAAa7E,GAA3C,IAAAyB,EAAAC,EAAAoD,EAAA,OAAAC,EAAA1F,QAAA2F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAApB,MAAA,OAAAoB,EAAAE,GAAAJ,EAAA1F,QAAA+F,KACwBP,GADxB,WAAAI,EAAAI,GAAAJ,EAAAE,MAAArB,KAAA,CAAAmB,EAAApB,KAAA,YACepC,EADfwD,EAAAI,GAAA5D,OAEYoD,EAAYS,eAAe7D,GAFvC,CAAAwD,EAAApB,KAAA,eAGkBnC,EAAYmD,EAAYpD,GAExBqD,EAAoBpD,EAAU6D,KAAK,SAACzE,GACtC,IAAMc,EAAO5B,EAAMc,EAAKC,UACxB,OAAQD,EAAKe,aAAeD,EAAKG,YAAYT,SAASR,EAAKgB,cAAkBhB,EAAKe,YAAcD,EAAKG,YAAYT,SAASR,EAAKgB,cAP/ImD,EAAApB,KAAA,GAUmBpC,QAAOuC,qBAAsBc,GAVhD,OAAAG,EAAApB,KAAA,iCAAAoB,EAAAO,SAAAC,EAAAC,2FCjHA,IAAA9G,EAAAC,EAAA,KACAC,EAAAD,EAAA,GAEA8G,EAAA9G,EAAA,KACA+G,EAAA/G,EAAA,0DAEAA,EAAA,kBAgBe,EAAAD,EAAAK,SAdf,SAAyBC,GACrB,OACI2G,SAAS,EAAAD,EAAAE,sBAAqB5G,KAItC,SAA4BO,GACxB,OACIC,SAAS,EAAAZ,EAAAa,qBACLoG,mCACDtG,KAII,CAA6CuG,iCCzB5D,IAAAnF,GACAoF,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,gBAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,UAAA,IACAC,aAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAA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","file":"24.729434aaaf1bb2484cc7.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getJobsByType} from 'mattermost-redux/actions/jobs';\nimport * as Selectors from 'mattermost-redux/selectors/entities/jobs';\n\nimport Table from './table.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        ...ownProps,\n        jobs: Selectors.makeGetJobsByType(ownProps.jobType)(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getJobsByType,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Permissions} from 'mattermost-redux/constants/index';\n\nconst MAPPING = {\n    enableTeamCreation: {\n        true: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: true}],\n        false: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: false}],\n    },\n\n    enableOnlyAdminIntegrations: {\n        true: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_WEBHOOKS, shouldHave: false},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: false},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: false},\n        ],\n        false: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_WEBHOOKS, shouldHave: true},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: true},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: true},\n        ],\n    },\n};\n\n/**\n * Get the roles that were changed (but unsaved) for given mapping key/values.\n *\n * @param {object} mappingValues key/value to indicate which mapping items to use to update the roles.\n * @param {object} roles same structure as returned by mattermost-redux `getRoles`.\n * @return {object} the updated roles (only) in the same structure as returned by mattermost-redux `getRoles`.\n */\nexport function rolesFromMapping(mappingValues, roles) {\n    const rolesClone = JSON.parse(JSON.stringify(roles));\n\n    // Purge roles that aren't present in MAPPING, we don't care about them.\n    purgeNonPertinentRoles(rolesClone);\n\n    Object.keys(MAPPING).forEach((mappingKey) => {\n        const value = mappingValues[mappingKey];\n        if (value) {\n            mutateRolesBasedOnMapping(mappingKey, value, rolesClone);\n        }\n    });\n\n    // Purge roles that didn't have permissions changes, we don't care about them.\n    Object.entries(rolesClone).forEach(([roleName, roleClone]) => {\n        const originalPermissionSet = new Set(roles[roleName].permissions);\n        const newPermissionSet = new Set(roleClone.permissions);\n        const difference = [...newPermissionSet].filter((x) => !originalPermissionSet.has(x));\n\n        if (originalPermissionSet.size === newPermissionSet.size && difference.length === 0) {\n            delete rolesClone[roleName];\n        }\n    });\n\n    return rolesClone;\n}\n\n/**\n * Get the mapping value that matches for a given set of roles.\n *\n * @param {string} key to match under in the mapping.\n * @param {object} roles same structure as returned by mattermost-redux `getRoles`.\n * @return {string} the value that the roles/permissions assignment match in the mapping.\n */\nexport function mappingValueFromRoles(key, roles) {\n    for (const o of mappingPartIterator(MAPPING[key], roles)) {\n        if (o.allConditionsAreMet) {\n            return o.value;\n        }\n    }\n    throw new Error(`No matching mapping value found for key '${key}' with the given roles.`);\n}\n\nfunction purgeNonPertinentRoles(roles) {\n    const pertinentRoleNames = roleNamesInMapping();\n\n    Object.keys(roles).forEach((key) => {\n        if (!pertinentRoleNames.includes(key)) {\n            delete roles[key];\n        }\n    });\n}\n\nfunction mutateRolesBasedOnMapping(mappingKey, value, roles) {\n    const roleRules = MAPPING[mappingKey][value];\n\n    if (typeof roleRules === 'undefined') {\n        throw new Error(`Value '${value}' not present in MAPPING for key '${mappingKey}'.`);\n    }\n\n    roleRules.forEach((item) => {\n        const role = roles[item.roleName];\n        if (item.shouldHave) {\n            addPermissionToRole(item.permission, role);\n        } else {\n            removePermissionFromRole(item.permission, role);\n        }\n    });\n}\n\n// Returns a set of the role names present in MAPPING.\nfunction roleNamesInMapping() {\n    let roleNames = [];\n\n    Object.values(MAPPING).forEach((v1) => {\n        Object.values(v1).forEach((v2) => {\n            const names = v2.map((item) => item.roleName); // eslint-disable-line max-nested-callbacks\n            roleNames = roleNames.concat(names);\n        });\n    });\n\n    return [...new Set(roleNames.map((item) => item))];\n}\n\nfunction* mappingPartIterator(mappingPart, roles) {\n    for (const value in mappingPart) {\n        if (mappingPart.hasOwnProperty(value)) {\n            const roleRules = mappingPart[value];\n\n            const hasUnmetCondition = roleRules.some((item) => {\n                const role = roles[item.roleName];\n                return (item.shouldHave && !role.permissions.includes(item.permission)) || (!item.shouldHave && role.permissions.includes(item.permission));\n            });\n\n            yield {value, allConditionsAreMet: !hasUnmetCondition};\n        }\n    }\n}\n\nfunction addPermissionToRole(permission, role) {\n    if (!role.permissions.includes(permission)) {\n        role.permissions.push(permission);\n    }\n}\n\nfunction removePermissionFromRole(permission, role) {\n    const permissionIndex = role.permissions.indexOf(permission);\n    if (permissionIndex !== -1) {\n        role.permissions.splice(permissionIndex, 1);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deferNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked} from 'selectors/views/admin';\n\nimport BlockableLink from './blockable_link.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        blocked: getNavigationBlocked(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockableLink);\n","var map = {\n\t\"./af\": 894,\n\t\"./af.js\": 894,\n\t\"./ar\": 895,\n\t\"./ar-dz\": 896,\n\t\"./ar-dz.js\": 896,\n\t\"./ar-kw\": 897,\n\t\"./ar-kw.js\": 897,\n\t\"./ar-ly\": 898,\n\t\"./ar-ly.js\": 898,\n\t\"./ar-ma\": 899,\n\t\"./ar-ma.js\": 899,\n\t\"./ar-sa\": 900,\n\t\"./ar-sa.js\": 900,\n\t\"./ar-tn\": 901,\n\t\"./ar-tn.js\": 901,\n\t\"./ar.js\": 895,\n\t\"./az\": 902,\n\t\"./az.js\": 902,\n\t\"./be\": 903,\n\t\"./be.js\": 903,\n\t\"./bg\": 904,\n\t\"./bg.js\": 904,\n\t\"./bm\": 905,\n\t\"./bm.js\": 905,\n\t\"./bn\": 906,\n\t\"./bn.js\": 906,\n\t\"./bo\": 907,\n\t\"./bo.js\": 907,\n\t\"./br\": 908,\n\t\"./br.js\": 908,\n\t\"./bs\": 909,\n\t\"./bs.js\": 909,\n\t\"./ca\": 910,\n\t\"./ca.js\": 910,\n\t\"./cs\": 911,\n\t\"./cs.js\": 911,\n\t\"./cv\": 912,\n\t\"./cv.js\": 912,\n\t\"./cy\": 913,\n\t\"./cy.js\": 913,\n\t\"./da\": 914,\n\t\"./da.js\": 914,\n\t\"./de\": 915,\n\t\"./de-at\": 916,\n\t\"./de-at.js\": 916,\n\t\"./de-ch\": 917,\n\t\"./de-ch.js\": 917,\n\t\"./de.js\": 915,\n\t\"./dv\": 918,\n\t\"./dv.js\": 918,\n\t\"./el\": 919,\n\t\"./el.js\": 919,\n\t\"./en-au\": 920,\n\t\"./en-au.js\": 920,\n\t\"./en-ca\": 921,\n\t\"./en-ca.js\": 921,\n\t\"./en-gb\": 922,\n\t\"./en-gb.js\": 922,\n\t\"./en-ie\": 923,\n\t\"./en-ie.js\": 923,\n\t\"./en-il\": 924,\n\t\"./en-il.js\": 924,\n\t\"./en-nz\": 925,\n\t\"./en-nz.js\": 925,\n\t\"./eo\": 926,\n\t\"./eo.js\": 926,\n\t\"./es\": 927,\n\t\"./es-do\": 928,\n\t\"./es-do.js\": 928,\n\t\"./es-us\": 929,\n\t\"./es-us.js\": 929,\n\t\"./es.js\": 927,\n\t\"./et\": 930,\n\t\"./et.js\": 930,\n\t\"./eu\": 931,\n\t\"./eu.js\": 931,\n\t\"./fa\": 932,\n\t\"./fa.js\": 932,\n\t\"./fi\": 933,\n\t\"./fi.js\": 933,\n\t\"./fo\": 934,\n\t\"./fo.js\": 934,\n\t\"./fr\": 935,\n\t\"./fr-ca\": 936,\n\t\"./fr-ca.js\": 936,\n\t\"./fr-ch\": 937,\n\t\"./fr-ch.js\": 937,\n\t\"./fr.js\": 935,\n\t\"./fy\": 938,\n\t\"./fy.js\": 938,\n\t\"./gd\": 939,\n\t\"./gd.js\": 939,\n\t\"./gl\": 940,\n\t\"./gl.js\": 940,\n\t\"./gom-latn\": 941,\n\t\"./gom-latn.js\": 941,\n\t\"./gu\": 942,\n\t\"./gu.js\": 942,\n\t\"./he\": 943,\n\t\"./he.js\": 943,\n\t\"./hi\": 944,\n\t\"./hi.js\": 944,\n\t\"./hr\": 945,\n\t\"./hr.js\": 945,\n\t\"./hu\": 946,\n\t\"./hu.js\": 946,\n\t\"./hy-am\": 947,\n\t\"./hy-am.js\": 947,\n\t\"./id\": 948,\n\t\"./id.js\": 948,\n\t\"./is\": 949,\n\t\"./is.js\": 949,\n\t\"./it\": 950,\n\t\"./it.js\": 950,\n\t\"./ja\": 951,\n\t\"./ja.js\": 951,\n\t\"./jv\": 952,\n\t\"./jv.js\": 952,\n\t\"./ka\": 953,\n\t\"./ka.js\": 953,\n\t\"./kk\": 954,\n\t\"./kk.js\": 954,\n\t\"./km\": 955,\n\t\"./km.js\": 955,\n\t\"./kn\": 956,\n\t\"./kn.js\": 956,\n\t\"./ko\": 957,\n\t\"./ko.js\": 957,\n\t\"./ky\": 958,\n\t\"./ky.js\": 958,\n\t\"./lb\": 959,\n\t\"./lb.js\": 959,\n\t\"./lo\": 960,\n\t\"./lo.js\": 960,\n\t\"./lt\": 961,\n\t\"./lt.js\": 961,\n\t\"./lv\": 962,\n\t\"./lv.js\": 962,\n\t\"./me\": 963,\n\t\"./me.js\": 963,\n\t\"./mi\": 964,\n\t\"./mi.js\": 964,\n\t\"./mk\": 965,\n\t\"./mk.js\": 965,\n\t\"./ml\": 966,\n\t\"./ml.js\": 966,\n\t\"./mn\": 967,\n\t\"./mn.js\": 967,\n\t\"./mr\": 968,\n\t\"./mr.js\": 968,\n\t\"./ms\": 969,\n\t\"./ms-my\": 970,\n\t\"./ms-my.js\": 970,\n\t\"./ms.js\": 969,\n\t\"./mt\": 971,\n\t\"./mt.js\": 971,\n\t\"./my\": 972,\n\t\"./my.js\": 972,\n\t\"./nb\": 973,\n\t\"./nb.js\": 973,\n\t\"./ne\": 974,\n\t\"./ne.js\": 974,\n\t\"./nl\": 975,\n\t\"./nl-be\": 976,\n\t\"./nl-be.js\": 976,\n\t\"./nl.js\": 975,\n\t\"./nn\": 977,\n\t\"./nn.js\": 977,\n\t\"./pa-in\": 978,\n\t\"./pa-in.js\": 978,\n\t\"./pl\": 979,\n\t\"./pl.js\": 979,\n\t\"./pt\": 980,\n\t\"./pt-br\": 981,\n\t\"./pt-br.js\": 981,\n\t\"./pt.js\": 980,\n\t\"./ro\": 982,\n\t\"./ro.js\": 982,\n\t\"./ru\": 983,\n\t\"./ru.js\": 983,\n\t\"./sd\": 984,\n\t\"./sd.js\": 984,\n\t\"./se\": 985,\n\t\"./se.js\": 985,\n\t\"./si\": 986,\n\t\"./si.js\": 986,\n\t\"./sk\": 987,\n\t\"./sk.js\": 987,\n\t\"./sl\": 988,\n\t\"./sl.js\": 988,\n\t\"./sq\": 989,\n\t\"./sq.js\": 989,\n\t\"./sr\": 990,\n\t\"./sr-cyrl\": 991,\n\t\"./sr-cyrl.js\": 991,\n\t\"./sr.js\": 990,\n\t\"./ss\": 992,\n\t\"./ss.js\": 992,\n\t\"./sv\": 993,\n\t\"./sv.js\": 993,\n\t\"./sw\": 994,\n\t\"./sw.js\": 994,\n\t\"./ta\": 995,\n\t\"./ta.js\": 995,\n\t\"./te\": 996,\n\t\"./te.js\": 996,\n\t\"./tet\": 997,\n\t\"./tet.js\": 997,\n\t\"./tg\": 998,\n\t\"./tg.js\": 998,\n\t\"./th\": 999,\n\t\"./th.js\": 999,\n\t\"./tl-ph\": 1000,\n\t\"./tl-ph.js\": 1000,\n\t\"./tlh\": 1001,\n\t\"./tlh.js\": 1001,\n\t\"./tr\": 1002,\n\t\"./tr.js\": 1002,\n\t\"./tzl\": 1003,\n\t\"./tzl.js\": 1003,\n\t\"./tzm\": 1004,\n\t\"./tzm-latn\": 1005,\n\t\"./tzm-latn.js\": 1005,\n\t\"./tzm.js\": 1004,\n\t\"./ug-cn\": 1006,\n\t\"./ug-cn.js\": 1006,\n\t\"./uk\": 1007,\n\t\"./uk.js\": 1007,\n\t\"./ur\": 1008,\n\t\"./ur.js\": 1008,\n\t\"./uz\": 1009,\n\t\"./uz-latn\": 1010,\n\t\"./uz-latn.js\": 1010,\n\t\"./uz.js\": 1009,\n\t\"./vi\": 1011,\n\t\"./vi.js\": 1011,\n\t\"./x-pseudo\": 1012,\n\t\"./x-pseudo.js\": 1012,\n\t\"./yo\": 1013,\n\t\"./yo.js\": 1013,\n\t\"./zh-cn\": 1014,\n\t\"./zh-cn.js\": 1014,\n\t\"./zh-hk\": 1015,\n\t\"./zh-hk.js\": 1015,\n\t\"./zh-tw\": 1016,\n\t\"./zh-tw.js\": 1016\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1140;","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport ChannelStore from 'stores/channel_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: 'audit_table.sessionRevoked',\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: 'audit_table.channelCreated',\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: 'audit_table.establishedDM',\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: 'audit_table.nameUpdated',\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: 'audit_table.headerUpdated',\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: 'audit_table.channelDeleted',\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: 'audit_table.userAdded',\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: 'audit_table.userRemoved',\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: 'audit_table.attemptedRegisterApp',\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: 'audit_table.attemptedAllowOAuthAccess',\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: 'audit_table.successfullOAuthAccess',\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: 'audit_table.failedOAuthAccess',\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: 'audit_table.attemptedOAuthToken',\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: 'audit_table.successfullOAuthToken',\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: 'audit_table.oauthTokenFailed',\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: 'audit_table.attemptedLogin',\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: 'audit_table.authenticated',\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: 'audit_table.successfullLogin',\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: 'audit_table.failedLogin',\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: 'audit_table.updatePicture',\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: 'audit_table.updateGeneral',\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: 'audit_table.attemptedPassword',\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: 'audit_table.successfullPassword',\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: 'audit_table.failedPassword',\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: 'audit_table.updatedRol',\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: 'audit_table.member',\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: 'audit_table.accountActive',\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: 'audit_table.accountInactive',\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: 'audit_table.by',\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: 'audit_table.byAdmin',\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: 'audit_table.sentEmail',\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: 'audit_table.attemptedReset',\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: 'audit_table.successfullReset',\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: 'audit_table.updateGlobalNotifications',\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: 'audit_table.attemptedWebhookCreate',\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: 'audit_table.successfullWebhookCreate',\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: 'audit_table.failedWebhookCreate',\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: 'audit_table.attemptedWebhookDelete',\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: 'audit_table.successfullWebhookDelete',\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: 'audit_table.failedWebhookDelete',\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: 'audit_table.logout',\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: 'audit_table.verified',\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: 'audit_table.revokedAll',\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: 'audit_table.loginAttempt',\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: 'audit_table.loginFailure',\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: 'audit_table.attemptedLicenseAdd',\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: 'audit_table.successfullLicenseAdd',\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: 'audit_table.failedExpiredLicenseAdd',\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: 'audit_table.failedInvalidLicenseAdd',\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: 'audit_table.licenseRemoved',\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nfunction AuditTable(props) {\n    var accessList = [];\n\n    const {formatMessage} = props.intl;\n    for (var i = 0; i < props.audits.length; i++) {\n        const audit = props.audits[i];\n        const auditInfo = formatAuditInfo(audit, formatMessage);\n\n        let uContent;\n        if (props.showUserId) {\n            var profile = UserStore.getProfile(auditInfo.userId);\n            if (profile) {\n                uContent = <td className='word-break--all'>{profile.email}</td>;\n            } else {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n        }\n\n        let iContent;\n        if (props.showIp) {\n            iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n        }\n\n        let sContent;\n        if (props.showSession) {\n            sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n        }\n\n        let descStyle = '';\n        if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n            descStyle = ' color--error';\n        }\n\n        accessList[i] = (\n            <tr key={audit.id}>\n                <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                {uContent}\n                <td\n                    className={'word-break--all' + descStyle}\n                >\n                    {auditInfo.desc}\n                </td>\n                {iContent}\n                {sContent}\n            </tr>\n        );\n    }\n\n    let userIdContent;\n    if (props.showUserId) {\n        userIdContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.userId'\n                    defaultMessage='User ID'\n                />\n            </th>\n        );\n    }\n\n    let ipContent;\n    if (props.showIp) {\n        ipContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.ip'\n                    defaultMessage='IP Address'\n                />\n            </th>\n        );\n    }\n\n    let sessionContent;\n    if (props.showSession) {\n        sessionContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.session'\n                    defaultMessage='Session ID'\n                />\n            </th>\n        );\n    }\n\n    return (\n        <table className='table'>\n            <thead>\n                <tr>\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.timestamp'\n                            defaultMessage='Timestamp'\n                        />\n                    </th>\n                    {userIdContent}\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.action'\n                            defaultMessage='Action'\n                        />\n                    </th>\n                    {ipContent}\n                    {sessionContent}\n                </tr>\n            </thead>\n            <tbody>\n                {accessList}\n            </tbody>\n        </table>\n    );\n}\n\nAuditTable.propTypes = {\n    intl: intlShape.isRequired,\n    audits: PropTypes.array.isRequired,\n    showUserId: PropTypes.bool,\n    showIp: PropTypes.bool,\n    showSession: PropTypes.bool,\n};\n\nexport default injectIntl(AuditTable);\n\nexport function formatAuditInfo(audit, formatMessage) {\n    const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n    let auditDesc = '';\n\n    if (actionURL.indexOf('/channels') === 0) {\n        const channelInfo = audit.extra_info.split(' ');\n        const channelNameField = channelInfo[0].split('=');\n\n        let channelURL = '';\n        let channelObj;\n        let channelName = '';\n        if (channelNameField.indexOf('name') >= 0) {\n            channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n            channelObj = ChannelStore.getByName(channelURL);\n            if (channelObj) {\n                channelName = channelObj.display_name;\n            } else {\n                channelName = channelURL;\n            }\n        }\n\n        switch (actionURL) {\n        case '/channels/create':\n            auditDesc = formatMessage(holders.channelCreated, {channelName});\n            break;\n        case '/channels/create_direct':\n            auditDesc = formatMessage(holders.establishedDM, {username: Utils.getDirectTeammate(channelObj.id).username});\n            break;\n        case '/channels/update':\n            auditDesc = formatMessage(holders.nameUpdated, {channelName});\n            break;\n        case '/channels/update_desc': // support the old path\n        case '/channels/update_header':\n            auditDesc = formatMessage(holders.headerUpdated, {channelName});\n            break;\n        default: {\n            let userIdField = [];\n            let userId = '';\n            let username = '';\n\n            if (channelInfo[1]) {\n                userIdField = channelInfo[1].split('=');\n\n                if (userIdField.indexOf('user_id') >= 0) {\n                    userId = userIdField[userIdField.indexOf('user_id') + 1];\n                    var profile = UserStore.getProfile(userId);\n                    if (profile) {\n                        username = profile.username;\n                    }\n                }\n            }\n\n            if (/\\/channels\\/[A-Za-z0-9]+\\/delete/.test(actionURL)) {\n                auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n            } else if (/\\/channels\\/[A-Za-z0-9]+\\/add/.test(actionURL)) {\n                auditDesc = formatMessage(holders.userAdded, {username, channelName});\n            } else if (/\\/channels\\/[A-Za-z0-9]+\\/remove/.test(actionURL)) {\n                auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n            }\n\n            break;\n        }\n        }\n    } else if (actionURL.indexOf('/oauth') === 0) {\n        const oauthInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/oauth/register': {\n            const clientIdField = oauthInfo[0].split('=');\n\n            if (clientIdField[0] === 'client_id') {\n                auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n            }\n\n            break;\n        }\n        case '/oauth/allow':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthAccess);\n            } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                auditDesc = formatMessage(holders.failedOAuthAccess);\n            }\n\n            break;\n        case '/oauth/access_token':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedOAuthToken);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthToken);\n            } else {\n                const oauthTokenFailure = oauthInfo[0].split('-');\n\n                if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                    auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                }\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/users') === 0) {\n        const userInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/users/login':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLogin);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullLogin);\n            } else if (userInfo[0] === 'authenticated') {\n                auditDesc = formatMessage(holders.authenticated);\n            } else if (userInfo[0]) {\n                auditDesc = formatMessage(holders.failedLogin);\n            }\n\n            break;\n        case '/users/revoke_session':\n            auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n            break;\n        case '/users/newimage':\n            auditDesc = formatMessage(holders.updatePicture);\n            break;\n        case '/users/update':\n            auditDesc = formatMessage(holders.updateGeneral);\n            break;\n        case '/users/newpassword':\n            if (userInfo[0] === 'attempted') {\n                auditDesc = formatMessage(holders.attemptedPassword);\n            } else if (userInfo[0] === 'completed') {\n                auditDesc = formatMessage(holders.successfullPassword);\n            } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                auditDesc = formatMessage(holders.failedPassword);\n            }\n\n            break;\n        case '/users/update_roles': {\n            const userRoles = userInfo[0].split('=')[1];\n\n            auditDesc = formatMessage(holders.updatedRol);\n            if (userRoles.trim()) {\n                auditDesc += userRoles;\n            } else {\n                auditDesc += formatMessage(holders.member);\n            }\n\n            break;\n        }\n        case '/users/update_active': {\n            const updateType = userInfo[0].split('=')[0];\n            const updateField = userInfo[0].split('=')[1];\n\n            /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n            if (updateType === 'active') {\n                if (updateField === 'true') {\n                    auditDesc = formatMessage(holders.accountActive);\n                } else if (updateField === 'false') {\n                    auditDesc = formatMessage(holders.accountInactive);\n                }\n\n                const actingUserInfo = userInfo[1].split('=');\n                if (actingUserInfo[0] === 'session_user') {\n                    const actingUser = UserStore.getProfile(actingUserInfo[1]);\n                    const user = UserStore.getCurrentUser();\n                    if (user && actingUser && (Utils.isSystemAdmin(user.roles))) {\n                        auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                    } else if (user && actingUser) {\n                        auditDesc += formatMessage(holders.byAdmin);\n                    }\n                }\n            } else if (updateType === 'session_id') {\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n            }\n\n            break;\n        }\n        case '/users/send_password_reset':\n            auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n            break;\n        case '/users/reset_password':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedReset);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullReset);\n            }\n\n            break;\n        case '/users/update_notify':\n            auditDesc = formatMessage(holders.updateGlobalNotifications);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/hooks') === 0) {\n        const webhookInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/hooks/incoming/create':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookCreate);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n            } else if (webhookInfo === 'fail - bad channel permissions') {\n                auditDesc = formatMessage(holders.failedWebhookCreate);\n            }\n\n            break;\n        case '/hooks/incoming/delete':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookDelete);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullWebhookDelete);\n            } else if (webhookInfo === 'fail - inappropriate conditions') {\n                auditDesc = formatMessage(holders.failedWebhookDelete);\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/license') === 0) {\n        const licenseInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/license/add':\n            if (licenseInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLicenseAdd);\n            } else if (licenseInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullLicenseAdd);\n            } else if (licenseInfo === 'failed - expired or non-started license') {\n                auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n            } else if (licenseInfo === 'failed - invalid license') {\n                auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n            }\n\n            break;\n        case '/license/remove':\n            auditDesc = formatMessage(holders.licenseRemoved);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n        auditDesc = Utils.toTitleCase(audit.extra_info);\n    } else {\n        switch (actionURL) {\n        case '/logout':\n            auditDesc = formatMessage(holders.logout);\n            break;\n        case '/verify_email':\n            auditDesc = formatMessage(holders.verified);\n            break;\n        default:\n            break;\n        }\n    }\n\n    /* If all else fails... */\n    if (!auditDesc) {\n        /* Currently not called anywhere */\n        if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n            auditDesc = formatMessage(holders.revokedAll);\n        } else {\n            let actionDesc = '';\n            if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                actionDesc = Utils.toTitleCase(actionDesc);\n            }\n\n            let extraInfoDesc = '';\n            if (audit.extra_info) {\n                extraInfoDesc = audit.extra_info;\n\n                if (extraInfoDesc.indexOf('=') !== -1) {\n                    extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                }\n            }\n            auditDesc = actionDesc + ' ' + extraInfoDesc;\n        }\n    }\n\n    const date = new Date(audit.create_at);\n    const auditInfo = {};\n    auditInfo.timestamp = (\n        <div>\n            <div>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n            </div>\n            <div>\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </div>\n        </div>\n    );\n    auditInfo.userId = audit.user_id;\n    auditInfo.desc = auditDesc;\n    auditInfo.ip = audit.ip_address;\n    auditInfo.sessionId = audit.session_id;\n\n    return auditInfo;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\n/**\n * A button which, when clicked, performs an action and displays\n * its outcome as either success, or failure accompanied by the\n * `message` property of the `err` object.\n */\nexport default class RequestButton extends React.Component {\n    static propTypes = {\n\n        /**\n         * The action to be called to carry out the request.\n         */\n        requestAction: PropTypes.func.isRequired,\n\n        /**\n         * A component that displays help text for the request button.\n         *\n         * Typically, this will be a <FormattedMessage/>.\n         */\n        helpText: PropTypes.element,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        loadingText: PropTypes.string,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        buttonText: PropTypes.element.isRequired,\n\n        /**\n         * The element to display as the field label.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        label: PropTypes.element,\n\n        /**\n         * True if the button form control should be disabled, otherwise false.\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * True if the config needs to be saved before running the request, otherwise false.\n         *\n         * If set to true, the action provided in the `saveConfigAction` property will be\n         * called before the action provided in the `requestAction` property, with the later\n         * only being called if the former is successful.\n         */\n        saveNeeded: PropTypes.bool,\n\n        /**\n         * Action to be called to save the config, if saveNeeded is set to true.\n         */\n        saveConfigAction: PropTypes.func,\n\n        /**\n         * True if the success message should be show when the request completes successfully,\n         * otherwise false.\n         */\n        showSuccessMessage: PropTypes.bool,\n\n        /**\n         * The message to show when the request completes successfully.\n         */\n        successMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the success message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the success message.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * The message to show when the request returns an error.\n         */\n        errorMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the error message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the error message.\n             *\n             * The placeholder {error} may be used to include the error message returned\n             * by the server in response to the failed request.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * True if the {error} placeholder for the `errorMessage` property should include both\n         * the `message` and `detailed_error` properties of the error returned from the server,\n         * otherwise false to include only the `message` property.\n         */\n        includeDetailedError: PropTypes.bool,\n\n        /**\n         * An element to display adjacent to the request button.\n         */\n        alternativeActionElement: PropTypes.element,\n    }\n\n    static defaultProps = {\n        disabled: false,\n        saveNeeded: false,\n        showSuccessMessage: true,\n        includeDetailedError: false,\n        successMessage: {\n            id: 'admin.requestButton.requestSuccess',\n            defaultMessage: 'Test Successful',\n        },\n        errorMessage: {\n            id: 'admin.requestButton.requestFailure',\n            defaultMessage: 'Test Failure: {error}',\n        },\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleRequest = this.handleRequest.bind(this);\n\n        this.state = {\n            busy: false,\n            fail: null,\n            success: false,\n        };\n    }\n\n    handleRequest(e) {\n        e.preventDefault();\n\n        this.setState({\n            busy: true,\n            fail: null,\n            success: false,\n        });\n\n        const doRequest = () => { //eslint-disable-line func-style\n            this.props.requestAction(\n                () => {\n                    this.setState({\n                        busy: false,\n                        success: true,\n                    });\n                },\n                (err) => {\n                    let errMsg = err.message;\n                    if (this.props.includeDetailedError) {\n                        errMsg += ' - ' + err.detailed_error;\n                    }\n\n                    this.setState({\n                        busy: false,\n                        fail: errMsg,\n                    });\n                }\n            );\n        };\n\n        if (this.props.saveNeeded) {\n            this.props.saveConfigAction(doRequest);\n        } else {\n            doRequest();\n        }\n    }\n\n    render() {\n        let message = null;\n        if (this.state.fail) {\n            message = (\n                <div>\n                    <div className='alert alert-warning'>\n                        <i\n                            className='fa fa-warning'\n                            title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                        />\n                        <FormattedMessage\n                            id={this.props.errorMessage.id}\n                            defaultMessage={this.props.errorMessage.defaultMessage}\n                            values={{\n                                error: this.state.fail,\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n        } else if (this.state.success && this.props.showSuccessMessage) {\n            message = (\n                <div>\n                    <div className='alert alert-success'>\n                        <i\n                            className='fa fa-success'\n                            title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                        />\n                        <FormattedMessage\n                            id={this.props.successMessage.id}\n                            defaultMessage={this.props.successMessage.defaultMessage}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        let contents = null;\n        if (this.state.busy) {\n            let loadingText = Utils.localizeMessage('admin.requestButton.loading', ' Loading...');\n            if (this.props.loadingText) {\n                loadingText = this.props.loadingText;\n            }\n            contents = (\n                <span>\n                    <span\n                        className='fa fa-refresh icon--rotate'\n                        title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                    />\n                    {loadingText}\n                </span>\n            );\n        } else {\n            contents = this.props.buttonText;\n        }\n\n        let widgetClassNames = 'col-sm-8';\n        let label = null;\n        if (this.props.label) {\n            label = (\n                <label\n                    className='control-label col-sm-4'\n                >\n                    {this.props.label}\n                </label>\n            );\n        } else {\n            widgetClassNames = 'col-sm-offset-4 ' + widgetClassNames;\n        }\n\n        return (\n            <div className='form-group'>\n                {label}\n                <div className={widgetClassNames}>\n                    <div>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleRequest}\n                            disabled={this.props.disabled}\n                        >\n                            {contents}\n                        </button>\n                        {this.props.alternativeActionElement}\n                        {message}\n                    </div>\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {injectIntl, intlShape} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport marked from 'marked';\n\nconst TARGET_BLANK_URL_PREFIX = '!';\n\nclass CustomRenderer extends marked.Renderer {\n    link(href, title, text) {\n        if (href[0] === TARGET_BLANK_URL_PREFIX) {\n            return `<a href=\"${href.substring(1, href.length)}\" target=\"_blank\">${text}</a>`;\n        }\n        return `<a href=\"${href}\">${text}</a>`;\n    }\n\n    paragraph(text) {\n        return text;\n    }\n}\n\n/*\n* Translations component with the same API as react-intl's <FormattedMessage> component except the message string\n* accepts markdown. It supports the following non-block-level markdown:\n* - *italic*\n* - **bold**\n* - `inline code`\n* - ~~strikethrough~~\n* - [link](http://example.com/)\n* - [link in new tab](!http://example.com/)\n* - line\\nbreaks\n*\n* Note: Line breaks (\\n) in a defaultMessage parameter string must be surrounded by curly brackets {} in JSX. Example:\n* <FormattedMarkdownMessage id='my.example' defaultMessage={'first line\\nsecond line'} />\n*/\nclass FormattedMarkdownMessage extends React.PureComponent {\n    static get propTypes() {\n        return {\n            intl: intlShape.isRequired,\n            id: PropTypes.string.isRequired,\n            defaultMessage: PropTypes.string.isRequired,\n            values: PropTypes.object,\n        };\n    }\n\n    render() {\n        const origMsg = this.props.intl.formatMessage({\n            id: this.props.id,\n            defaultMessage: this.props.defaultMessage,\n        }, this.props.values);\n\n        const markedUpMessage = marked(origMsg, {\n            breaks: true,\n            sanitize: true,\n            renderer: new CustomRenderer(),\n        });\n\n        return (<span dangerouslySetInnerHTML={{__html: markedUpMessage}}/>);\n    }\n}\n\nexport default injectIntl(FormattedMarkdownMessage);","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default function() {\n    return (\n        <div className='alert alert-warning'>\n            <FormattedMessage\n                id='admin.set_by_env'\n                defaultMessage='This setting has been set through an environment variable. It cannot be changed through the System Console.'\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport crypto from 'crypto';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SetByEnv from './set_by_env';\n\nexport default class GeneratedSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            value: PropTypes.string.isRequired,\n            onChange: PropTypes.func.isRequired,\n            disabled: PropTypes.bool.isRequired,\n            setByEnv: PropTypes.bool.isRequired,\n            disabledText: PropTypes.node,\n            helpText: PropTypes.node.isRequired,\n            regenerateText: PropTypes.node,\n            regenerateHelpText: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            disabled: false,\n            regenerateText: (\n                <FormattedMessage\n                    id='admin.regenerate'\n                    defaultMessage='Regenerate'\n                />\n            ),\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.regenerate = this.regenerate.bind(this);\n    }\n\n    regenerate(e) {\n        e.preventDefault();\n\n        this.props.onChange(this.props.id, crypto.randomBytes(256).toString('base64').substring(0, 32));\n    }\n\n    render() {\n        let disabledText = null;\n        if (this.props.disabled && this.props.disabledText) {\n            disabledText = (\n                <div className='admin-console__disabled-text'>\n                    {this.props.disabledText}\n                </div>\n            );\n        }\n\n        let regenerateHelpText = null;\n        if (this.props.regenerateHelpText) {\n            regenerateHelpText = (\n                <div className='help-text'>\n                    {this.props.regenerateHelpText}\n                </div>\n            );\n        }\n\n        return (\n            <div className='form-group'>\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={this.props.id}\n                >\n                    {this.props.label}\n                </label>\n                <div className='col-sm-8'>\n                    <input\n                        type='text'\n                        className='form-control'\n                        id={this.props.id}\n                        placeholder={this.props.placeholder}\n                        value={this.props.value}\n                        disabled={true}\n                    />\n                    {disabledText}\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                    <div className='help-text'>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.regenerate}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        >\n                            {this.props.regenerateText}\n                        </button>\n                    </div>\n                    {regenerateHelpText}\n                    {this.props.setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nconst SECTION_NONE = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNone'\n                defaultMessage='None'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNoneDescription'\n                defaultMessage='Mattermost will connect over an insecure connection.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_TLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTls'\n                defaultMessage='TLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTlsDescription'\n                defaultMessage='Encrypts the communication between Mattermost and your server.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_STARTTLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStart'\n                defaultMessage='STARTTLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStartDescription'\n                defaultMessage='Takes an existing insecure connection and attempts to upgrade it to a secure connection using TLS.'\n            />\n        </td>\n    </tr>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_EMAIL = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_LDAP = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_WEBSERVER = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n        </tbody>\n    </table>\n);\n\nexport const WEBSERVER_MODE_HELP_TEXT = (\n    <div>\n        <table\n            className='table table-bordered table-margin--none'\n            cellPadding='5'\n        >\n            <tbody>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzip'\n                            defaultMessage='gzip'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzipDescription'\n                            defaultMessage='The Mattermost server will serve static files compressed with gzip.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressed'\n                            defaultMessage='Uncompressed'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressedDescription'\n                            defaultMessage='The Mattermost server will serve static files uncompressed.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabled'\n                            defaultMessage='Disabled'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabledDescription'\n                            defaultMessage='The Mattermost server will not serve static files.'\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <p className='help-text'>\n            <FormattedMessage\n                id='admin.webserverModeHelpText'\n                defaultMessage='gzip compression applies to static content files. It is recommended to enable gzip to improve performance unless your environment has specific restrictions, such as a web proxy that distributes gzip files poorly.'\n            />\n        </p>\n    </div>\n);\n\nexport const LOG_LEVEL_OPTIONS = [\n    {\n        value: 'DEBUG',\n        display_name: 'DEBUG',\n        display_name_default: 'DEBUG',\n    },\n    {\n        value: 'INFO',\n        display_name: 'INFO',\n        display_name_default: 'INFO',\n    },\n    {\n        value: 'ERROR',\n        display_name: 'ERROR',\n        display_name_default: 'ERROR',\n    },\n];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class RadioSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n    };\n\n    static defaultProps = {\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    render() {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <div\n                    className='radio'\n                    key={value}\n                >\n                    <label>\n                        <input\n                            type='radio'\n                            value={value}\n                            name={this.props.id}\n                            checked={value === this.props.value}\n                            onChange={this.handleChange}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        />\n                        {text}\n                    </label>\n                </div>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                {options}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default function Banner(props) {\n    let title = (\n        <FormattedMessage\n            id='admin.banner.heading'\n            defaultMessage='Note:'\n        />\n    );\n\n    if (props.title) {\n        title = props.title;\n    }\n\n    return (\n        <div className='banner'>\n            <div className='banner__content'>\n                <h4 className='banner__heading'>\n                    {title}\n                </h4>\n                <p>\n                    {props.description}\n                </p>\n            </div>\n        </div>\n    );\n}\n\nBanner.defaultProps = {\n};\nBanner.propTypes = {\n    title: PropTypes.node,\n    description: PropTypes.node.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport * as I18n from 'i18n/i18n.jsx';\n\nimport {SettingsTypes} from 'utils/constants.jsx';\nimport {formatText} from 'utils/text_formatting.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport RequestButton from 'components/admin_console/request_button/request_button';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport AdminSettings from 'components/admin_console/admin_settings.jsx';\nimport BooleanSetting from 'components/admin_console/boolean_setting.jsx';\nimport TextSetting from 'components/admin_console/text_setting.jsx';\nimport DropdownSetting from 'components/admin_console/dropdown_setting.jsx';\nimport MultiSelectSetting from 'components/admin_console/multiselect_settings.jsx';\nimport RadioSetting from 'components/admin_console/radio_setting.jsx';\nimport ColorSetting from 'components/admin_console/color_setting.jsx';\nimport GeneratedSetting from 'components/admin_console/generated_setting.jsx';\nimport UserAutocompleteSetting from 'components/admin_console/user_autocomplete_setting.jsx';\nimport SettingsGroup from 'components/admin_console/settings_group.jsx';\nimport JobsTable from 'components/admin_console/jobs';\n\nexport default class SchemaAdminSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n        this.buildSettingFunctions = {\n            [SettingsTypes.TYPE_TEXT]: this.buildTextSetting,\n            [SettingsTypes.TYPE_NUMBER]: this.buildTextSetting,\n            [SettingsTypes.TYPE_COLOR]: this.buildColorSetting,\n            [SettingsTypes.TYPE_BOOL]: this.buildBoolSetting,\n            [SettingsTypes.TYPE_DROPDOWN]: this.buildDropdownSetting,\n            [SettingsTypes.TYPE_RADIO]: this.buildRadioSetting,\n            [SettingsTypes.TYPE_BANNER]: this.buildBannerSetting,\n            [SettingsTypes.TYPE_GENERATED]: this.buildGeneratedSetting,\n            [SettingsTypes.TYPE_USERNAME]: this.buildUsernameSetting,\n            [SettingsTypes.TYPE_BUTTON]: this.buildButtonSetting,\n            [SettingsTypes.TYPE_LANGUAGE]: this.buildLanguageSetting,\n            [SettingsTypes.TYPE_JOBSTABLE]: this.buildJobsTableSetting,\n            [SettingsTypes.TYPE_CUSTOM]: this.buildCustomSetting,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.schema !== this.props.schema) {\n            this.setState(this.getStateFromConfig(nextProps.config, nextProps.schema));\n        }\n    }\n\n    getConfigFromState(config) {\n        const schema = this.props.schema;\n\n        if (schema) {\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                let value = this.getSettingValue(setting);\n\n                if (setting.onConfigSave) {\n                    value = setting.onConfigSave(value);\n                }\n\n                this.setConfigValue(config, setting.key, value);\n            });\n        }\n\n        return config;\n    }\n\n    getStateFromConfig(config, schema = this.props.schema) {\n        const state = {};\n\n        if (schema) {\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                let value = this.getConfigValue(config, setting.key);\n\n                if (setting.onConfigLoad) {\n                    value = setting.onConfigLoad(value);\n                }\n\n                state[setting.key] = value == null ? setting.default : value;\n            });\n        }\n\n        return state;\n    }\n\n    getSetting(key) {\n        for (const setting of this.props.schema.settings) {\n            if (setting.key === key) {\n                return setting;\n            }\n        }\n\n        return null;\n    }\n\n    getSettingValue(setting) {\n        // Force boolean values to false when disabled.\n        if (setting.type === SettingsTypes.TYPE_BOOL) {\n            if (this.isDisabled(setting)) {\n                return false;\n            }\n        }\n\n        return this.state[setting.key];\n    }\n\n    renderTitle = () => {\n        if (!this.props.schema) {\n            return '';\n        }\n        if (this.props.schema.translate === false) {\n            return this.props.schema.name || this.props.schema.id;\n        }\n        return <FormattedMessage id={this.props.schema.name || this.props.schema.id}/>;\n    }\n\n    renderBanner = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (this.props.schema.translate === false) {\n            return <span>{setting.label}</span>;\n        }\n\n        if (typeof setting.label === 'string') {\n            if (setting.label_html) {\n                return (\n                    <FormattedHTMLMessage\n                        id={setting.label}\n                        values={setting.label_values}\n                        defaultMessage={setting.label_default}\n                    />\n                );\n            }\n            return (\n                <FormattedMessage\n                    id={setting.label}\n                    defaultMessage={setting.label_default}\n                    values={setting.label_values}\n                />\n            );\n        }\n        return setting.label;\n    }\n\n    renderHelpText = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (this.props.schema.translate === false) {\n            return <span>{setting.help_text}</span>;\n        }\n\n        let helpText;\n        let isHTML;\n        let helpTextValues;\n        let helpTextDefault;\n        if (setting.disabled_help_text && this.isDisabled(setting)) {\n            helpText = setting.disabled_help_text;\n            isHTML = setting.disabled_help_text_html;\n            helpTextValues = setting.disabled_help_text_values;\n            helpTextDefault = setting.disabled_help_text_default;\n        } else {\n            helpText = setting.help_text;\n            isHTML = setting.help_text_html;\n            helpTextValues = setting.help_text_values;\n            helpTextDefault = setting.help_text_default;\n        }\n\n        if (typeof helpText === 'string') {\n            if (isHTML) {\n                return (\n                    <FormattedHTMLMessage\n                        id={helpText}\n                        values={helpTextValues}\n                        defaultMessage={helpTextDefault}\n                    />\n                );\n            }\n            return (\n                <FormattedMessage\n                    id={helpText}\n                    defaultMessage={helpTextDefault}\n                    values={helpTextValues}\n                />\n            );\n        }\n\n        return helpText;\n    }\n\n    renderLabel = (setting) => {\n        if (!this.props.schema) {\n            return '';\n        }\n\n        if (this.props.schema.translate === false) {\n            return setting.label;\n        }\n        return Utils.localizeMessage(setting.label, setting.label_default);\n    }\n\n    isDisabled = (setting) => {\n        if (!setting.isDisabled || typeof setting.isDisabled !== 'function') {\n            return false;\n        }\n\n        return setting.isDisabled(this.props.config, this.state, this.props.license);\n    }\n\n    isHidden = (setting) => {\n        if (!setting.isHidden || typeof setting.isHidden !== 'function') {\n            return false;\n        }\n\n        return setting.isHidden(this.props.config, this.state, this.props.license);\n    }\n\n    buildButtonSetting = (setting) => {\n        return (\n            <RequestButton\n                key={this.props.schema.id + '_text_' + setting.key}\n                requestAction={setting.action}\n                helpText={this.renderHelpText(setting)}\n                loadingText={Utils.localizeMessage(setting.loading, setting.loading_default)}\n                buttonText={<span>{this.renderLabel(setting)}</span>}\n                showSuccessMessage={Boolean(setting.success_message)}\n                includeDetailedError={true}\n                errorMessage={{\n                    id: setting.error_message,\n                    defaultMessage: setting.error_message_default,\n                }}\n                successMessage={setting.success_message && {\n                    id: setting.success_message,\n                    defaultMessage: setting.success_message_default,\n                }}\n            />\n        );\n    }\n\n    buildTextSetting = (setting) => {\n        let inputType = 'input';\n        if (setting.type === SettingsTypes.TYPE_NUMBER) {\n            inputType = 'number';\n        }\n        return (\n            <TextSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                type={inputType}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildColorSetting = (setting) => {\n        return (\n            <ColorSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBoolSetting = (setting) => {\n        return (\n            <BooleanSetting\n                key={this.props.schema.id + '_bool_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={(!this.isDisabled(setting) && this.state[setting.key]) || false}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildDropdownSetting = (setting) => {\n        const options = setting.options || [];\n        const values = options.map((o) => ({value: o.value, text: Utils.localizeMessage(o.display_name)}));\n\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_dropdown_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0].value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildLanguageSetting = (setting) => {\n        const locales = I18n.getAllLanguages();\n        const values = Object.keys(locales).map((l) => {\n            return {value: locales[l].value, text: locales[l].name, order: locales[l].order};\n        }).sort((a, b) => a.order - b.order);\n\n        if (setting.multiple) {\n            const noResultText = (\n                <FormattedMessage\n                    id={setting.no_result}\n                    defaultMessage={setting.no_result_default}\n                />\n            );\n            const notPresent = (\n                <FormattedMessage\n                    id={setting.not_present}\n                    defaultMessage={setting.not_present_default}\n                />\n            );\n            return (\n                <MultiSelectSetting\n                    key={this.props.schema.id + '_language_' + setting.key}\n                    id={setting.key}\n                    label={this.renderLabel(setting)}\n                    values={values}\n                    helpText={this.renderHelpText(setting)}\n                    selected={(this.state[setting.key] && this.state[setting.key].split(',')) || []}\n                    disabled={this.isDisabled(setting)}\n                    setByEnv={this.isSetByEnv(setting.key)}\n                    onChange={(changedId, value) => this.handleChange(changedId, value.join(','))}\n                    noResultText={noResultText}\n                    notPresent={notPresent}\n                />\n            );\n        }\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_language_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                values={values}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0].value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildRadioSetting = (setting) => {\n        const options = setting.options || [];\n        const values = options.map((o) => ({value: o.value, text: o.display_name}));\n\n        return (\n            <RadioSetting\n                key={this.props.schema.id + '_radio_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0]}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBannerSetting = (setting) => {\n        if (this.isDisabled(setting)) {\n            return null;\n        }\n        return (\n            <div\n                className={'banner ' + setting.banner_type}\n                key={this.props.schema.id + '_bool_' + setting.key}\n            >\n                <div className='banner__content'>\n                    <span>{this.renderBanner(setting)}</span>\n                </div>\n            </div>\n        );\n    }\n\n    buildGeneratedSetting = (setting) => {\n        return (\n            <GeneratedSetting\n                key={this.props.schema.id + '_generated_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                regenerateHelpText={setting.regenerate_help_text}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleGeneratedChange}\n            />\n        );\n    }\n\n    handleGeneratedChange = (id, s) => {\n        this.handleChange(id, s.replace('+', '-').replace('/', '_'));\n    }\n\n    buildUsernameSetting = (setting) => {\n        return (\n            <UserAutocompleteSetting\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default) || Utils.localizeMessage('search_bar.search', 'Search')}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildJobsTableSetting = (setting) => {\n        return (\n            <JobsTable\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                jobType={setting.job_type}\n                getExtraInfoText={setting.render_job}\n                disabled={this.isDisabled(setting)}\n                createJobButtonText={\n                    <FormattedMessage\n                        id={setting.label}\n                        defaultMessage={setting.label_default}\n                    />\n                }\n                createJobHelpText={\n                    <FormattedMessage\n                        id={setting.help_text}\n                        defaultMessage={setting.help_text_default}\n                    />\n                }\n            />\n        );\n    }\n\n    buildCustomSetting = (setting) => {\n        const CustomComponent = setting.component;\n        return (\n            <CustomComponent\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                id={setting.key}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const schema = this.props.schema;\n\n        if (!schema) {\n            return <LoadingScreen/>;\n        }\n\n        const settingsList = [];\n        if (schema.settings) {\n            schema.settings.forEach((setting) => {\n                if (this.buildSettingFunctions[setting.type] && !this.isHidden(setting)) {\n                    // This is a hack required as plugin settings are case insensitive\n                    let s = setting;\n                    if (this.isPlugin) {\n                        s = {...setting, key: setting.key.toLowerCase()};\n                    }\n                    settingsList.push(this.buildSettingFunctions[setting.type](s));\n                }\n            });\n        }\n\n        let header;\n        if (schema.header) {\n            header = (\n                <div\n                    className='banner'\n                    dangerouslySetInnerHTML={{__html: formatText(schema.header, {mentionHighlight: false})}}\n                />\n            );\n        }\n\n        let footer;\n        if (schema.footer) {\n            footer = (\n                <div\n                    className='banner'\n                    dangerouslySetInnerHTML={{__html: formatText(schema.footer, {mentionHighlight: false})}}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                {header}\n                {settingsList}\n                {footer}\n            </SettingsGroup>\n        );\n    }\n\n    render = () => {\n        const schema = this.props.schema;\n\n        if (schema && schema.component) {\n            const CustomComponent = schema.component;\n            return (<CustomComponent {...this.props}/>);\n        }\n        return AdminSettings.prototype.render.call(this);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport Chart from 'chart.js';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class LineChart extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Chart title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Chart width\n         */\n        width: PropTypes.number.isRequired,\n\n        /*\n         * Chart height\n         */\n        height: PropTypes.number.isRequired,\n\n        /*\n         * Chart data\n         */\n        data: PropTypes.object,\n    };\n\n    chart = null;\n    chartOptions = {\n        legend: {\n            display: false,\n        },\n    };\n\n    componentDidMount() {\n        this.initChart();\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) { // eslint-disable-line camelcase\n        const willHaveData = nextProps.data && nextProps.data.labels.length > 0;\n        const hasChart = Boolean(this.chart);\n\n        if (!willHaveData && hasChart) {\n            // Clean up the rendered chart before we render and destroy its context\n            this.chart.destroy();\n            this.chart = null;\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            return;\n        }\n\n        const hasData = this.props.data && this.props.data.labels.length > 0;\n        const hasChart = Boolean(this.chart);\n\n        if (hasData) {\n            // Update the rendered chart or initialize it as necessary\n            this.initChart(hasChart);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n    }\n\n    initChart = (update) => {\n        if (!this.refs.canvas) {\n            return;\n        }\n\n        var el = ReactDOM.findDOMNode(this.refs.canvas);\n        var ctx = el.getContext('2d');\n        this.chart = new Chart(ctx, {type: 'line', data: this.props.data, options: this.chartOptions || {}}); // eslint-disable-line new-cap\n\n        if (update) {\n            this.chart.update();\n        }\n    }\n\n    render() {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else if (this.props.data.labels.length === 0) {\n            content = (\n                <h5>\n                    <FormattedMessage\n                        id='analytics.chart.meaningful'\n                        defaultMessage='Not enough data for a meaningful representation.'\n                    />\n                </h5>\n            );\n        } else {\n            content = (\n                <canvas\n                    ref='canvas'\n                    width={this.props.width}\n                    height={this.props.height}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='total-count by-day'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatisticCount extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Statistic title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Statistic icon\n         */\n        icon: PropTypes.string.isRequired,\n\n        /*\n         * Data count\n         */\n        count: PropTypes.number,\n    }\n\n    render() {\n        const loading = (\n            <FormattedMessage\n                id='analytics.chart.loading'\n                defaultMessage='Loading...'\n            />\n        );\n\n        return (\n            <div className='col-md-3 col-sm-6'>\n                <div className='total-count'>\n                    <div className='title'>\n                        {this.props.title}\n                        <i className={'fa ' + this.props.icon}/>\n                    </div>\n                    <div className='content'>{isNaN(this.props.count) ? loading : this.props.count}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport * as Utils from 'utils/utils.jsx';\n\nexport function formatChannelDoughtnutData(totalPublic, totalPrivate) {\n    const channelTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.publicChannels', 'Public Channels'),\n            Utils.localizeMessage('analytics.system.privateGroups', 'Private Channels'),\n        ],\n        datasets: [{\n            data: [totalPublic, totalPrivate],\n            backgroundColor: ['#46BFBD', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FFC870'],\n        }],\n    };\n\n    return channelTypeData;\n}\n\nexport function formatPostDoughtnutData(filePosts, hashtagPosts, totalPosts) {\n    const postTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.totalFilePosts', 'Posts with Files'),\n            Utils.localizeMessage('analytics.system.totalHashtagPosts', 'Posts with Hashtags'),\n            Utils.localizeMessage('analytics.system.textPosts', 'Posts with Text-only'),\n        ],\n        datasets: [{\n            data: [filePosts, hashtagPosts, (totalPosts - filePosts - hashtagPosts)],\n            backgroundColor: ['#46BFBD', '#F7464A', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FF5A5E', '#FFC870'],\n        }],\n    };\n\n    return postTypeData;\n}\n\nexport function formatPostsPerDayData(data) {\n    var chartData = {\n        labels: [],\n        datasets: [{\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [],\n        }],\n    };\n\n    for (var index in data) {\n        if (data[index]) {\n            var row = data[index];\n            chartData.labels.push(row.name);\n            chartData.datasets[0].data.push(row.value);\n        }\n    }\n\n    return chartData;\n}\n\nexport function formatUsersWithPostsPerDayData(data) {\n    var chartData = {\n        labels: [],\n        datasets: [{\n            label: '',\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [],\n        }],\n    };\n\n    for (var index in data) {\n        if (data[index]) {\n            var row = data[index];\n            chartData.labels.push(row.name);\n            chartData.datasets[0].data.push(row.value);\n        }\n    }\n\n    return chartData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class AccordionToggleIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='30px'\n                    height='30px'\n                    viewBox='0 0 30 30'\n                >\n                    <g\n                        id='Developer-Export'\n                        stroke='none'\n                        strokeWidth='1'\n                        fill='none'\n                        fillRule='evenodd'\n                    >\n                        <g\n                            transform='translate(-995.000000, -1372.000000)'\n                            id='All-Team-Members'\n                        >\n                            <g transform='translate(245.000000, 698.000000)'>\n                                <g\n                                    id='Team-Administrators'\n                                    transform='translate(0.000000, 651.000000)'\n                                >\n                                    <g id='accordion-header'>\n                                        <g\n                                            id='accordion---expanded'\n                                            transform='translate(750.000000, 23.000000)'\n                                        >\n                                            <path\n                                                d='M23.1484532,13.3124932 C23.3437659,13.1171805 23.3437659,12.7968676 23.1484532,12.6015549 L21.8515766,11.3124908 C21.6562639,11.1171781 21.3437635,11.1171781 21.1484508,11.3124908 L15.0000083,17.4609333 L8.8515659,11.3124908 C8.65625317,11.1171781 8.34375279,11.1171781 8.14844006,11.3124908 L6.85156352,12.6015549 C6.65625078,12.7968676 6.65625078,13.1171805 6.85156352,13.3124932 L14.6484454,21.1015626 C14.8437582,21.2968754 15.1562585,21.2968754 15.3515713,21.1015626 L23.1484532,13.3124932 Z'\n                                                id=''\n                                                fill='#979797'\n                                            />\n                                            <circle\n                                                id='Oval-2'\n                                                stroke='#989898'\n                                                strokeWidth='2'\n                                                cx='15'\n                                                cy='15'\n                                                r='14'\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport PermissionGroup from './permission_group.jsx';\n\nimport EditPostTimeLimitButton from './edit_post_time_limit_button';\nimport EditPostTimeLimitModal from './edit_post_time_limit_modal';\n\nconst GROUPS = [\n    {\n        id: 'teams',\n        permissions: [\n            {\n                id: 'send_invites',\n                combined: true,\n                permissions: [\n                    'invite_user',\n                    'get_public_link',\n                    'add_user_to_team',\n                ],\n            },\n            'create_team',\n        ],\n    },\n    {\n        id: 'public_channel',\n        permissions: [\n            'create_public_channel',\n            'manage_public_channel_properties',\n            'manage_public_channel_members',\n            'delete_public_channel',\n        ],\n    },\n    {\n        id: 'private_channel',\n        permissions: [\n            'create_private_channel',\n            'manage_private_channel_properties',\n            'manage_private_channel_members',\n            'delete_private_channel',\n        ],\n    },\n    {\n        id: 'posts',\n        permissions: [\n            'edit_post',\n            {\n                id: 'delete_posts',\n                permissions: [\n                    'delete_post',\n                    'delete_others_posts',\n                ],\n            },\n            {\n                id: 'reactions',\n                combined: true,\n                permissions: [\n                    'add_reaction',\n                    'remove_reaction',\n                ],\n            },\n        ],\n    },\n    {\n        id: 'integrations',\n        permissions: [\n            'manage_webhooks',\n            'manage_oauth',\n            'manage_slash_commands',\n            'manage_emojis',\n        ],\n    },\n];\n\nexport default class PermissionsTree extends React.Component {\n    static propTypes = {\n        scope: PropTypes.string.isRequired,\n        role: PropTypes.object.isRequired,\n        onToggle: PropTypes.func.isRequired,\n        parentRole: PropTypes.object,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        readOnly: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        role: {\n            permissions: [],\n        },\n    };\n\n    onClickEditPostTimeLimitButton = () => {\n        this.setState({editTimeLimitModalIsVisible: true});\n    }\n\n    constructor() {\n        super();\n        this.state = {\n            editTimeLimitModalIsVisible: false,\n        };\n        this.ADDITIONAL_VALUES = {\n            edit_post: {\n                editTimeLimitButton: <EditPostTimeLimitButton onClick={() => this.onClickEditPostTimeLimitButton()}/>,\n            },\n        };\n    }\n\n    toggleGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onToggle(this.props.role.name, ids);\n    }\n\n    render = () => {\n        return (\n            <div className='permissions-tree'>\n                <div className='permissions-tree--header'>\n                    <div className='permission-name'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.permission'\n                            defaultMessage='Permission'\n                        />\n                    </div>\n                    <div className='permission-description'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.description'\n                            defaultMessage='Description'\n                        />\n                    </div>\n                </div>\n                <div className='permissions-tree--body'>\n                    <PermissionGroup\n                        key='all'\n                        id='all'\n                        uniqId={this.props.role.name}\n                        selected={this.props.selected}\n                        selectRow={this.props.selectRow}\n                        readOnly={this.props.readOnly}\n                        permissions={GROUPS}\n                        additionalValues={this.ADDITIONAL_VALUES}\n                        role={this.props.role}\n                        parentRole={this.props.parentRole}\n                        scope={this.props.scope}\n                        combined={false}\n                        onChange={this.toggleGroup}\n                        root={true}\n                    />\n                </div>\n                <EditPostTimeLimitModal\n                    onClose={() => this.setState({editTimeLimitModalIsVisible: false})}\n                    show={this.state.editTimeLimitModalIsVisible}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CheckboxCheckedIcon from 'components/svg/checkbox_checked_icon.jsx';\nimport CheckboxPartialIcon from 'components/svg/checkbox_partial_icon.jsx';\n\nexport default class PermissionCheckbox extends React.PureComponent {\n    static propTypes = {\n        value: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        value: '',\n    }\n\n    render() {\n        const {value} = this.props;\n        let icon = null;\n        let extraClass = '';\n        if (value === 'checked') {\n            icon = (<CheckboxCheckedIcon/>);\n            extraClass = 'checked';\n        } else if (value === 'intermediate') {\n            icon = (<CheckboxPartialIcon/>);\n            extraClass = 'intermediate';\n        }\n        return (\n            <div className={'permission-check ' + extraClass}>\n                {icon}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedHTMLMessage, injectIntl, intlShape} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {generateId} from 'utils/utils.jsx';\nimport Constants from 'utils/constants.jsx';\n\nexport class PermissionDescription extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        id: PropTypes.string.isRequired,\n        rowType: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        selectRow: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.id = generateId();\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    closeTooltip = () => {\n        this.setState({open: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('span');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({open: isElipsis});\n    }\n\n    parentPermissionClicked = (e) => {\n        const isInheritLink = e.target.parentElement.parentElement.className === 'inherit-link-wrapper';\n        if (e.target.parentElement.className !== 'permission-description' && !isInheritLink) {\n            e.stopPropagation();\n        } else if (isInheritLink) {\n            this.props.selectRow(this.props.id);\n            e.stopPropagation();\n        }\n    }\n\n    render() {\n        const {inherited, id, rowType} = this.props;\n\n        let content = '';\n        if (inherited) {\n            content = (\n                <span className='inherit-link-wrapper'>\n                    <FormattedHTMLMessage\n                        id='admin.permissions.inherited_from'\n                        values={{\n                            name: this.props.intl.formatMessage({\n                                id: 'admin.permissions.roles.' + inherited.name + '.name',\n                                defaultMessage: inherited.display_name,\n                            }),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            content = (\n                <FormattedMessage\n                    id={'admin.permissions.' + rowType + '.' + id + '.description'}\n                    values={this.props.additionalValues}\n                />\n            );\n        }\n        let tooltip = (\n            <Overlay\n                show={this.state.open}\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                target={this.refs.content}\n            >\n                <Tooltip id={this.id}>\n                    {content}\n                </Tooltip>\n            </Overlay>\n        );\n        if (content.props.values && Object.keys(content.props.values).length > 0) {\n            tooltip = null;\n        }\n        content = (\n            <span\n                className='permission-description'\n                onClick={this.parentPermissionClicked}\n                ref='content'\n                onMouseOver={this.openTooltip}\n                onMouseOut={this.closeTooltip}\n            >\n                {content}\n                {tooltip}\n            </span>\n        );\n\n        return content;\n    }\n}\n\nexport default injectIntl(PermissionDescription);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {imageURLForTeam} from 'utils/utils.jsx';\n\nexport default class TeamInList extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n    }\n\n    render() {\n        const {team} = this.props;\n        const teamIconUrl = imageURLForTeam(team);\n        let icon = null;\n        if (teamIconUrl) {\n            icon = (\n                <div\n                    className='team-btn__image'\n                    style={{backgroundImage: `url('${teamIconUrl}')`}}\n                />\n            );\n        } else {\n            icon = (\n                <div className='team-btn__initials'>\n                    {team.display_name ? team.display_name.replace(/\\s/g, '').substring(0, 2) : '??'}\n                </div>\n            );\n        }\n        return (\n            <div className='team-info-block'>\n                <span className='icon'>{icon}</span>\n                <div className='team-data'>\n                    <div className='title'>{team.display_name}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig, getEnvironmentConfig} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\nimport {withRouter} from 'react-router-dom';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {isCurrentUserSystemAdmin} from 'mattermost-redux/selectors/entities/users';\n\nimport {setNavigationBlocked, deferNavigation, cancelNavigation, confirmNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked, showNavigationPrompt} from 'selectors/views/admin';\n\nimport AdminConsole from './admin_console.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        config: Selectors.getConfig(state),\n        environmentConfig: Selectors.getEnvironmentConfig(state),\n        license: getLicense(state),\n        navigationBlocked: getNavigationBlocked(state),\n        showNavigationPrompt: showNavigationPrompt(state),\n        isCurrentUserSystemAdmin: isCurrentUserSystemAdmin(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getConfig,\n            getEnvironmentConfig,\n            setNavigationBlocked,\n            deferNavigation,\n            cancelNavigation,\n            confirmNavigation,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminConsole));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport 'bootstrap';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport SystemNotice from 'components/system_notice';\nimport {reloadIfServerVersionChanged} from 'actions/global_actions.jsx';\nimport ClientVersionsSettings from 'components/admin_console/client_versions_settings.jsx';\nimport ClusterSettings from 'components/admin_console/cluster_settings.jsx';\nimport CustomBrandSettings from 'components/admin_console/custom_brand_settings.jsx';\nimport CustomEmojiSettings from 'components/admin_console/custom_emoji_settings.jsx';\nimport CustomGifSettings from 'components/admin_console/custom_gif_settings.jsx';\nimport DataRetentionSettings from 'components/admin_console/data_retention_settings.jsx';\nimport DatabaseSettings from 'components/admin_console/database_settings.jsx';\nimport ElasticsearchSettings from 'components/admin_console/elasticsearch_settings.jsx';\nimport EmailSettings from 'components/admin_console/email_settings.jsx';\nimport GitLabSettings from 'components/admin_console/gitlab_settings.jsx';\nimport MessageExportSettings from 'components/admin_console/message_export_settings';\nimport OAuthSettings from 'components/admin_console/oauth_settings.jsx';\nimport PasswordSettings from 'components/admin_console/password_settings.jsx';\nimport PluginManagement from 'components/admin_console/plugin_management';\nimport CustomPluginSettings from 'components/admin_console/custom_plugin_settings';\nimport CustomIntegrationSettings from 'components/admin_console/custom_integrations_settings';\nimport UsersAndTeamsSettings from 'components/admin_console/users_and_teams_settings';\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings';\nimport PushSettings from 'components/admin_console/push_settings.jsx';\nimport SamlSettings from 'components/admin_console/saml_settings.jsx';\nimport SessionSettings from 'components/admin_console/session_settings.jsx';\nimport DiscardChangesModal from 'components/discard_changes_modal.jsx';\n\nimport AdminSidebar from './admin_sidebar';\nimport AdminDefinition from './admin_definition';\n\nconst SCRoute = ({component: Component, extraProps, ...rest}) => ( //eslint-disable-line react/prop-types\n    <Route\n        {...rest}\n        render={(props) => (\n            <Component\n                {...extraProps}\n                {...props}\n            />\n        )}\n    />\n);\n\nexport default class AdminConsole extends React.Component {\n    static propTypes = {\n\n        /*\n         * Object representing the config file\n         */\n        config: PropTypes.object.isRequired,\n\n        /*\n         * Object containing config fields that have been set through environment variables\n         */\n        environmentConfig: PropTypes.object,\n\n        /*\n         * Object representing the license\n         */\n        license: PropTypes.object.isRequired,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n\n        /*\n         * String whether to show prompt to navigate away\n         * from unsaved changes\n         */\n        showNavigationPrompt: PropTypes.bool.isRequired,\n\n        isCurrentUserSystemAdmin: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get the config file\n             */\n            getConfig: PropTypes.func.isRequired,\n\n            /*\n             * Function to get the environment config\n             */\n            getEnvironmentConfig: PropTypes.func.isRequired,\n\n            /*\n             * Function to block navigation when there are unsaved changes\n             */\n            setNavigationBlocked: PropTypes.func.isRequired,\n\n            /*\n             * Function to confirm navigation\n             */\n            confirmNavigation: PropTypes.func.isRequired,\n\n            /*\n             * Function to cancel navigation away from unsaved changes\n             */\n            cancelNavigation: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.props.actions.getConfig();\n        this.props.actions.getEnvironmentConfig();\n        reloadIfServerVersionChanged();\n    }\n\n    render() {\n        const {\n            license,\n            config,\n            environmentConfig,\n            showNavigationPrompt,\n        } = this.props;\n        const {setNavigationBlocked, cancelNavigation, confirmNavigation} = this.props.actions;\n\n        if (!this.props.isCurrentUserSystemAdmin) {\n            return (\n                <Redirect to='/'/>\n            );\n        }\n\n        if (Object.keys(config).length === 0) {\n            return <div/>;\n        }\n        if (config && Object.keys(config).length === 0 && config.constructor === 'Object') {\n            return (\n                <div className='admin-console__wrapper'>\n                    <AnnouncementBar/>\n                    <div className='admin-console'/>\n                </div>\n            );\n        }\n\n        const discardChangesModal = (\n            <DiscardChangesModal\n                show={showNavigationPrompt}\n                onConfirm={confirmNavigation}\n                onCancel={cancelNavigation}\n            />\n        );\n\n        // not every page in the system console will need the license and config, but the vast majority will\n        const extraProps = {\n            license,\n            config,\n            environmentConfig,\n            setNavigationBlocked,\n        };\n\n        return (\n            <div className='admin-console__wrapper'>\n                <AnnouncementBar/>\n                <SystemNotice/>\n                <AdminSidebar/>\n                <div className='admin-console'>\n                    <Switch>\n                        <SCRoute\n                            path={`${this.props.match.url}/system_analytics`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.system_analytics.schema,\n                            }}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/general`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/configuration`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.configuration.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/localization`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.localization.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/users_and_teams`}\n                                        component={UsersAndTeamsSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/privacy`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.privacy.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/compliance`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.compliance.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/logging`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.logging.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/configuration`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/permissions`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/schemes`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.schemes.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/system-scheme`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.systemScheme.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/team-override-scheme/:scheme_id`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.teamScheme.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/team-override-scheme`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.teamScheme.schema,\n                                        }}\n                                    />\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/authentication`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/authentication_email`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.email.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/gitlab`}\n                                        component={GitLabSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/oauth`}\n                                        component={OAuthSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/ldap`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.ldap.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/saml`}\n                                        component={SamlSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/mfa`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.mfa.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/authentication_email`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/security`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/sign_up`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.signup.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/password`}\n                                        component={PasswordSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/public_links`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.public_links.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/sessions`}\n                                        component={SessionSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/connections`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.connections.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/client_versions`}\n                                        component={ClientVersionsSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <Redirect to={`${props.match.url}/sign_up`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/notifications`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/notifications_email`}\n                                        component={EmailSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/push`}\n                                        component={PushSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <Redirect to={`${props.match.url}/notifications_email`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/integrations`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/custom`}\n                                        component={CustomIntegrationSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/webrtc`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.integrations.webrtc.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/external`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.integrations.external.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/custom`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/plugins`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/configuration`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.plugins.configuration.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/management`}\n                                        component={PluginManagement}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/custom/:plugin_id`}\n                                        component={CustomPluginSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <Redirect to={`${props.match.url}/configuration`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/files`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/storage`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.files.storage.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/storage`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/customization`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/custom_brand`}\n                                        component={CustomBrandSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/announcement`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.announcement.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/emoji`}\n                                        component={CustomEmojiSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/gif`}\n                                        component={CustomGifSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/posts`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.posts.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/legal_and_support`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.legal_and_support.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/native_app_links`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.native_app_links.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/custom_brand`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/compliance`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/data_retention`}\n                                        component={DataRetentionSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/message_export`}\n                                        component={MessageExportSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <Redirect to={`${props.match.url}/data_retention`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/advanced`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/rate`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.advanced.rate.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/database`}\n                                        component={DatabaseSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/elasticsearch`}\n                                        component={ElasticsearchSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/developer`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.advanced.developer.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/cluster`}\n                                        component={ClusterSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/metrics`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.advanced.metrics.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/rate`}/>\n                                </Switch>\n                            )}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/users`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.system_users.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/team_analytics`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.team_analytics.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/license`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.other.license.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/audits`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.other.audits.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/logs`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.server_logs.schema,\n                            }}\n                        />\n                        <Redirect to={`${this.props.match.url}/system_analytics`}/>\n                    </Switch>\n                </div>\n                {discardChangesModal}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class ClientVersionsSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ClientRequirements.AndroidLatestVersion = this.state.androidLatestVersion;\n        config.ClientRequirements.AndroidMinVersion = this.state.androidMinVersion;\n        config.ClientRequirements.DesktopLatestVersion = this.state.desktopLatestVersion;\n        config.ClientRequirements.DesktopMinVersion = this.state.desktopMinVersion;\n        config.ClientRequirements.IosLatestVersion = this.state.iosLatestVersion;\n        config.ClientRequirements.IosMinVersion = this.state.iosMinVersion;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            androidLatestVersion: config.ClientRequirements.AndroidLatestVersion,\n            androidMinVersion: config.ClientRequirements.AndroidMinVersion,\n            desktopLatestVersion: config.ClientRequirements.DesktopLatestVersion,\n            desktopMinVersion: config.ClientRequirements.DesktopMinVersion,\n            iosLatestVersion: config.ClientRequirements.IosLatestVersion,\n            iosMinVersion: config.ClientRequirements.IosMinVersion,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <h3>\n                <FormattedMessage\n                    id='admin.security.client_versions'\n                    defaultMessage='Client Versions'\n                />\n            </h3>\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <TextSetting\n                    id='androidLatestVersion'\n                    label={\n                        <FormattedMessage\n                            id='admin.client_versions.androidLatestVersion'\n                            defaultMessage='Latest Android Version'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.client_versions.androidLatestVersion', 'X.X.X')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.client_versions.androidLatestVersionHelp'\n                            defaultMessage='The latest released Android version'\n                        />\n                    }\n                    value={this.state.androidLatestVersion}\n                    onChange={this.handleChange}\n                />\n                <TextSetting\n                    id='androidMinVersion'\n                    label={\n                        <FormattedMessage\n                            id='admin.client_versions.androidMinVersion'\n                            defaultMessage='Minimum Android Version'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.client_versions.androidMinVersion', 'X.X.X')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.client_versions.androidMinVersionHelp'\n                            defaultMessage='The minimum compliant Android version'\n                        />\n                    }\n                    value={this.state.androidMinVersion}\n                    onChange={this.handleChange}\n                />\n                <TextSetting\n                    id='desktopLatestVersion'\n                    label={\n                        <FormattedMessage\n                            id='admin.client_versions.desktopLatestVersion'\n                            defaultMessage='Latest Desktop Version'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.client_versions.desktopLatestVersion', 'X.X.X')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.client_versions.desktopLatestVersionHelp'\n                            defaultMessage='The latest released Desktop version'\n                        />\n                    }\n                    value={this.state.desktopLatestVersion}\n                    onChange={this.handleChange}\n                />\n                <TextSetting\n                    id='desktopMinVersion'\n                    label={\n                        <FormattedMessage\n                            id='admin.client_versions.desktopMinVersion'\n                            defaultMessage='Minimum Desktop Version'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.client_versions.desktopMinVersion', 'X.X.X')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.client_versions.desktopMinVersionHelp'\n                            defaultMessage='The minimum compliant Desktop version'\n                        />\n                    }\n                    value={this.state.desktopMinVersion}\n                    onChange={this.handleChange}\n                />\n                <TextSetting\n                    id='iosLatestVersion'\n                    label={\n                        <FormattedMessage\n                            id='admin.client_versions.iosLatestVersion'\n                            defaultMessage='Latest iOS Version'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.client_versions.iosLatestVersion', 'X.X.X')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.client_versions.iosLatestVersionHelp'\n                            defaultMessage='The latest released iOS version'\n                        />\n                    }\n                    value={this.state.iosLatestVersion}\n                    onChange={this.handleChange}\n                />\n                <TextSetting\n                    id='iosMinVersion'\n                    label={\n                        <FormattedMessage\n                            id='admin.client_versions.iosMinVersion'\n                            defaultMessage='Minimum iOS Version'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.client_versions.iosMinVersion', 'X.X.X')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.client_versions.iosMinVersionHelp'\n                            defaultMessage='The minimum compliant iOS version'\n                        />\n                    }\n                    value={this.state.iosMinVersion}\n                    onChange={this.handleChange}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport ClusterTableContainer from './cluster_table_container.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class ClusterSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n        this.overrideHandleChange = this.overrideHandleChange.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ClusterSettings.Enable = this.state.Enable;\n        config.ClusterSettings.ClusterName = this.state.ClusterName;\n        config.ClusterSettings.OverrideHostname = this.state.OverrideHostname;\n        config.ClusterSettings.UseIpAddress = this.state.UseIpAddress;\n        config.ClusterSettings.UseExperimentalGossip = this.state.UseExperimentalGossip;\n        config.ClusterSettings.ReadOnlyConfig = this.state.ReadOnlyConfig;\n        config.ClusterSettings.GossipPort = this.parseIntNonZero(this.state.GossipPort, 8074);\n        config.ClusterSettings.StreamingPort = this.parseIntNonZero(this.state.StreamingPort, 8075);\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const settings = config.ClusterSettings;\n\n        return {\n            Enable: settings.Enable,\n            ClusterName: settings.ClusterName,\n            OverrideHostname: settings.OverrideHostname,\n            UseIpAddress: settings.UseIpAddress,\n            UseExperimentalGossip: settings.UseExperimentalGossip,\n            ReadOnlyConfig: settings.ReadOnlyConfig,\n            GossipPort: settings.GossipPort,\n            StreamingPort: settings.StreamingPort,\n            showWarning: false,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.advance.cluster'\n                defaultMessage='High Availability'\n            />\n        );\n    }\n\n    overrideHandleChange(id, value) {\n        this.setState({\n            showWarning: true,\n        });\n\n        this.handleChange(id, value);\n    }\n\n    renderSettings() {\n        const licenseEnabled = this.props.license.IsLicensed === 'true' && this.props.license.Cluster === 'true';\n        if (!licenseEnabled) {\n            return null;\n        }\n\n        var configLoadedFromCluster = null;\n\n        if (Client4.clusterId) {\n            configLoadedFromCluster = (\n                <div\n                    style={style.configLoadedFromCluster}\n                    className='alert alert-warning'\n                >\n                    <i\n                        className='fa fa-warning'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedHTMLMessage\n                        id='admin.cluster.loadedFrom'\n                        defaultMessage='This configuration file was loaded from Node ID {clusterId}. Please see the Troubleshooting Guide in our <a href=\"http://docs.mattermost.com/deployment/cluster.html\" target=\"_blank\">documentation</a> if you are accessing the System Console through a load balancer and experiencing issues.'\n                        values={{\n                            clusterId: Client4.clusterId,\n                        }}\n                    />\n                </div>\n            );\n        }\n\n        var warning = null;\n        if (this.state.showWarning) {\n            warning = (\n                <div\n                    style={style.warning}\n                    className='alert alert-warning'\n                >\n                    <i\n                        className='fa fa-warning'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedHTMLMessage\n                        id='admin.cluster.should_not_change'\n                        defaultMessage='WARNING: These settings may not sync with the other servers in the cluster. High Availability inter-node communication will not start until you modify the config.json to be identical on all servers and restart Mattermost. Please see the <a href=\"http://docs.mattermost.com/deployment/cluster.html\" target=\"_blank\">documentation</a> on how to add or remove a server from the cluster. If you are accessing the System Console through a load balancer and experiencing issues, please see the Troubleshooting Guide in our <a href=\"http://docs.mattermost.com/deployment/cluster.html\" target=\"_blank\">documentation</a>.'\n                    />\n                </div>\n            );\n        }\n\n        var clusterTableContainer = null;\n        if (this.state.Enable) {\n            clusterTableContainer = (<ClusterTableContainer/>);\n        }\n\n        return (\n            <SettingsGroup>\n                {configLoadedFromCluster}\n                {clusterTableContainer}\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.cluster.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect. When High Availability mode is enabled, the System Console is set to read-only and can only be changed from the configuration file unless ReadOnlyConfig is disabled in the configuration file.'\n                    />\n                </div>\n                {warning}\n                <BooleanSetting\n                    id='Enable'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.enableTitle'\n                            defaultMessage='Enable High Availability Mode:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.enableDescription'\n                            defaultMessage='When true, Mattermost will run in High Availability mode. Please see <a href=\"http://docs.mattermost.com/deployment/cluster.html\" target=\"_blank\">documentation</a> to learn more about configuring High Availability for Mattermost.'\n                        />\n                    }\n                    value={this.state.Enable}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.Enable')}\n                />\n                <TextSetting\n                    id='ClusterName'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterName'\n                            defaultMessage='Cluster Name:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.ClusterNameEx', 'E.g.: \"Production\" or \"Staging\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterNameDesc'\n                            defaultMessage='The cluster to join by name.  Only nodes with the same cluster name will join together.  This is to support Blue-Green deployments or staging pointing to the same database.'\n                        />\n                    }\n                    value={this.state.ClusterName}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.ClusterName')}\n                />\n                <TextSetting\n                    id='OverrideHostname'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostname'\n                            defaultMessage='Override Hostname:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.OverrideHostnameEx', 'E.g.: \"app-server-01\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostnameDesc'\n                            defaultMessage='The default value of <blank> will attempt to get the Hostname from the OS or use the IP Address.  You can override the hostname of this server with this property.  It is not recommended to override the Hostname unless needed. This property can also be set to a specific IP Address if needed.'\n                        />\n                    }\n                    value={this.state.OverrideHostname}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.OverrideHostname')}\n                />\n                <BooleanSetting\n                    id='UseIpAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.UseIpAddress'\n                            defaultMessage='Use IP Address:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.UseIpAddressDesc'\n                            defaultMessage='When true, the cluster will attempt to communicate via IP Address vs using the hostname.'\n                        />\n                    }\n                    value={this.state.UseIpAddress}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.UseIpAddress')}\n                />\n                <BooleanSetting\n                    id='UseExperimentalGossip'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.UseExperimentalGossip'\n                            defaultMessage='Use Experimental Gossip:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.UseExperimentalGossipDesc'\n                            defaultMessage='When true, the server will attempt to communicate via the gossip protocol over the gossip port.  When false the server will attempt to communicate over the streaming port. When false the gossip port and protocol are still used to determine cluster health.'\n                        />\n                    }\n                    value={this.state.UseExperimentalGossip}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.UseExperimentalGossip')}\n                />\n                <BooleanSetting\n                    id='ReadOnlyConfig'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.ReadOnlyConfig'\n                            defaultMessage='Read Only Config:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.ReadOnlyConfigDesc'\n                            defaultMessage='When true, the server will reject changes made to the configuration file from the system console. When running in production it is recommened to set this to true.'\n                        />\n                    }\n                    value={this.state.ReadOnlyConfig}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.ReadOnlyConfig')}\n                />\n                <TextSetting\n                    id='GossipPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPort'\n                            defaultMessage='Gossip Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.GossipPortEx', 'E.g.: \"8074\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPortDesc'\n                            defaultMessage='The port used for the gossip protocol.  Both UDP and TCP should be allowed on this port.'\n                        />\n                    }\n                    value={this.state.GossipPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.GossipPort')}\n                />\n                <TextSetting\n                    id='StreamingPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPort'\n                            defaultMessage='Streaming Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.StreamingPortEx', 'E.g.: \"8075\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPortDesc'\n                            defaultMessage='The port used for streaming data between servers.'\n                        />\n                    }\n                    value={this.state.StreamingPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.StreamingPort')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n\nconst style = {\n    configLoadedFromCluster: {marginBottom: 10},\n    warning: {marginBottom: 10},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getClusterStatus} from 'actions/admin_actions.jsx';\nimport LoadingScreen from '../loading_screen.jsx';\n\nimport ClusterTable from './cluster_table.jsx';\n\nexport default class ClusterTableContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.load = this.load.bind(this);\n        this.reload = this.reload.bind(this);\n\n        this.interval = null;\n\n        this.state = {\n            clusterInfos: null,\n        };\n    }\n\n    load() {\n        getClusterStatus(\n            (data) => {\n                this.setState({\n                    clusterInfos: data,\n                });\n            },\n            null\n        );\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.load();\n\n        // reload the cluster status every 15 seconds\n        this.interval = setInterval(this.load, 15000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    reload(e) {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            clusterInfos: null,\n        });\n\n        this.load();\n    }\n\n    render() {\n        if (this.state.clusterInfos == null) {\n            return (<LoadingScreen/>);\n        }\n\n        return (\n            <ClusterTable\n                clusterInfos={this.state.clusterInfos}\n                reload={this.reload}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport statusGreen from 'images/status_green.png';\nimport statusYellow from 'images/status_yellow.png';\n\nexport default class ClusterTable extends React.Component {\n    static propTypes = {\n        clusterInfos: PropTypes.array.isRequired,\n        reload: PropTypes.func.isRequired,\n    }\n\n    render() {\n        var versionMismatch = (\n            <img\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var configMismatch = (\n            <img\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var version = '';\n        var configHash = '';\n        var singleItem = false;\n\n        if (this.props.clusterInfos.length) {\n            version = this.props.clusterInfos[0].version;\n            configHash = this.props.clusterInfos[0].config_hash;\n            singleItem = this.props.clusterInfos.length === 1;\n        }\n\n        this.props.clusterInfos.map((clusterInfo) => {\n            if (clusterInfo.version !== version) {\n                versionMismatch = (\n                    <img\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            if (clusterInfo.config_hash !== configHash) {\n                configMismatch = (\n                    <img\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            return null;\n        });\n\n        var items = this.props.clusterInfos.map((clusterInfo) => {\n            var status = null;\n\n            if (clusterInfo.hostname === '') {\n                clusterInfo.hostname = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.version === '') {\n                clusterInfo.version = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.config_hash === '') {\n                clusterInfo.config_hash = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (singleItem) {\n                status = (\n                    <img\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            } else {\n                status = (\n                    <img\n                        className='cluster-status'\n                        src={statusGreen}\n                    />\n                );\n            }\n\n            return (\n                <tr key={clusterInfo.ipaddress}>\n                    <td style={style.clusterCell}>{status}</td>\n                    <td style={style.clusterCell}>{clusterInfo.hostname}</td>\n                    <td style={style.clusterCell}>{versionMismatch} {clusterInfo.version}</td>\n                    <td style={style.clusterCell}><div className='config-hash'>{configMismatch} {clusterInfo.config_hash}</div></td>\n                    <td style={style.clusterCell}>{clusterInfo.ipaddress}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div\n                className='cluster-panel__table'\n                style={style.clusterTable}\n            >\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        onClick={this.props.reload}\n                    >\n                        <i\n                            className='fa fa-refresh'\n                            title={Utils.localizeMessage('generic_icons.reload', 'Reload Icon')}\n                        />\n                        <FormattedMessage\n                            id='admin.cluster.status_table.reload'\n                            defaultMessage=' Reload Cluster Status'\n                        />\n                    </button>\n                </div>\n                <table className='table'>\n                    <thead>\n                        <tr>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.status'\n                                    defaultMessage='Status'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.hostname'\n                                    defaultMessage='Hostname'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.version'\n                                    defaultMessage='Version'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.config_hash'\n                                    defaultMessage='Config File MD5'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.url'\n                                    defaultMessage='Gossip Address'\n                                />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    clusterTable: {margin: 10, marginBottom: 30},\n    clusterCell: {whiteSpace: 'nowrap'},\n};\n","module.exports = __webpack_public_path__ + \"files/f2f389817448b841c0d55028e053915e.png\";","module.exports = __webpack_public_path__ + \"files/cb5754883ea95a8681ed2beec10b8a63.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport BrandImageSetting from './brand_image_setting/brand_image_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class CustomBrandSettings extends AdminSettings {\n    getConfigFromState(config) {\n        config.TeamSettings.SiteName = this.state.siteName;\n        config.TeamSettings.CustomDescriptionText = this.state.customDescriptionText;\n        config.TeamSettings.EnableCustomBrand = this.state.enableCustomBrand;\n        config.TeamSettings.CustomBrandText = this.state.customBrandText;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            siteName: config.TeamSettings.SiteName,\n            enableCustomBrand: config.TeamSettings.EnableCustomBrand,\n            customBrandText: config.TeamSettings.CustomBrandText,\n            customDescriptionText: config.TeamSettings.CustomDescriptionText,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.customization.customBrand'\n                defaultMessage='Custom Branding'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <TextSetting\n                    id='siteName'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.siteNameTitle'\n                            defaultMessage='Site Name:'\n                        />\n                    }\n                    maxLength={Constants.MAX_SITENAME_LENGTH}\n                    placeholder={Utils.localizeMessage('admin.team.siteNameExample', 'E.g.: \"Mattermost\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.siteNameDescription'\n                            defaultMessage='Name of service shown in login screens and UI.'\n                        />\n                    }\n                    value={this.state.siteName}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSettings.SiteName')}\n                />\n                <TextSetting\n                    key='customDescriptionText'\n                    id='customDescriptionText'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.brandDescriptionTitle'\n                            defaultMessage='Site Description: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.brandDescriptionHelp'\n                            defaultMessage='Description of service shown in login screens and UI. When not specified, \"All team communication in one place, searchable and accessible anywhere\" is displayed.'\n                        />\n                    }\n                    value={this.state.customDescriptionText}\n                    placeholder={Utils.localizeMessage('web.root.signup_info', 'All team communication in one place, searchable and accessible anywhere')}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSettings.CustomDescriptionText')}\n                />\n                <BooleanSetting\n                    key='enableCustomBrand'\n                    id='enableCustomBrand'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.brandTitle'\n                            defaultMessage='Enable Custom Branding: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.brandDesc'\n                            defaultMessage='Enable custom branding to show an image of your choice, uploaded below, and some help text, written below, on the login page.'\n                        />\n                    }\n                    value={this.state.enableCustomBrand}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSettings.EnableCustomBrand')}\n                />\n                <BrandImageSetting\n                    key='customBrandImage'\n                    disabled={!this.state.enableCustomBrand}\n                />\n                <TextSetting\n                    key='customBrandText'\n                    id='customBrandText'\n                    type='textarea'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.brandTextTitle'\n                            defaultMessage='Custom Brand Text:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.brandTextDescription'\n                            defaultMessage='Text that will appear below your custom brand image on your login screen. Supports Markdown-formatted text. Maximum 500 characters allowed.'\n                        />\n                    }\n                    value={this.state.customBrandText}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enableCustomBrand}\n                    setByEnv={this.isSetByEnv('TeamSettings.CustomBrandText')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {uploadBrandImage} from 'actions/admin_actions.jsx';\nimport {UploadStatuses} from 'utils/constants.jsx';\nimport FormError from 'components/form_error.jsx';\n\nimport UploadButton from './upload_button.jsx';\n\nconst HTTP_STATUS_OK = 200;\n\nexport default class BrandImageSetting extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Set to disable the setting\n         */\n        disabled: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleImageChange = this.handleImageChange.bind(this);\n        this.handleImageSubmit = this.handleImageSubmit.bind(this);\n\n        this.state = {\n            brandImage: null,\n            brandImageExists: false,\n            brandImageTimestamp: Date.now(),\n            error: '',\n            status: UploadStatuses.DEFAULT,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        fetch(Client4.getBrandImageUrl(this.state.brandImageTimestamp)).then(\n            (resp) => {\n                if (resp.status === HTTP_STATUS_OK) {\n                    this.setState({brandImageExists: true});\n                } else {\n                    this.setState({brandImageExists: false});\n                }\n            }\n        );\n    }\n\n    componentDidUpdate() {\n        if (this.refs.image) {\n            const reader = new FileReader();\n\n            const img = this.refs.image;\n            reader.onload = (e) => {\n                $(img).attr('src', e.target.result);\n            };\n\n            reader.readAsDataURL(this.state.brandImage);\n        }\n    }\n\n    handleImageChange() {\n        const element = $(this.refs.fileInput);\n\n        if (element.prop('files').length > 0) {\n            this.setState({\n                brandImage: element.prop('files')[0],\n                status: UploadStatuses.DEFAULT,\n            });\n        }\n    }\n\n    handleImageSubmit(e) {\n        e.preventDefault();\n\n        if (!this.state.brandImage) {\n            return;\n        }\n\n        if (this.state.status === UploadStatuses.LOADING) {\n            return;\n        }\n\n        this.setState({\n            error: '',\n            status: UploadStatuses.LOADING,\n        });\n\n        uploadBrandImage(\n            this.state.brandImage,\n            () => {\n                this.setState({\n                    brandImageExists: true,\n                    brandImage: null,\n                    brandImageTimestamp: Date.now(),\n                    status: UploadStatuses.COMPLETE,\n                });\n            },\n            (err) => {\n                this.setState({\n                    error: err.message,\n                    status: UploadStatuses.DEFAULT,\n                });\n            }\n        );\n    }\n\n    render() {\n        let btnPrimaryClass = 'btn';\n        if (this.state.brandImage) {\n            btnPrimaryClass += ' btn-primary';\n        }\n\n        let letbtnDefaultClass = 'btn';\n        if (!this.props.disabled) {\n            letbtnDefaultClass += ' btn-default';\n        }\n\n        let img = null;\n        if (this.state.brandImage) {\n            img = (\n                <img\n                    ref='image'\n                    className='brand-img'\n                    src=''\n                />\n            );\n        } else if (this.state.brandImageExists) {\n            img = (\n                <img\n                    className='brand-img'\n                    src={Client4.getBrandImageUrl(this.state.brandImageTimestamp)}\n                />\n            );\n        } else {\n            img = (\n                <p>\n                    <FormattedMessage\n                        id='admin.team.noBrandImage'\n                        defaultMessage='No brand image uploaded'\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div className='form-group'>\n                <label className='control-label col-sm-4'>\n                    <FormattedMessage\n                        id='admin.team.brandImageTitle'\n                        defaultMessage='Custom Brand Image:'\n                    />\n                </label>\n                <div className='col-sm-8'>\n                    {img}\n                </div>\n                <div className='col-sm-4'/>\n                <div className='col-sm-8'>\n                    <div className='file__upload'>\n                        <button\n                            className={letbtnDefaultClass}\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.team.chooseImage'\n                                defaultMessage='Choose New Image'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            accept='.jpg,.png,.bmp'\n                            disabled={this.props.disabled}\n                            onChange={this.handleImageChange}\n                        />\n                    </div>\n                    <UploadButton\n                        primaryClass={btnPrimaryClass}\n                        status={this.state.status}\n                        disabled={this.props.disabled || !this.state.brandImage}\n                        onClick={this.handleImageSubmit}\n                    />\n                    <br/>\n                    <FormError error={this.state.error}/>\n                    <p className='help-text no-margin'>\n                        <FormattedHTMLMessage\n                            id='admin.team.uploadDesc'\n                            defaultMessage='Customize your user experience by adding a custom image to your login screen. See examples at <a href=\"http://docs.mattermost.com/administration/config-settings.html#custom-branding\" target=\"_blank\">docs.mattermost.com/administration/config-settings.html#custom-branding</a>.'\n                        />\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {UploadStatuses} from 'utils/constants.jsx';\n\nexport default class UploadButton extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Upload status - loading, complete, default ('')\n         */\n        status: PropTypes.string,\n\n        /*\n         * Primary class of the button\n         */\n        primaryClass: PropTypes.string,\n\n        /*\n         * Disable the button\n         */\n        disabled: PropTypes.bool,\n\n        /*\n         * Funtion to call on button click\n         */\n        onClick: PropTypes.func,\n    }\n\n    render() {\n        const {\n            status,\n            primaryClass,\n            disabled,\n            onClick,\n        } = this.props;\n\n        let buttonIcon;\n        let buttonText;\n\n        switch (status) {\n        case UploadStatuses.LOADING:\n            buttonIcon = (\n                <i\n                    className='fa fa-refresh icon--rotate'\n                    title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                />\n            );\n            buttonText = Utils.localizeMessage('admin.team.uploading', 'Uploading..');\n            break;\n        case UploadStatuses.COMPLETE:\n            buttonIcon = (\n                <i\n                    className='fa fa-check'\n                    title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                />\n            );\n            buttonText = Utils.localizeMessage('admin.team.uploaded', 'Uploaded!');\n            break;\n        default:\n            buttonText = Utils.localizeMessage('admin.team.upload', 'Upload');\n        }\n\n        return (\n            <button\n                className={primaryClass}\n                disabled={disabled}\n                onClick={onClick}\n                id='upload-button'\n            >\n                {buttonIcon}\n                {' '}\n                {buttonText}\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\n\nexport default class CustomEmojiSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ServiceSettings.EnableCustomEmoji = this.state.enableCustomEmoji;\n        config.ServiceSettings.EnableEmojiPicker = this.state.enableEmojiPicker;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            enableCustomEmoji: config.ServiceSettings.EnableCustomEmoji,\n            enableEmojiPicker: config.ServiceSettings.EnableEmojiPicker,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.customization.emoji'\n                defaultMessage='Emoji'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableEmojiPicker'\n                    label={\n                        <FormattedMessage\n                            id='admin.customization.enableEmojiPickerTitle'\n                            defaultMessage='Enable Emoji Picker:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.customization.enableEmojiPickerDesc'\n                            defaultMessage='The emoji picker allows users to select emoji to add as reactions or use in messages. Enabling the emoji picker with a large number of custom emoji may slow down performance.'\n                        />\n                    }\n                    value={this.state.enableEmojiPicker}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableEmojiPicker')}\n                />\n                <BooleanSetting\n                    id='enableCustomEmoji'\n                    label={\n                        <FormattedMessage\n                            id='admin.customization.enableCustomEmojiTitle'\n                            defaultMessage='Enable Custom Emoji:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.customization.enableCustomEmojiDesc'\n                            defaultMessage='Enable users to create custom emoji for use in messages. When enabled, Custom Emoji settings can be accessed by switching to a team and clicking the three dots above the channel sidebar, and selecting \"Custom Emoji\".'\n                        />\n                    }\n                    value={this.state.enableCustomEmoji}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableCustomEmoji')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport TextSetting from './text_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\n\nexport default class CustomGifSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ServiceSettings.EnableGifPicker = this.state.enableGifPicker;\n        config.ServiceSettings.GfycatApiKey = this.state.gfycatApiKey;\n        config.ServiceSettings.GfycatApiSecret = this.state.gfycatApiSecret;\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            enableGifPicker: config.ServiceSettings.EnableGifPicker,\n            gfycatApiKey: config.ServiceSettings.GfycatApiKey,\n            gfycatApiSecret: config.ServiceSettings.GfycatApiSecret,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.customization.gif'\n                defaultMessage='GIF (Beta)'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableGifPicker'\n                    label={\n                        <FormattedMessage\n                            id='admin.customization.enableGifPickerTitle'\n                            defaultMessage='Enable GIF Picker:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.customization.enableGifPickerDesc'\n                            defaultMessage='Allow users to select GIFs from the emoji picker via a Gfycat integration.'\n                        />\n                    }\n                    value={this.state.enableGifPicker}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableGifPicker')}\n                />\n                <TextSetting\n                    id='gfycatApiKey'\n                    label={\n                        <FormattedMessage\n                            id='admin.customization.gfycatApiKey'\n                            defaultMessage='Gfycat API Key:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.customization.gfycatApiKeyDescription'\n                            defaultMessage='Request an API key at https://developers.gfycat.com/signup/#/. Enter the client ID you receive via email to this field. When blank, uses the default API key provided by Gfycat.'\n                        />\n                    }\n                    value={this.state.gfycatApiKey}\n                    placeholder=''\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.GfycatAPIKey')}\n                />\n                <TextSetting\n                    id='gfycatApiSecret'\n                    label={\n                        <FormattedMessage\n                            id='admin.customization.gfycatApiSecret'\n                            defaultMessage='Gfycat API Secret:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.customization.gfycatApiSecretDescription'\n                            defaultMessage='The API secret generated by Gfycat for your API key. When blank, uses the default API secret provided by Gfycat.'\n                        />\n                    }\n                    value={this.state.gfycatApiSecret}\n                    placeholder=''\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.GfycatAPISecret')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {JobTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class DataRetentionSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n        this.renderConfirmModal = this.renderConfirmModal.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.DataRetentionSettings.EnableMessageDeletion = this.state.enableMessageDeletion === 'true';\n        config.DataRetentionSettings.EnableFileDeletion = this.state.enableFileDeletion === 'true';\n        config.DataRetentionSettings.MessageRetentionDays = parseInt(this.state.messageRetentionDays, 10);\n        config.DataRetentionSettings.FileRetentionDays = parseInt(this.state.fileRetentionDays, 10);\n        config.DataRetentionSettings.DeletionJobStartTime = this.state.deletionJobStartTime;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            enableMessageDeletion: String(config.DataRetentionSettings.EnableMessageDeletion),\n            enableFileDeletion: String(config.DataRetentionSettings.EnableFileDeletion),\n            messageRetentionDays: config.DataRetentionSettings.MessageRetentionDays,\n            fileRetentionDays: config.DataRetentionSettings.FileRetentionDays,\n            deletionJobStartTime: config.DataRetentionSettings.DeletionJobStartTime,\n            showConfirmModal: false,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        this.setState({showConfirmModal: true});\n    };\n\n    handleSaveConfirmed = () => {\n        this.setState({showConfirmModal: false});\n\n        this.doSubmit();\n    };\n\n    handleSaveCanceled = () => {\n        this.setState({showConfirmModal: false});\n    };\n\n    renderConfirmModal() {\n        const title = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.title'\n                defaultMessage='Confirm data retention policy'\n            />\n        );\n\n        const messageList = [];\n\n        if (this.state.enableMessageDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageDeletion'\n                    defaultMessage='All messages will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.messageRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageIndefinite'\n                    defaultMessage='All messages will be retained indefinitely.'\n                />\n            );\n        }\n\n        if (this.state.enableFileDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileDeletion'\n                    defaultMessage='All files will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.fileRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileIndefinite'\n                    defaultMessage='All files will be retained indefinitely.'\n                />\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.description'\n                        defaultMessage='Are you sure you want to apply the following data retention policy:'\n                    />\n                </p>\n                <ul>\n                    {messageList.map((item, index) => {\n                        return <li key={index}>{item}</li>;\n                    })}\n                </ul>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.clarification'\n                        defaultMessage='Once deleted, messages and files cannot be retrieved.'\n                    />\n                </p>\n            </div>\n        );\n\n        const confirmButton = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.confirm'\n                defaultMessage='Confirm Settings'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleSaveConfirmed}\n                onCancel={this.handleSaveCanceled}\n            />\n        );\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.data_retention.title'\n                defaultMessage='Data Retention Policy (Beta)'\n            />\n        );\n    }\n\n    renderSettings() {\n        const enableMessageDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepMessagesIndefinitely', 'Keep all messages indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepMessageForTime', 'Keep messages for a set amount of time')},\n        ];\n\n        const enableFileDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepFilesIndefinitely', 'Keep all files indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepFilesForTime', 'Keep files for a set amount of time')},\n        ];\n\n        let messageRetentionDaysSetting = '';\n        if (this.state.enableMessageDeletion === 'true') {\n            messageRetentionDaysSetting = (\n                <TextSetting\n                    id='messageRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.messageRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.messageRetentionDays.description'\n                            defaultMessage='Set how many days messages are kept in Mattermost. Messages, including file attachments older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.messageRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.MessageRetentionDays')}\n                />\n            );\n        }\n\n        let fileRetentionDaysSetting = '';\n        if (this.state.enableFileDeletion === 'true') {\n            fileRetentionDaysSetting = (\n                <TextSetting\n                    id='fileRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.fileRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.fileRetentionDays.description'\n                            defaultMessage='Set how many days file uploads are kept in Mattermost. Files older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.fileRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.FileRetentionDays')}\n                />\n            );\n        }\n\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <SettingsGroup>\n                {confirmModal}\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMessage\n                            id='admin.data_retention.note.description'\n                            defaultMessage='Caution: Once a message or a file is deleted, the action is irreversible. Please be careful when setting up a custom data retention policy. See {documentationLink} to learn more.'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-dataretention-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.data_retention.note.description.documentationLinkText'\n                                            defaultMessage='documentation'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n                <DropdownSetting\n                    id='enableMessageDeletion'\n                    values={enableMessageDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.title'\n                            defaultMessage='Message Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.description'\n                            defaultMessage='Set how long Mattermost keeps messages in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableMessageDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableMessageDeletion')}\n                />\n                {messageRetentionDaysSetting}\n                <DropdownSetting\n                    id='enableFileDeletion'\n                    values={enableFileDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.title'\n                            defaultMessage='File Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.description'\n                            defaultMessage='Set how long Mattermost keeps file uploads in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableFileDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableFileDeletion')}\n                />\n                {fileRetentionDaysSetting}\n                <TextSetting\n                    id='deletionJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.title'\n                            defaultMessage='Data Deletion Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.data_retention.deletionJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled data retention job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.deletionJobStartTime}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DeletionJobStartTime')}\n                />\n                <JobsTable\n                    jobType={JobTypes.DATA_RETENTION}\n                    disabled={this.state.enableMessageDeletion !== 'true' && this.state.enableFileDeletion !== 'true'}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.title'\n                            defaultMessage='Run Deletion Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.help'\n                            defaultMessage='Initiates a Data Retention deletion job immediately.'\n                        />\n                    }\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport {cancelJob, createJob} from 'actions/job_actions.jsx';\nimport ErrorStore from 'stores/error_store.jsx';\nimport {JobStatuses} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nclass JobTable extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Used for formatting dates\n         */\n        intl: intlShape.isRequired,\n\n        /**\n         * Array of jobs\n         */\n        jobs: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to fetch jobs\n             */\n            getJobsByType: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Function called when displaying extra text.\n         */\n        getExtraInfoText: PropTypes.func,\n\n        /**\n         * Grey buttons out when disabled\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * Help text under the create job button\n         */\n        createJobHelpText: PropTypes.element.isRequired,\n\n        /**\n         * Button text to create a new job\n         */\n        createJobButtonText: PropTypes.element.isRequired,\n\n        /**\n         * The type of jobs to include in this table.\n         */\n        jobType: PropTypes.string.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.interval = null;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.interval = setInterval(this.reload, 15000);\n    }\n\n    componentDidMount() {\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => this.setState({loading: false})\n        );\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    getStatus = (job) => {\n        if (job.status === JobStatuses.PENDING) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusPending'\n                        defaultMessage='Pending'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusInProgress'\n                        defaultMessage='In Progress'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.SUCCESS) {\n            return (\n                <span\n                    className='status-icon-success'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusSuccess'\n                        defaultMessage='Success'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.ERROR) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusError'\n                        defaultMessage='Error'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceling'\n                        defaultMessage='Canceling...'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCELED) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceled'\n                        defaultMessage='Canceled'\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <span title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}>{job.status}</span>\n        );\n    }\n\n    getExtraInfoText = (job) => {\n        if (job.data && job.data.error && job.data.error.length > 0) {\n            return <span title={job.data.error}>{job.data.error}</span>;\n        }\n\n        if (this.props.getExtraInfoText) {\n            return this.props.getExtraInfoText(job);\n        }\n\n        return <span/>;\n    }\n\n    getRunLength = (job) => {\n        let millis = job.last_activity_at - job.start_at;\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            const runningMillis = Date.now() - job.start_at;\n            if (runningMillis > millis) {\n                millis = runningMillis;\n            }\n        }\n\n        let lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') + '--';\n\n        if (job.last_activity_at > 0) {\n            lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') +\n                this.props.intl.formatDate(new Date(job.last_activity_at), {\n                    year: 'numeric',\n                    month: 'short',\n                    day: '2-digit',\n                }) + ' - ' +\n                this.props.intl.formatTime(new Date(job.last_activity_at), {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit',\n                });\n        }\n\n        var seconds = Math.round(millis / 1000);\n        var minutes = Math.round(millis / (1000 * 60));\n\n        if (millis <= 0 || job.status === JobStatuses.CANCELED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        if (seconds <= 120) {\n            return (\n                <span\n                    className='whitespace--nowrap'\n                    title={lastActivity}\n                >\n                    {seconds + Utils.localizeMessage('admin.jobTable.runLengthSeconds', ' seconds')}\n                </span>\n            );\n        }\n\n        return (\n            <span\n                className='whitespace--nowrap'\n                title={lastActivity}\n            >\n                {minutes + Utils.localizeMessage('admin.jobTable.runLengthMinutes', ' minutes')}\n            </span>\n        );\n    }\n\n    getFinishAt = (status, millis) => {\n        if (millis === 0 || status === JobStatuses.PENDING || status === JobStatuses.IN_PROGRESS || status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        const date = new Date(millis);\n        return (\n            <span className='whitespace--nowrap'>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    reload = () => {\n        this.setState({loading: true});\n\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => {\n                this.setState({\n                    loading: false,\n                });\n            }\n        );\n    };\n\n    handleCancelJob = (e) => {\n        e.preventDefault();\n        const jobId = e.currentTarget.getAttribute('data-job-id');\n\n        cancelJob(\n            jobId,\n            () => {\n                this.reload();\n            },\n            (err) => {\n                ErrorStore.storeLastError(err);\n                ErrorStore.emitChange();\n                this.reload();\n            }\n        );\n    };\n\n    handleCreateJob = (e) => {\n        e.preventDefault();\n\n        const job = {\n            type: this.props.jobType,\n        };\n\n        createJob(\n            job,\n            () => {\n                this.reload();\n            },\n            (err) => {\n                ErrorStore.storeLastError(err);\n                ErrorStore.emitChange();\n                this.reload();\n            }\n        );\n    };\n\n    getCancelButton = (job) => {\n        let cancelButton = null;\n\n        if (!this.props.disabled && (job.status === JobStatuses.PENDING || job.status === JobStatuses.IN_PROGRESS)) {\n            cancelButton = (\n                <span\n                    data-job-id={job.id}\n                    onClick={this.handleCancelJob}\n                    className='job-table__cancel-button'\n                    title={Utils.localizeMessage('admin.jobTable.cancelButton', 'Cancel')}\n                >\n                    {'×'}\n                </span>\n            );\n        }\n\n        return cancelButton;\n    }\n\n    render() {\n        var items = this.props.jobs.map((job) => {\n            return (\n                <tr key={job.id}>\n                    <td\n                        width='30px'\n                        className='whitespace--nowrap text-center'\n                    >\n                        {this.getCancelButton(job)}\n                    </td>\n                    <td className='whitespace--nowrap'>{this.getStatus(job)}</td>\n                    <td className='whitespace--nowrap'>{this.getFinishAt(job.status, job.last_activity_at)}</td>\n                    <td className='whitespace--nowrap'>{this.getRunLength(job)}</td>\n                    <td colSpan='3'>{this.getExtraInfoText(job)}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div className='job-table__panel'>\n                <div className='job-table__create-button'>\n                    <div>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleCreateJob}\n                            disabled={this.props.disabled}\n                        >\n                            {this.props.createJobButtonText}\n                        </button>\n                    </div>\n                    <div className='help-text'>\n                        {this.props.createJobHelpText}\n                    </div>\n                </div>\n                <div className='job-table__table'>\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th width='30px'/>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerStatus'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerFinishAt'\n                                        defaultMessage='Finish Time'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerRunTime'\n                                        defaultMessage='Run Time'\n                                    />\n                                </th>\n                                <th colSpan='3'>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerExtraInfo'\n                                        defaultMessage='Details'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {items}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(JobTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as JobsActions from 'mattermost-redux/actions/jobs';\n\nimport store from 'stores/redux_store.jsx';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nexport async function createJob(job, success, error) {\n    const {data, error: err} = await JobsActions.createJob(job)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function cancelJob(jobId, success, error) {\n    const {data, error: err} = await JobsActions.cancelJob(jobId)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {recycleDatabaseConnection} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport GeneratedSetting from './generated_setting.jsx';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class DatabaseSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        // driverName and dataSource are read-only from the UI\n\n        config.SqlSettings.MaxIdleConns = this.parseIntNonZero(this.state.maxIdleConns);\n        config.SqlSettings.MaxOpenConns = this.parseIntNonZero(this.state.maxOpenConns);\n        config.SqlSettings.AtRestEncryptKey = this.state.atRestEncryptKey;\n        config.SqlSettings.Trace = this.state.trace;\n        config.SqlSettings.QueryTimeout = this.parseIntNonZero(this.state.queryTimeout);\n        config.SqlSettings.ConnMaxLifetimeMilliseconds = this.parseIntNonNegative(this.state.connMaxLifetimeMilliseconds);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            driverName: config.SqlSettings.DriverName,\n            dataSource: config.SqlSettings.DataSource,\n            maxIdleConns: config.SqlSettings.MaxIdleConns,\n            maxOpenConns: config.SqlSettings.MaxOpenConns,\n            atRestEncryptKey: config.SqlSettings.AtRestEncryptKey,\n            trace: config.SqlSettings.Trace,\n            queryTimeout: config.SqlSettings.QueryTimeout,\n            connMaxLifetimeMilliseconds: config.SqlSettings.ConnMaxLifetimeMilliseconds,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.database.title'\n                defaultMessage='Database Settings'\n            />\n        );\n    }\n\n    renderSettings() {\n        const dataSource = '**********' + this.state.dataSource.substring(this.state.dataSource.indexOf('@'));\n\n        let recycleDbButton = <div/>;\n        if (this.props.license.IsLicensed === 'true') {\n            recycleDbButton = (\n                <RequestButton\n                    requestAction={recycleDatabaseConnection}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.recycle.recycleDescription'\n                            defaultMessage='Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating \"config.json\" to the new desired configuration and using the {reloadConfiguration} feature to load the new settings while the server is running. The administrator should then use {featureName} feature to recycle the database connections based on the new settings.'\n                            values={{\n                                featureName: (\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.recycle.recycleDescription.featureName'\n                                            defaultMessage='Recycle Database Connections'\n                                        />\n                                    </b>\n                                ),\n                                reloadConfiguration: (\n                                    <a href='../general/configuration'>\n                                        <b>\n                                            <FormattedMessage\n                                                id='admin.recycle.recycleDescription.reloadConfiguration'\n                                                defaultMessage='Configuration > Reload Configuration from Disk'\n                                            />\n                                        </b>\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.recycle.button'\n                            defaultMessage='Recycle Database Connections'\n                        />\n                    }\n                    showSuccessMessage={false}\n                    errorMessage={{\n                        id: 'admin.recycle.reloadFail',\n                        defaultMessage: 'Recycling unsuccessful: {error}',\n                    }}\n                    includeDetailedError={true}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.sql.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect.'\n                    />\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DriverName'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.driverName'\n                            defaultMessage='Driver Name:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <p className='help-text'>{this.state.driverName}</p>\n                    </div>\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DataSource'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.dataSource'\n                            defaultMessage='Data Source:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <p className='help-text'>{dataSource}</p>\n                    </div>\n                </div>\n                <TextSetting\n                    id='maxIdleConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsTitle'\n                            defaultMessage='Maximum Idle Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxConnectionsExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsDescription'\n                            defaultMessage='Maximum number of idle connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxIdleConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxIdleConns')}\n                />\n                <TextSetting\n                    id='maxOpenConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenTitle'\n                            defaultMessage='Maximum Open Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxOpenExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenDescription'\n                            defaultMessage='Maximum number of open connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxOpenConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxOpenConns')}\n                />\n                <TextSetting\n                    id='queryTimeout'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutTitle'\n                            defaultMessage='Query Timeout:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.queryTimeoutExample', 'E.g.: \"30\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutDescription'\n                            defaultMessage='The number of seconds to wait for a response from the database after opening a connection and sending the query. Errors that you see in the UI or in the logs as a result of a query timeout can vary depending on the type of query.'\n                        />\n                    }\n                    value={this.state.queryTimeout}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.QueryTimeout')}\n                />\n                <TextSetting\n                    id='connMaxLifetimeMilliseconds'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeTitle'\n                            defaultMessage='Maximum Connection Lifetime:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.connMaxLifetimeExample', 'E.g.: \"3600000\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeDescription'\n                            defaultMessage='Maximum lifetime for a connection to the database in milliseconds.'\n                        />\n                    }\n                    value={this.state.connMaxLifetimeMilliseconds}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.ConnMaxLifetimeMilliseconds')}\n                />\n                <GeneratedSetting\n                    id='atRestEncryptKey'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.keyTitle'\n                            defaultMessage='At Rest Encrypt Key:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.keyExample', 'E.g.: \"gxHVDcKUyP2y1eiyW8S8na1UYQAfq6J6\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.keyDescription'\n                            defaultMessage='32-character salt available to encrypt and decrypt sensitive fields in database.'\n                        />\n                    }\n                    value={this.state.atRestEncryptKey}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.AtRestEncryptKey')}\n                />\n                <BooleanSetting\n                    id='trace'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.traceTitle'\n                            defaultMessage='Trace: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.traceDescription'\n                            defaultMessage='(Development Mode) When true, executing SQL statements are written to the log.'\n                        />\n                    }\n                    value={this.state.trace}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.Trace')}\n                />\n                {recycleDbButton}\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {elasticsearchPurgeIndexes, elasticsearchTest} from 'actions/admin_actions.jsx';\nimport {JobStatuses, JobTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport JobsTable from './jobs';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class ElasticsearchSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.doTestConfig = this.doTestConfig.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSaved = this.handleSaved.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ElasticsearchSettings.ConnectionUrl = this.state.connectionUrl;\n        config.ElasticsearchSettings.Username = this.state.username;\n        config.ElasticsearchSettings.Password = this.state.password;\n        config.ElasticsearchSettings.Sniff = this.state.sniff;\n        config.ElasticsearchSettings.EnableIndexing = this.state.enableIndexing;\n        config.ElasticsearchSettings.EnableSearching = this.state.enableSearching;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            connectionUrl: config.ElasticsearchSettings.ConnectionUrl,\n            username: config.ElasticsearchSettings.Username,\n            password: config.ElasticsearchSettings.Password,\n            sniff: config.ElasticsearchSettings.Sniff,\n            enableIndexing: config.ElasticsearchSettings.EnableIndexing,\n            enableSearching: config.ElasticsearchSettings.EnableSearching,\n            configTested: true,\n            canSave: true,\n            canPurgeAndIndex: config.ElasticsearchSettings.EnableIndexing,\n        };\n    }\n\n    handleChange(id, value) {\n        if (id === 'enableIndexing') {\n            if (value === false) {\n                this.setState({\n                    enableSearching: false,\n                });\n            } else {\n                this.setState({\n                    canSave: false,\n                    configTested: false,\n                });\n            }\n        }\n\n        if (id === 'connectionUrl' || id === 'username' || id === 'password' || id === 'sniff') {\n            this.setState({\n                configTested: false,\n                canSave: false,\n            });\n        }\n\n        if (id !== 'enableSearching') {\n            this.setState({\n                canPurgeAndIndex: false,\n            });\n        }\n\n        super.handleChange(id, value);\n    }\n\n    handleSaved() {\n        this.setState({\n            canPurgeAndIndex: this.state.enableIndexing,\n        });\n    }\n\n    canSave() {\n        return this.state.canSave;\n    }\n\n    doTestConfig(success, error) {\n        const config = JSON.parse(JSON.stringify(this.props.config));\n        this.getConfigFromState(config);\n\n        elasticsearchTest(\n            config,\n            () => {\n                this.setState({\n                    configTested: true,\n                    canSave: true,\n                });\n                success();\n                this.doSubmit();\n            },\n            (err) => {\n                this.setState({\n                    configTested: false,\n                    canSave: false,\n                });\n                error(err);\n            }\n        );\n    }\n\n    getExtraInfo(job) {\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <FormattedMessage\n                    id='admin.elasticsearch.percentComplete'\n                    defaultMessage='{percent}% Complete'\n                    values={{percent: Number(job.progress)}}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.elasticsearch.title'\n                defaultMessage='Elasticsearch'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMessage\n                            id='admin.elasticsearch.noteDescription'\n                            defaultMessage='Changing properties in this section will require a server restart before taking effect.'\n                        />\n                    </div>\n                </div>\n                <BooleanSetting\n                    id='enableIndexing'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingTitle'\n                            defaultMessage='Enable Elasticsearch Indexing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingDescription'\n                            defaultMessage='When true, indexing of new posts occurs automatically. Search queries will use database search until \"Enable Elasticsearch for search queries\" is enabled. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.enableIndexingDescription.documentationLinkText'\n                                            defaultMessage='Learn more about Elasticsearch in our documentation.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.enableIndexing}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableIndexing')}\n                />\n                <TextSetting\n                    id='connectionUrl'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlTitle'\n                            defaultMessage='Server Connection Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.connectionUrlExample', 'E.g.: \"https://elasticsearch.example.org:9200\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlDescription'\n                            defaultMessage='The address of the Elasticsearch server. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-server-setup/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.connectionUrlExample.documentationLinkText'\n                                            defaultMessage='Please see documentation with server setup instructions.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.connectionUrl}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.ConnectionUrl')}\n                />\n                <TextSetting\n                    id='username'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameTitle'\n                            defaultMessage='Server Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.usernameExample', 'E.g.: \"elastic\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameDescription'\n                            defaultMessage='(Optional) The username to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.username}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Username')}\n                />\n                <TextSetting\n                    id='password'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordTitle'\n                            defaultMessage='Server Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.password', 'E.g.: \"yourpassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordDescription'\n                            defaultMessage='(Optional) The password to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.password}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Password')}\n                />\n                <BooleanSetting\n                    id='sniff'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffTitle'\n                            defaultMessage='Enable Cluster Sniffing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffDescription'\n                            defaultMessage='When true, sniffing finds and connects to all data nodes in your cluster automatically.'\n                        />\n                    }\n                    value={this.state.sniff}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Sniff')}\n                />\n                <RequestButton\n                    requestAction={this.doTestConfig}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.testHelpText'\n                            defaultMessage='Tests if the Mattermost server can connect to the Elasticsearch server specified. Testing the connection only saves the configuration if the test is successful. See log file for more detailed error messages.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.elasticsearch_test_button'\n                            defaultMessage='Test Connection'\n                        />\n                    }\n                    successMessage={{\n                        id: 'admin.elasticsearch.testConfigSuccess',\n                        defaultMessage: 'Test successful. Configuration saved.',\n                    }}\n                    disabled={!this.state.enableIndexing}\n                />\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                    >\n                        <FormattedMessage\n                            id='admin.elasticsearch.bulkIndexingTitle'\n                            defaultMessage='Bulk Indexing:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <div className='job-table-setting'>\n                            <JobsTable\n                                jobType={JobTypes.ELASTICSEARCH_POST_INDEXING}\n                                disabled={!this.state.canPurgeAndIndex}\n                                createJobButtonText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.title'\n                                        defaultMessage='Index Now'\n                                    />\n                                }\n                                createJobHelpText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.help'\n                                        defaultMessage='All posts in the database will be indexed from oldest to newest. Elasticsearch is available during indexing but search results may be incomplete until the indexing job is complete.'\n                                    />\n                                }\n                                getExtraInfoText={this.getExtraInfo}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <RequestButton\n                    requestAction={elasticsearchPurgeIndexes}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesHelpText'\n                            defaultMessage='Purging will entirely remove the index on the Elasticsearch server. Search results may be incomplete until a bulk index of the existing post database is rebuilt.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton'\n                            defaultMessage='Purge Index'\n                        />\n                    }\n                    successMessage={{\n                        id: 'admin.elasticsearch.purgeIndexesButton.success',\n                        defaultMessage: 'Indexes purged successfully.',\n                    }}\n                    errorMessage={{\n                        id: 'admin.elasticsearch.purgeIndexesButton.error',\n                        defaultMessage: 'Failed to purge indexes: {error}',\n                    }}\n                    disabled={!this.state.canPurgeAndIndex}\n                    label={(\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton.label'\n                            defaultMessage='Purge Indexes:'\n                        />\n                    )}\n                />\n                <BooleanSetting\n                    id='enableSearching'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingTitle'\n                            defaultMessage='Enable Elasticsearch for search queries:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingDescription'\n                            defaultMessage='Requires a successful connection to the Elasticsearch server. When true, Elasticsearch will be used for all search queries using the latest index. Search results may be incomplete until a bulk index of the existing post database is finished. When false, database search is used.'\n                        />\n                    }\n                    value={this.state.enableSearching}\n                    disabled={!this.state.enableIndexing || !this.state.configTested}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableSearching')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport ErrorStore from 'stores/error_store.jsx';\nimport {ErrorBarTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport EmailConnectionTest from 'components/admin_console/email_connection_test';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport {ConnectionSecurityDropdownSettingEmail} from './connection_security_dropdown_setting.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nconst EMAIL_NOTIFICATION_CONTENTS_FULL = 'full';\nconst EMAIL_NOTIFICATION_CONTENTS_GENERIC = 'generic';\n\nexport default class EmailSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.handleSaved = this.handleSaved.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.EmailSettings.SendEmailNotifications = this.state.sendEmailNotifications;\n        config.EmailSettings.EnablePreviewModeBanner = this.state.enablePreviewModeBanner;\n        config.EmailSettings.FeedbackName = this.state.feedbackName;\n        config.EmailSettings.FeedbackEmail = this.state.feedbackEmail;\n        config.EmailSettings.FeedbackOrganization = this.state.feedbackOrganization;\n        config.EmailSettings.EnableSMTPAuth = this.state.enableSMTPAuth;\n        config.EmailSettings.SMTPUsername = this.state.smtpUsername;\n        config.EmailSettings.SMTPPassword = this.state.smtpPassword;\n        config.EmailSettings.SMTPServer = this.state.smtpServer;\n        config.EmailSettings.SMTPPort = this.state.smtpPort;\n        config.EmailSettings.ConnectionSecurity = this.state.connectionSecurity;\n        config.EmailSettings.EnableEmailBatching = this.state.enableEmailBatching;\n        config.ServiceSettings.EnableSecurityFixAlert = this.state.enableSecurityFixAlert;\n        config.EmailSettings.SkipServerCertificateVerification = this.state.skipServerCertificateVerification;\n        config.EmailSettings.EmailNotificationContentsType = this.state.emailNotificationContentsType;\n\n        return config;\n    }\n\n    handleSaved(newConfig) {\n        if (newConfig.EmailSettings.SendEmailNotifications || !newConfig.EmailSettings.EnablePreviewModeBanner) {\n            ErrorStore.clearError(ErrorBarTypes.PREVIEW_MODE);\n        }\n    }\n\n    getStateFromConfig(config) {\n        return {\n            sendEmailNotifications: config.EmailSettings.SendEmailNotifications,\n            enablePreviewModeBanner: config.EmailSettings.EnablePreviewModeBanner,\n            feedbackName: config.EmailSettings.FeedbackName,\n            feedbackEmail: config.EmailSettings.FeedbackEmail,\n            feedbackOrganization: config.EmailSettings.FeedbackOrganization,\n            enableSMTPAuth: config.EmailSettings.EnableSMTPAuth,\n            smtpUsername: config.EmailSettings.SMTPUsername,\n            smtpPassword: config.EmailSettings.SMTPPassword,\n            smtpServer: config.EmailSettings.SMTPServer,\n            smtpPort: config.EmailSettings.SMTPPort,\n            connectionSecurity: config.EmailSettings.ConnectionSecurity,\n            enableEmailBatching: config.EmailSettings.EnableEmailBatching,\n            skipServerCertificateVerification: config.EmailSettings.SkipServerCertificateVerification,\n            enableSecurityFixAlert: config.ServiceSettings.EnableSecurityFixAlert,\n            emailNotificationContentsType: config.EmailSettings.EmailNotificationContentsType,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.notifications.email'\n                defaultMessage='Email'\n            />\n        );\n    }\n\n    renderSettings() {\n        let enableEmailBatchingDisabledText = null;\n\n        if (this.props.config.ClusterSettings.Enable) {\n            enableEmailBatchingDisabledText = (\n                <span\n                    key='admin.email.enableEmailBatching.clusterEnabled'\n                    className='help-text'\n                >\n                    <FormattedHTMLMessage\n                        id='admin.email.enableEmailBatching.clusterEnabled'\n                        defaultMessage='Email batching cannot be enabled unless the SiteURL is configured in <b>Configuration > SiteURL</b>.'\n                    />\n                </span>\n            );\n        } else if (!this.props.config.ServiceSettings.SiteURL) {\n            enableEmailBatchingDisabledText = (\n                <span\n                    key='admin.email.enableEmailBatching.siteURL'\n                    className='help-text'\n                >\n                    <FormattedHTMLMessage\n                        id='admin.email.enableEmailBatching.siteURL'\n                        defaultMessage='Email batching cannot be enabled unless the SiteURL is configured in <b>Configuration > SiteURL</b>.'\n                    />\n                </span>\n            );\n        }\n\n        let emailNotificationContentsTypeDropdown = null;\n        let emailNotificationContentsHelpText = null;\n        if (this.props.license.EmailNotificationContents === 'true') {\n            const emailNotificationContentsTypes = [];\n            emailNotificationContentsTypes.push({value: EMAIL_NOTIFICATION_CONTENTS_FULL, text: Utils.localizeMessage('admin.email.notification.contents.full', 'Send full message contents')});\n            emailNotificationContentsTypes.push({value: EMAIL_NOTIFICATION_CONTENTS_GENERIC, text: Utils.localizeMessage('admin.email.notification.contents.generic', 'Send generic description with only sender name')});\n\n            if (this.state.emailNotificationContentsType === EMAIL_NOTIFICATION_CONTENTS_FULL) {\n                emailNotificationContentsHelpText = (\n                    <FormattedHTMLMessage\n                        key='admin.email.notification.contents.full.description'\n                        id='admin.email.notification.contents.full.description'\n                        defaultMessage='Sender name and channel are included in email notifications.</br>Typically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.'\n                    />\n                );\n            } else if (this.state.emailNotificationContentsType === EMAIL_NOTIFICATION_CONTENTS_GENERIC) {\n                emailNotificationContentsHelpText = (\n                    <FormattedHTMLMessage\n                        key='admin.email.notification.contents.generic.description'\n                        id='admin.email.notification.contents.generic.description'\n                        defaultMessage='Only the name of the person who sent the message, with no information about channel name or message contents are included in email notifications.</br>Typically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.'\n                    />\n                );\n            }\n\n            emailNotificationContentsTypeDropdown = (\n                <DropdownSetting\n                    id='emailNotificationContentsType'\n                    values={emailNotificationContentsTypes}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notification.contents.title'\n                            defaultMessage='Email Notification Contents: '\n                        />\n                    }\n                    value={this.state.emailNotificationContentsType}\n                    onChange={this.handleChange}\n                    helpText={emailNotificationContentsHelpText}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.EmailNotificationContentsType')}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='sendEmailNotifications'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationsTitle'\n                            defaultMessage='Enable Email Notifications: '\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.email.notificationsDescription'\n                            defaultMessage='Typically set to true in production. When true, Mattermost attempts to send email notifications. Developers may set this field to false to skip email setup for faster development.'\n                        />\n                    }\n                    value={this.state.sendEmailNotifications}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('EmailSettings.SendEmailNotifications')}\n                />\n                <BooleanSetting\n                    id='enablePreviewModeBanner'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.enablePreviewModeBannerTitle'\n                            defaultMessage='Enable Preview Mode Banner:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.email.enablePreviewModeBannerDescription'\n                            defaultMessage='When true, the Preview Mode banner is displayed so users are aware that email notifications are disabled. When false, the Preview Mode banner is not displayed to users.'\n                        />\n                    }\n                    value={this.state.enablePreviewModeBanner}\n                    onChange={this.handleChange}\n                    disabled={this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.EnablePreviewModeBanner')}\n                />\n                <BooleanSetting\n                    id='enableEmailBatching'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.enableEmailBatchingTitle'\n                            defaultMessage='Enable Email Batching: '\n                        />\n                    }\n                    helpText={[\n                        <FormattedHTMLMessage\n                            key='admin.email.enableEmailBatchingDesc'\n                            id='admin.email.enableEmailBatchingDesc'\n                            defaultMessage='When true, users will have email notifications for multiple direct messages and mentions combined into a single email. Batching will occur at a default interval of 15 minutes, configurable in Account Settings > Notifications.'\n                        />,\n                        enableEmailBatchingDisabledText,\n                    ]}\n                    value={this.state.enableEmailBatching && !this.props.config.ClusterSettings.Enable && Boolean(this.props.config.ServiceSettings.SiteURL)}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || this.props.config.ClusterSettings.Enable || !this.props.config.ServiceSettings.SiteURL}\n                    setByEnv={this.isSetByEnv('EmailSettings.EnableEmailBatching')}\n                />\n                {emailNotificationContentsTypeDropdown}\n                <TextSetting\n                    id='feedbackName'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationDisplayTitle'\n                            defaultMessage='Notification Display Name:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.notificationDisplayExample', 'Ex: \"Mattermost Notification\", \"System\", \"No-Reply\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.notificationDisplayDescription'\n                            defaultMessage='Display name on email account used when sending notification emails from Mattermost.'\n                        />\n                    }\n                    value={this.state.feedbackName}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.FeedbackName')}\n                />\n                <TextSetting\n                    id='feedbackEmail'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationEmailTitle'\n                            defaultMessage='Notification From Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.notificationEmailExample', 'Ex: \"mattermost@yourcompany.com\", \"admin@yourcompany.com\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.notificationEmailDescription'\n                            defaultMessage='Email address displayed on email account used when sending notification emails from Mattermost.'\n                        />\n                    }\n                    value={this.state.feedbackEmail}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.FeedbackEmail')}\n                />\n                <TextSetting\n                    id='feedbackOrganization'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationOrganization'\n                            defaultMessage='Notification Footer Mailing Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.notificationOrganizationExample', 'Ex: \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.notificationOrganizationDescription'\n                            defaultMessage='Organization name and address displayed on email notifications from Mattermost, such as \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\". If the field is left empty, the organization name and address will not be displayed.'\n                        />\n                    }\n                    value={this.state.feedbackOrganization}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.FeedbackOrganization')}\n                />\n                <TextSetting\n                    id='smtpServer'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpServerTitle'\n                            defaultMessage='SMTP Server:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpServerExample', 'Ex: \"smtp.yourcompany.com\", \"email-smtp.us-east-1.amazonaws.com\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpServerDescription'\n                            defaultMessage='Location of SMTP email server.'\n                        />\n                    }\n                    value={this.state.smtpServer}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPServer')}\n                />\n                <TextSetting\n                    id='smtpPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpPortTitle'\n                            defaultMessage='SMTP Server Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpPortExample', 'Ex: \"25\", \"465\", \"587\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpPortDescription'\n                            defaultMessage='Port of SMTP email server.'\n                        />\n                    }\n                    value={this.state.smtpPort}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPPort')}\n                />\n                <BooleanSetting\n                    id='enableSMTPAuth'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.enableSMTPAuthTitle'\n                            defaultMessage='Enable SMTP Authentication: '\n                        />\n                    }\n                    helpText={[\n                        <FormattedHTMLMessage\n                            key='admin.email.enableSMTPAuthDesc'\n                            id='admin.email.enableSMTPAuthDesc'\n                            defaultMessage='When true, SMTP Authentication is enabled.'\n                        />,\n                    ]}\n                    value={this.state.enableSMTPAuth}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.EnableSMTPAuth')}\n                />\n                <TextSetting\n                    id='smtpUsername'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpUsernameTitle'\n                            defaultMessage='SMTP Server Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpUsernameExample', 'Ex: \"admin@yourcompany.com\", \"AKIADTOVBGERKLCBV\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpUsernameDescription'\n                            defaultMessage=' Obtain this credential from administrator setting up your email server.'\n                        />\n                    }\n                    value={this.state.smtpUsername}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || !this.state.enableSMTPAuth}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPUsername')}\n                />\n                <TextSetting\n                    id='smtpPassword'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpPasswordTitle'\n                            defaultMessage='SMTP Server Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpPasswordExample', 'Ex: \"yourpassword\", \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpPasswordDescription'\n                            defaultMessage=' Obtain this credential from administrator setting up your email server.'\n                        />\n                    }\n                    value={this.state.smtpPassword}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || !this.state.enableSMTPAuth}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPPassword')}\n                />\n                <ConnectionSecurityDropdownSettingEmail\n                    value={this.state.connectionSecurity}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.ConnectionSecurity')}\n                />\n                <EmailConnectionTest\n                    config={this.props.config}\n                    getConfigFromState={this.getConfigFromState}\n                    disabled={!this.state.sendEmailNotifications}\n                />\n                <BooleanSetting\n                    id='skipServerCertificateVerification'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.skipServerCertificateVerification.title'\n                            defaultMessage='Skip Server Certificate Verification: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.skipServerCertificateVerification.description'\n                            defaultMessage='When true, Mattermost will not verify the email server certificate.'\n                        />\n                    }\n                    value={this.state.skipServerCertificateVerification}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || this.state.connectionSecurity === ''}\n                    setByEnv={this.isSetByEnv('EmailSettings.SkipServerCertificateVerification')}\n                />\n                <BooleanSetting\n                    id='enableSecurityFixAlert'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.securityTitle'\n                            defaultMessage='Enable Security Alerts: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.securityDesc'\n                            defaultMessage='When true, System Administrators are notified by email if a relevant security fix alert has been announced in the last 12 hours. Requires email to be enabled.'\n                        />\n                    }\n                    value={this.state.enableSecurityFixAlert}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableSecurityFixAlert')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {testEmail} from 'mattermost-redux/actions/admin';\n\nimport EmailConnectionTestButton from './email_connection_test.jsx';\n\nexport default connect(null, mapDispatchToProps)(EmailConnectionTestButton);\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            testEmail,\n        }, dispatch),\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class EmailConnectionTestButton extends React.Component {\n    static get propTypes() {\n        return {\n            config: PropTypes.object.isRequired,\n            getConfigFromState: PropTypes.func.isRequired,\n            disabled: PropTypes.bool.isRequired,\n            actions: PropTypes.shape({\n                testEmail: PropTypes.func.isRequired,\n            }).isRequired,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            testing: false,\n            success: false,\n            fail: null,\n        };\n    }\n\n    handleTestConnection = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            testing: true,\n            success: false,\n            fail: null,\n        });\n\n        const config = JSON.parse(JSON.stringify(this.props.config));\n        this.props.getConfigFromState(config);\n\n        this.props.actions.testEmail(config).then(\n            (data) => {\n                if (data.error) {\n                    let fail = data.error.message;\n                    if (data.error.detailed_error) {\n                        fail += ' - ' + data.error.detailed_error;\n                    }\n                    this.setState({\n                        testing: false,\n                        fail,\n                    });\n                } else {\n                    this.setState({\n                        testing: false,\n                        success: true,\n                    });\n                }\n            }\n        );\n    }\n\n    render() {\n        let testMessage = null;\n        if (this.state.success) {\n            testMessage = (\n                <div className='alert alert-success'>\n                    <i\n                        className='fa fa-check'\n                        title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                    />\n                    <FormattedMessage\n                        id='admin.email.emailSuccess'\n                        defaultMessage='No errors were reported while sending an email.  Please check your inbox to make sure.'\n                    />\n                </div>\n            );\n        } else if (this.state.fail) {\n            testMessage = (\n                <div className='alert alert-warning'>\n                    <i\n                        className='fa fa-warning'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    {this.state.fail}\n                </div>\n            );\n        }\n\n        let contents = null;\n        if (this.state.testing) {\n            contents = (\n                <span>\n                    <span\n                        className='fa fa-refresh icon--rotate'\n                        title={Utils.localizeMessage('generic_icons.testing', 'Testing Icon')}\n                    />\n                    {Utils.localizeMessage('admin.email.testing', 'Testing...')}\n                </span>\n            );\n        } else {\n            contents = (\n                <FormattedMessage\n                    id='admin.email.connectionSecurityTest'\n                    defaultMessage='Test Connection'\n                />\n            );\n        }\n\n        return (\n            <div className='form-group email-connection-test'>\n                <div className='col-sm-offset-4 col-sm-8'>\n                    <div className='help-text'>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleTestConnection}\n                            disabled={this.props.disabled}\n                        >\n                            {contents}\n                        </button>\n                        <div>\n                            {testMessage}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport DropdownSetting from './dropdown_setting.jsx';\n\nimport {CONNECTION_SECURITY_HELP_TEXT_EMAIL} from './admin_definition_constants';\n\nexport function ConnectionSecurityDropdownSettingEmail(props) {\n    return (\n        <DropdownSetting\n            id='connectionSecurity'\n            values={[\n                {value: '', text: Utils.localizeMessage('admin.connectionSecurityNone', 'None')},\n                {value: 'TLS', text: Utils.localizeMessage('admin.connectionSecurityTls', 'TLS (Recommended)')},\n                {value: 'STARTTLS', text: Utils.localizeMessage('admin.connectionSecurityStart')},\n            ]}\n            label={\n                <FormattedMessage\n                    id='admin.connectionSecurityTitle'\n                    defaultMessage='Connection Security:'\n                />\n            }\n            value={props.value}\n            onChange={props.onChange}\n            disabled={props.disabled}\n            helpText={CONNECTION_SECURITY_HELP_TEXT_EMAIL}\n            setByEnv={props.setByEnv}\n        />\n    );\n}\nConnectionSecurityDropdownSettingEmail.defaultProps = {\n};\n\nConnectionSecurityDropdownSettingEmail.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    setByEnv: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class GitLabSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n        this.updateGitLabUrl = this.updateGitLabUrl.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.GitLabSettings.Enable = this.state.enable;\n        config.GitLabSettings.Id = this.state.id;\n        config.GitLabSettings.Secret = this.state.secret;\n        config.GitLabSettings.UserApiEndpoint = this.state.userApiEndpoint;\n        config.GitLabSettings.AuthEndpoint = this.state.authEndpoint;\n        config.GitLabSettings.TokenEndpoint = this.state.tokenEndpoint;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            enable: config.GitLabSettings.Enable,\n            id: config.GitLabSettings.Id,\n            secret: config.GitLabSettings.Secret,\n            gitLabUrl: config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', ''),\n            userApiEndpoint: config.GitLabSettings.UserApiEndpoint,\n            authEndpoint: config.GitLabSettings.AuthEndpoint,\n            tokenEndpoint: config.GitLabSettings.TokenEndpoint,\n        };\n    }\n\n    updateGitLabUrl(id, value) {\n        let trimmedValue = value;\n        if (value.endsWith('/')) {\n            trimmedValue = value.slice(0, -1);\n        }\n\n        this.setState({\n            saveNeeded: true,\n            gitLabUrl: value,\n            userApiEndpoint: trimmedValue + '/api/v4/user',\n            authEndpoint: trimmedValue + '/oauth/authorize',\n            tokenEndpoint: trimmedValue + '/oauth/token',\n        });\n    }\n\n    isGitLabURLSetByEnv = () => {\n        // Assume that if one of these has been set using an environment variable,\n        // all of them have been set that way\n        return this.isSetByEnv('GitLabSettings.AuthEndpoint') ||\n            this.isSetByEnv('GitLabSettings.TokenEndpoint') ||\n            this.isSetByEnv('GitLabSettings.UserApiEndpoint');\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.authentication.gitlab'\n                defaultMessage='GitLab'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enable'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.enableTitle'\n                            defaultMessage='Enable authentication with GitLab: '\n                        />\n                    }\n                    helpText={\n                        <div>\n                            <FormattedMessage\n                                id='admin.gitlab.enableDescription'\n                                defaultMessage='When true, Mattermost allows team creation and account signup using GitLab OAuth.'\n                            />\n                            <br/>\n                            <FormattedHTMLMessage\n                                id='admin.gitlab.EnableHtmlDesc'\n                                defaultMessage='<ol><li>Log in to your GitLab account and go to Profile Settings -> Applications.</li><li>Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\". </li><li>Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.</li><li>Complete the Endpoint URLs below. </li></ol>'\n                            />\n                        </div>\n                    }\n                    value={this.state.enable}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('GitLabSettings.Enable')}\n                />\n                <TextSetting\n                    id='id'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.clientIdTitle'\n                            defaultMessage='Application ID:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.gitlab.clientIdExample', 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.gitlab.clientIdDescription'\n                            defaultMessage='Obtain this value via the instructions above for logging into GitLab'\n                        />\n                    }\n                    value={this.state.id}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('GitLabSettings.Id')}\n                />\n                <TextSetting\n                    id='secret'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.clientSecretTitle'\n                            defaultMessage='Application Secret Key:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.gitlab.clientSecretExample', 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.gitlab.clientSecretDescription'\n                            defaultMessage='Obtain this value via the instructions above for logging into GitLab.'\n                        />\n                    }\n                    value={this.state.secret}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('GitLabSettings.Secret')}\n                />\n                <TextSetting\n                    id='gitlabUrl'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.siteUrl'\n                            defaultMessage='GitLab Site URL:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.gitlab.siteUrlExample', 'E.g.: https://')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.gitlab.siteUrlDescription'\n                            defaultMessage='Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.'\n                        />\n                    }\n                    value={this.state.gitLabUrl}\n                    onChange={this.updateGitLabUrl}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isGitLabURLSetByEnv()}\n                />\n                <TextSetting\n                    id='userApiEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.userTitle'\n                            defaultMessage='User API Endpoint:'\n                        />\n                    }\n                    placeholder={''}\n                    value={this.state.userApiEndpoint}\n                    disabled={true}\n                    setByEnv={false}\n                />\n                <TextSetting\n                    id='authEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.authTitle'\n                            defaultMessage='Auth Endpoint:'\n                        />\n                    }\n                    placeholder={''}\n                    value={this.state.authEndpoint}\n                    disabled={true}\n                    setByEnv={false}\n                />\n                <TextSetting\n                    id='tokenEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.tokenTitle'\n                            defaultMessage='Token Endpoint:'\n                        />\n                    }\n                    placeholder={''}\n                    value={this.state.tokenEndpoint}\n                    disabled={true}\n                    setByEnv={false}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport {JobTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\nimport RadioSetting from './radio_setting';\n\nconst exportFormats = {\n    EXPORT_FORMAT_CSV: 'csv',\n    EXPORT_FORMAT_ACTIANCE: 'actiance',\n    EXPORT_FORMAT_GLOBALRELAY: 'globalrelay',\n};\n\nexport default class MessageExportSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.MessageExportSettings.EnableExport = this.state.enableComplianceExport;\n        config.MessageExportSettings.ExportFormat = this.state.exportFormat;\n        config.MessageExportSettings.DailyRunTime = this.state.exportJobStartTime;\n\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            config.MessageExportSettings.GlobalRelaySettings = {\n                CustomerType: this.state.globalRelayCustomerType,\n                SmtpUsername: this.state.globalRelaySmtpUsername,\n                SmtpPassword: this.state.globalRelaySmtpPassword,\n                EmailAddress: this.state.globalRelayEmailAddress,\n\n            };\n        }\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const state = {\n            enableComplianceExport: config.MessageExportSettings.EnableExport,\n            exportFormat: config.MessageExportSettings.ExportFormat,\n            exportJobStartTime: config.MessageExportSettings.DailyRunTime,\n        };\n        if (config.MessageExportSettings.GlobalRelaySettings) {\n            state.globalRelayCustomerType = config.MessageExportSettings.GlobalRelaySettings.CustomerType;\n            state.globalRelaySmtpUsername = config.MessageExportSettings.GlobalRelaySettings.SmtpUsername;\n            state.globalRelaySmtpPassword = config.MessageExportSettings.GlobalRelaySettings.SmtpPassword;\n            state.globalRelayEmailAddress = config.MessageExportSettings.GlobalRelaySettings.EmailAddress;\n        }\n        return state;\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.complianceExport.title'\n                defaultMessage='Compliance Export (Beta)'\n            />\n        );\n    }\n\n    renderSettings() {\n        const exportFormatOptions = [\n            {value: exportFormats.EXPORT_FORMAT_CSV, text: Utils.localizeMessage('admin.complianceExport.exportFormat.csv', 'CSV')},\n            {value: exportFormats.EXPORT_FORMAT_ACTIANCE, text: Utils.localizeMessage('admin.complianceExport.exportFormat.actiance', 'Actiance XML')},\n            {value: exportFormats.EXPORT_FORMAT_GLOBALRELAY, text: Utils.localizeMessage('admin.complianceExport.exportFormat.globalrelay', 'GlobalRelay EML')},\n        ];\n\n        // if the export format is globalrelay, the user needs to set some additional parameters\n        let globalRelaySettings;\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            const globalRelayCustomerType = (\n                <RadioSetting\n                    id='globalRelayCustomerType'\n                    values={[\n                        {value: 'A9', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a9.description', 'A9/Type 9')},\n                        {value: 'A10', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a10.description', 'A10/Type 10')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.title'\n                            defaultMessage='Customer Type:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.description'\n                            defaultMessage='The type of GlobalRelay customer account that your organization has.'\n                        />\n                    }\n                    value={this.state.globalRelayCustomerType ? this.state.globalRelayCustomerType : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.CustomerType')}\n                />\n            );\n\n            const globalRelaySmtpUsername = (\n                <TextSetting\n                    id='globalRelaySmtpUsername'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.title'\n                            defaultMessage='SMTP Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpUsername.example', 'E.g.: \"globalRelayUser\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.description'\n                            defaultMessage='The username that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpUsername ? this.state.globalRelaySmtpUsername : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpUsername')}\n                />\n            );\n\n            const globalRelaySmtpPassword = (\n                <TextSetting\n                    id='globalRelaySmtpPassword'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.title'\n                            defaultMessage='SMTP Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpPassword.example', 'E.g.: \"globalRelayPassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.description'\n                            defaultMessage='The password that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpPassword ? this.state.globalRelaySmtpPassword : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpPassword')}\n                />\n            );\n\n            const globalRelayEmail = (\n                <TextSetting\n                    id='globalRelayEmailAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.title'\n                            defaultMessage='Email Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelayEmailAddress.example', 'E.g.: \"globalrelay@mattermost.com\"')}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.description'\n                            defaultMessage='The email address that your GlobalRelay server monitors for incoming Compliance Exports.'\n                        />\n                    }\n                    value={this.state.globalRelayEmailAddress ? this.state.globalRelayEmailAddress : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.EmailAddress')}\n                />\n            );\n\n            globalRelaySettings = (\n                <SettingsGroup id={'globalRelaySettings'} >\n                    {globalRelayCustomerType}\n                    {globalRelaySmtpUsername}\n                    {globalRelaySmtpPassword}\n                    {globalRelayEmail}\n                </SettingsGroup>\n            );\n        }\n\n        const dropdownHelpText = (\n            <FormattedHTMLMessage\n                id='admin.complianceExport.exportFormat.description'\n                defaultMessage='Format of the compliance export. Corresponds to the system that you want to import the data into.<br><br>For Actiance XML, compliance export files are written to the \"exports\" subdirectory of the configured <a href=\"/admin_console/files/storage\">Local Storage Directory</a>. For Global Relay EML, they are emailed to the configured email address.'\n            />\n        );\n\n        return (\n            <SettingsGroup>\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedHTMLMessage\n                            id='admin.complianceExport.description'\n                            defaultMessage='This feature supports compliance exports to the Actiance XML and GlobalRelay EML formats, and is currently in beta. Support for the Mattermost CSV format is scheduled for a future release, and will replace the existing <a href=\\\"/admin_console/general/compliance\\\">Compliance</a> feature.'\n                        />\n                    </div>\n                </div>\n\n                <BooleanSetting\n                    id='enableComplianceExport'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.complianceExportTitle'\n                            defaultMessage='Enable Compliance Export:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.service.complianceExportDesc'\n                            defaultMessage='When true, Mattermost will export all messages that were posted in the last 24 hours. The export task is scheduled to run once per day. See <a href=\\\"https://about.mattermost.com/default-compliance-export-documentation\\\" target=\\\"_blank\\\">the documentation</a> to learn more.'\n                        />\n                    }\n                    value={this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableExport')}\n                />\n\n                <TextSetting\n                    id='exportJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportJobStartTime.title'\n                            defaultMessage='Compliance Export Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.exportJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.complianceExport.exportJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled compliance export job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.exportJobStartTime}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DailyRunTime')}\n                />\n\n                <DropdownSetting\n                    id='exportFormat'\n                    values={exportFormatOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportFormat.title'\n                            defaultMessage='Export Format:'\n                        />\n                    }\n                    helpText={dropdownHelpText}\n                    value={this.state.exportFormat}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.ExportFormat')}\n                />\n\n                {globalRelaySettings}\n\n                <JobsTable\n                    jobType={JobTypes.MESSAGE_EXPORT}\n                    disabled={!this.state.enableComplianceExport}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.title'\n                            defaultMessage='Run Compliance Export Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.help'\n                            defaultMessage='Initiates a Compliance Export job immediately.'\n                        />\n                    }\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class OAuthSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.getStateFromConfig = this.getStateFromConfig.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n        this.renderOffice365 = this.renderOffice365.bind(this);\n        this.renderGoogle = this.renderGoogle.bind(this);\n        this.renderGitLab = this.renderGitLab.bind(this);\n        this.changeType = this.changeType.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.GitLabSettings.Enable = false;\n        config.GoogleSettings.Enable = false;\n        config.Office365Settings.Enable = false;\n\n        if (this.state.oauthType === Constants.GITLAB_SERVICE) {\n            config.GitLabSettings.Enable = true;\n            config.GitLabSettings.Id = this.state.id;\n            config.GitLabSettings.Secret = this.state.secret;\n            config.GitLabSettings.UserApiEndpoint = this.state.userApiEndpoint;\n            config.GitLabSettings.AuthEndpoint = this.state.authEndpoint;\n            config.GitLabSettings.TokenEndpoint = this.state.tokenEndpoint;\n        }\n\n        if (this.state.oauthType === Constants.GOOGLE_SERVICE) {\n            config.GoogleSettings.Enable = true;\n            config.GoogleSettings.Id = this.state.id;\n            config.GoogleSettings.Secret = this.state.secret;\n            config.GoogleSettings.UserApiEndpoint = 'https://www.googleapis.com/plus/v1/people/me';\n            config.GoogleSettings.AuthEndpoint = 'https://accounts.google.com/o/oauth2/v2/auth';\n            config.GoogleSettings.TokenEndpoint = 'https://www.googleapis.com/oauth2/v4/token';\n            config.GoogleSettings.Scope = 'profile email';\n        }\n\n        if (this.state.oauthType === Constants.OFFICE365_SERVICE) {\n            config.Office365Settings.Enable = true;\n            config.Office365Settings.Id = this.state.id;\n            config.Office365Settings.Secret = this.state.secret;\n            config.Office365Settings.UserApiEndpoint = 'https://graph.microsoft.com/v1.0/me';\n            config.Office365Settings.AuthEndpoint = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize';\n            config.Office365Settings.TokenEndpoint = 'https://login.microsoftonline.com/common/oauth2/v2.0/token';\n            config.Office365Settings.Scope = 'User.Read';\n        }\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        this.config = config;\n\n        let oauthType = 'off';\n        let settings = {};\n        if (config.GitLabSettings.Enable) {\n            oauthType = Constants.GITLAB_SERVICE;\n            settings = config.GitLabSettings;\n        } else if (config.GoogleSettings.Enable) {\n            oauthType = Constants.GOOGLE_SERVICE;\n            settings = config.GoogleSettings;\n        } else if (config.Office365Settings.Enable) {\n            oauthType = Constants.OFFICE365_SERVICE;\n            settings = config.Office365Settings;\n        }\n\n        return {\n            oauthType,\n            id: settings.Id,\n            secret: settings.Secret,\n            gitLabUrl: config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', ''),\n            userApiEndpoint: settings.UserApiEndpoint,\n            authEndpoint: settings.AuthEndpoint,\n            tokenEndpoint: settings.TokenEndpoint,\n        };\n    }\n\n    changeType(id, value) {\n        let settings = {};\n        let gitLabUrl = '';\n        if (value === Constants.GITLAB_SERVICE) {\n            settings = this.config.GitLabSettings;\n            gitLabUrl = settings.UserApiEndpoint.replace('/api/v4/user', '');\n        } else if (value === Constants.GOOGLE_SERVICE) {\n            settings = this.config.GoogleSettings;\n        } else if (value === Constants.OFFICE365_SERVICE) {\n            settings = this.config.Office365Settings;\n        }\n\n        this.setState({\n            id: settings.Id,\n            secret: settings.Secret,\n            gitLabUrl,\n            userApiEndpoint: settings.UserApiEndpoint,\n            authEndpoint: settings.AuthEndpoint,\n            tokenEndpoint: settings.TokenEndpoint,\n        });\n\n        this.handleChange(id, value);\n    }\n\n    updateGitLabUrl = (id, value) => {\n        let trimmedValue = value;\n        if (value.endsWith('/')) {\n            trimmedValue = value.slice(0, -1);\n        }\n\n        this.setState({\n            saveNeeded: true,\n            gitLabUrl: value,\n            userApiEndpoint: trimmedValue + '/api/v4/user',\n            authEndpoint: trimmedValue + '/oauth/authorize',\n            tokenEndpoint: trimmedValue + '/oauth/token',\n        });\n    }\n\n    isGitLabURLSetByEnv = () => {\n        // Assume that if one of these has been set using an environment variable,\n        // all of them have been set that way\n        return this.isSetByEnv('GitLabSettings.AuthEndpoint') ||\n            this.isSetByEnv('GitLabSettings.TokenEndpoint') ||\n            this.isSetByEnv('GitLabSettings.UserApiEndpoint');\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.authentication.oauth'\n                defaultMessage='OAuth 2.0'\n            />\n        );\n    }\n\n    renderGoogle() {\n        return (\n            <div>\n                <TextSetting\n                    id='id'\n                    label={\n                        <FormattedMessage\n                            id='admin.google.clientIdTitle'\n                            defaultMessage='Client ID:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.google.clientIdExample', 'E.g.: \"7602141235235-url0fhs1mayfasbmop5qlfns8dh4.apps.googleusercontent.com\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.google.clientIdDescription'\n                            defaultMessage='The Client ID you received when registering your application with Google.'\n                        />\n                    }\n                    value={this.state.id}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('GoogleSettings.Id')}\n                />\n                <TextSetting\n                    id='secret'\n                    label={\n                        <FormattedMessage\n                            id='admin.google.clientSecretTitle'\n                            defaultMessage='Client Secret:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.google.clientSecretExample', 'E.g.: \"H8sz0Az-dDs2p15-7QzD231\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.google.clientSecretDescription'\n                            defaultMessage='The Client Secret you received when registering your application with Google.'\n                        />\n                    }\n                    value={this.state.secret}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('GoogleSettings.Secret')}\n                />\n                <TextSetting\n                    id='userApiEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.google.userTitle'\n                            defaultMessage='User API Endpoint:'\n                        />\n                    }\n                    value='https://www.googleapis.com/plus/v1/people/me'\n                    disabled={true}\n                    setByEnv={false}\n                />\n                <TextSetting\n                    id='authEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.google.authTitle'\n                            defaultMessage='Auth Endpoint:'\n                        />\n                    }\n                    value='https://accounts.google.com/o/oauth2/v2/auth'\n                    disabled={true}\n                    setByEnv={false}\n                />\n                <TextSetting\n                    id='tokenEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.google.tokenTitle'\n                            defaultMessage='Token Endpoint:'\n                        />\n                    }\n                    value='https://www.googleapis.com/oauth2/v4/token'\n                    disabled={true}\n                    setByEnv={false}\n                />\n            </div>\n        );\n    }\n\n    renderOffice365() {\n        return (\n            <div>\n                <TextSetting\n                    id='id'\n                    label={\n                        <FormattedMessage\n                            id='admin.office365.clientIdTitle'\n                            defaultMessage='Application ID:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.office365.clientIdExample', 'E.g.: \"adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.office365.clientIdDescription'\n                            defaultMessage='The Application/Client ID you received when registering your application with Microsoft.'\n                        />\n                    }\n                    value={this.state.id}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('Office365Settings.Id')}\n                />\n                <TextSetting\n                    id='secret'\n                    label={\n                        <FormattedMessage\n                            id='admin.office365.clientSecretTitle'\n                            defaultMessage='Application Secret Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.office365.clientSecretExample', 'E.g.: \"shAieM47sNBfgl20f8ci294\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.office365.clientSecretDescription'\n                            defaultMessage='The Application Secret Password you generated when registering your application with Microsoft.'\n                        />\n                    }\n                    value={this.state.secret}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('Office365Settings.Secret')}\n                />\n                <TextSetting\n                    id='userApiEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.office365.userTitle'\n                            defaultMessage='User API Endpoint:'\n                        />\n                    }\n                    value='https://graph.microsoft.com/v1.0/me'\n                    disabled={true}\n                    setByEnv={false}\n                />\n                <TextSetting\n                    id='authEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.office365.authTitle'\n                            defaultMessage='Auth Endpoint:'\n                        />\n                    }\n                    value='https://login.microsoftonline.com/common/oauth2/v2.0/authorize'\n                    disabled={true}\n                    setByEnv={false}\n                />\n                <TextSetting\n                    id='tokenEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.office365.tokenTitle'\n                            defaultMessage='Token Endpoint:'\n                        />\n                    }\n                    value='https://login.microsoftonline.com/common/oauth2/v2.0/token'\n                    disabled={true}\n                    setByEnv={false}\n                />\n            </div>\n        );\n    }\n\n    renderGitLab() {\n        return (\n            <div>\n                <TextSetting\n                    id='id'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.clientIdTitle'\n                            defaultMessage='Application ID:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.gitlab.clientIdExample', 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.gitlab.clientIdDescription'\n                            defaultMessage='Obtain this value via the instructions above for logging into GitLab'\n                        />\n                    }\n                    value={this.state.id}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('GitLabSettings.Id')}\n                />\n                <TextSetting\n                    id='secret'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.clientSecretTitle'\n                            defaultMessage='Application Secret Key:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.gitlab.clientSecretExample', 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.gitlab.clientSecretDescription'\n                            defaultMessage='Obtain this value via the instructions above for logging into GitLab.'\n                        />\n                    }\n                    value={this.state.secret}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('GitLabSettings.Secret')}\n                />\n                <TextSetting\n                    id='gitlabUrl'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.siteUrl'\n                            defaultMessage='GitLab Site URL:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.gitlab.siteUrlExample', 'E.g.: https://')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.gitlab.siteUrlDescription'\n                            defaultMessage='Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.'\n                        />\n                    }\n                    value={this.state.gitLabUrl}\n                    onChange={this.updateGitLabUrl}\n                    setByEnv={this.isGitLabURLSetByEnv()}\n                />\n                <TextSetting\n                    id='userApiEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.userTitle'\n                            defaultMessage='User API Endpoint:'\n                        />\n                    }\n                    placeholder={''}\n                    value={this.state.userApiEndpoint}\n                    disabled={true}\n                    setByEnv={false}\n                />\n                <TextSetting\n                    id='authEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.authTitle'\n                            defaultMessage='Auth Endpoint:'\n                        />\n                    }\n                    placeholder={''}\n                    value={this.state.authEndpoint}\n                    disabled={true}\n                    setByEnv={false}\n                />\n                <TextSetting\n                    id='tokenEndpoint'\n                    label={\n                        <FormattedMessage\n                            id='admin.gitlab.tokenTitle'\n                            defaultMessage='Token Endpoint:'\n                        />\n                    }\n                    placeholder={''}\n                    value={this.state.tokenEndpoint}\n                    disabled={true}\n                    setByEnv={false}\n                />\n            </div>\n        );\n    }\n\n    renderSettings() {\n        let contents;\n        let helpText;\n        if (this.state.oauthType === Constants.GITLAB_SERVICE) {\n            contents = this.renderGitLab();\n            helpText = (\n                <FormattedHTMLMessage\n                    id='admin.gitlab.EnableHtmlDesc'\n                    defaultMessage='<ol><li>Log in to your GitLab account and go to Profile Settings -> Applications.</li><li>Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\". </li><li>Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.</li><li>Complete the Endpoint URLs below. </li></ol>'\n                />\n            );\n        } else if (this.state.oauthType === Constants.GOOGLE_SERVICE) {\n            contents = this.renderGoogle();\n            helpText = (\n                <FormattedHTMLMessage\n                    id='admin.google.EnableHtmlDesc'\n                    defaultMessage='<ol><li><a target=\"_blank\" href=\"https://accounts.google.com/login\">Log in</a> to your Google account.</li><li>Go to <a target=\"_blank\" href=\"https://console.developers.google.com\">https://console.developers.google.com</a>, click <strong>Credentials</strong> in the left hand sidebar and enter \"Mattermost - your-company-name\" as the <strong>Project Name</strong>, then click <strong>Create</strong>.</li><li>Click the <strong>OAuth consent screen</strong> header and enter \"Mattermost\" as the <strong>Product name shown to users</strong>, then click <strong>Save</strong>.</li><li>Under the <strong>Credentials</strong> header, click <strong>Create credentials</strong>, choose <strong>OAuth client ID</strong> and select <strong>Web Application</strong>.</li><li>Under <strong>Restrictions</strong> and <strong>Authorized redirect URIs</strong> enter <strong>your-mattermost-url/signup/google/complete</strong> (example: http://localhost:8065/signup/google/complete). Click <strong>Create</strong>.</li><li>Paste the <strong>Client ID</strong> and <strong>Client Secret</strong> to the fields below, then click <strong>Save</strong>.</li><li>Finally, go to <a target=\"_blank\" href=\"https://console.developers.google.com/apis/api/plus/overview\">Google+ API</a> and click <strong>Enable</strong>. This might take a few minutes to propagate through Google`s systems.</li></ol>'\n                />\n            );\n        } else if (this.state.oauthType === Constants.OFFICE365_SERVICE) {\n            contents = this.renderOffice365();\n            helpText = (\n                <FormattedHTMLMessage\n                    id='admin.office365.EnableHtmlDesc'\n                    defaultMessage='<ol><li><a target=\"_blank\" href=\"https://login.microsoftonline.com/\">Log in</a> to your Microsoft or Office 365 account. Make sure it`s the account on the same <a target=\"_blank\" href=\"https://msdn.microsoft.com/en-us/library/azure/jj573650.aspx#Anchor_0\">tenant</a> that you would like users to log in with.</li><li>Go to <a target=\"_blank\" href=\"https://apps.dev.microsoft.com\">https://apps.dev.microsoft.com</a>, click <strong>Go to app list</strong> > <strong>Add an app</strong> and use \"Mattermost - your-company-name\" as the <strong>Application Name</strong>.</li><li>Under <strong>Application Secrets</strong>, click <strong>Generate New Password</strong> and paste it to the <strong>Application Secret Password</strong> field below.</li><li>Under <strong>Platforms</strong>, click <strong>Add Platform</strong>, choose <strong>Web</strong> and enter <strong>your-mattermost-url/signup/office365/complete</strong> (example: http://localhost:8065/signup/office365/complete) under <strong>Redirect URIs</strong>. Also uncheck <strong>Allow Implicit Flow</strong>.</li><li>Finally, click <strong>Save</strong> and then paste the <strong>Application ID</strong> below.</li></ol>'\n                />\n            );\n        }\n\n        const oauthTypes = [];\n        oauthTypes.push({value: 'off', text: Utils.localizeMessage('admin.oauth.off', 'Do not allow sign-in via an OAuth 2.0 provider.')});\n        oauthTypes.push({value: Constants.GITLAB_SERVICE, text: Utils.localizeMessage('admin.oauth.gitlab', 'GitLab')});\n        if (this.props.license.IsLicensed === 'true') {\n            if (this.props.license.GoogleOAuth === 'true') {\n                oauthTypes.push({value: Constants.GOOGLE_SERVICE, text: Utils.localizeMessage('admin.oauth.google', 'Google Apps')});\n            }\n            if (this.props.license.Office365OAuth === 'true') {\n                oauthTypes.push({value: Constants.OFFICE365_SERVICE, text: Utils.localizeMessage('admin.oauth.office365', 'Office 365 (Beta)')});\n            }\n        }\n\n        return (\n            <SettingsGroup>\n                <DropdownSetting\n                    id='oauthType'\n                    values={oauthTypes}\n                    label={\n                        <FormattedMessage\n                            id='admin.oauth.select'\n                            defaultMessage='Select OAuth 2.0 Service Provider:'\n                        />\n                    }\n                    helpText={helpText}\n                    value={this.state.oauthType}\n                    onChange={this.changeType}\n                    setByEnv={false}\n                />\n                {contents}\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport Setting from './setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class PasswordSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n\n        this.getSampleErrorMsg = this.getSampleErrorMsg.bind(this);\n\n        this.handlePasswordLengthChange = this.handlePasswordLengthChange.bind(this);\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n\n        this.state = Object.assign(this.state, {\n            passwordMinimumLength: props.config.PasswordSettings.MinimumLength,\n            passwordLowercase: props.config.PasswordSettings.Lowercase,\n            passwordNumber: props.config.PasswordSettings.Number,\n            passwordUppercase: props.config.PasswordSettings.Uppercase,\n            passwordSymbol: props.config.PasswordSettings.Symbol,\n            maximumLoginAttempts: props.config.ServiceSettings.MaximumLoginAttempts,\n        });\n\n        // Update sample message from config settings\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (props.config.PasswordSettings.Lowercase) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (props.config.PasswordSettings.Uppercase) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (props.config.PasswordSettings.Number) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (props.config.PasswordSettings.Symbol) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        this.sampleErrorMsg = (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (this.state.passwordMinimumLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    getConfigFromState(config) {\n        config.PasswordSettings.MinimumLength = this.parseIntNonZero(this.state.passwordMinimumLength, Constants.MIN_PASSWORD_LENGTH);\n        config.PasswordSettings.Lowercase = this.refs.lowercase.checked;\n        config.PasswordSettings.Uppercase = this.refs.uppercase.checked;\n        config.PasswordSettings.Number = this.refs.number.checked;\n        config.PasswordSettings.Symbol = this.refs.symbol.checked;\n\n        config.ServiceSettings.MaximumLoginAttempts = this.parseIntNonZero(this.state.maximumLoginAttempts);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            passwordMinimumLength: config.PasswordSettings.MinimumLength,\n            passwordLowercase: config.PasswordSettings.Lowercase,\n            passwordNumber: config.PasswordSettings.Number,\n            passwordUppercase: config.PasswordSettings.Uppercase,\n            passwordSymbol: config.PasswordSettings.Symbol,\n            maximumLoginAttempts: config.ServiceSettings.MaximumLoginAttempts,\n        };\n    }\n\n    getSampleErrorMsg(minLength) {\n        if (this.props.config.PasswordSettings.MinimumLength > Constants.MAX_PASSWORD_LENGTH || this.props.config.PasswordSettings.MinimumLength < Constants.MIN_PASSWORD_LENGTH) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.passwordMinLength'\n                    default='Invalid minimum length, cannot show preview.'\n                />\n            );\n        }\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (this.refs.lowercase.checked) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (this.refs.uppercase.checked) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (this.refs.number.checked) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (this.refs.symbol.checked) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        return (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (minLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    handlePasswordLengthChange(id, value) {\n        this.sampleErrorMsg = this.getSampleErrorMsg(value);\n        this.handleChange(id, value);\n    }\n\n    handleCheckboxChange(id, value) {\n        this.sampleErrorMsg = this.getSampleErrorMsg(this.state.passwordMinimumLength);\n        this.handleChange(id, value);\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.security.password'\n                defaultMessage='Password'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <div>\n                    <TextSetting\n                        id='passwordMinimumLength'\n                        label={\n                            <FormattedMessage\n                                id='admin.password.minimumLength'\n                                defaultMessage='Minimum Password Length:'\n                            />\n                        }\n                        placeholder={Utils.localizeMessage('admin.password.minimumLengthExample', 'E.g.: \"5\"')}\n                        helpText={\n                            <FormattedMessage\n                                id='admin.password.minimumLengthDescription'\n                                defaultMessage='Minimum number of characters required for a valid password. Must be a whole number greater than or equal to {min} and less than or equal to {max}.'\n                                values={{\n                                    min: Constants.MIN_PASSWORD_LENGTH,\n                                    max: Constants.MAX_PASSWORD_LENGTH,\n                                }}\n                            />\n                        }\n                        value={this.state.passwordMinimumLength}\n                        onChange={this.handlePasswordLengthChange}\n                        setByEnv={this.isSetByEnv('PasswordSettings.MinimumLength')}\n                    />\n                    <Setting\n                        label={\n                            <FormattedMessage\n                                id='passwordRequirements'\n                                defaultMessage='Password Requirements:'\n                            />\n                        }\n                    >\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='lowercase'\n                                    defaultChecked={this.state.passwordLowercase}\n                                    name='admin.password.lowercase'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.lowercase'\n                                    defaultMessage='At least one lowercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='uppercase'\n                                    defaultChecked={this.state.passwordUppercase}\n                                    name='admin.password.uppercase'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.uppercase'\n                                    defaultMessage='At least one uppercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='number'\n                                    defaultChecked={this.state.passwordNumber}\n                                    name='admin.password.number'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.number'\n                                    defaultMessage='At least one number'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='symbol'\n                                    defaultChecked={this.state.passwordSymbol}\n                                    name='admin.password.symbol'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.symbol'\n                                    defaultMessage='At least one symbol (e.g. \"~!@#$%^&*()\")'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <br/>\n                            <label>\n                                <FormattedMessage\n                                    id='admin.password.preview'\n                                    defaultMessage='Error message preview:'\n                                />\n                            </label>\n                            <br/>\n                            {this.sampleErrorMsg}\n                        </div>\n                    </Setting>\n                </div>\n                <TextSetting\n                    id='maximumLoginAttempts'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.attemptTitle'\n                            defaultMessage='Maximum Login Attempts:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.attemptExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.attemptDescription'\n                            defaultMessage='Login attempts allowed before user is locked out and required to reset password via email.'\n                        />\n                    }\n                    value={this.state.maximumLoginAttempts}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.MaximumLoginAttempts')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getPluginStatuses, removePlugin, uploadPlugin, activatePlugin, deactivatePlugin} from 'mattermost-redux/actions/admin';\n\nimport PluginManagement from './plugin_management.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        ...ownProps,\n        plugins: state.entities.admin.plugins,\n        pluginStatuses: state.entities.admin.pluginStatuses,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            uploadPlugin,\n            removePlugin,\n            getPluginStatuses,\n            activatePlugin,\n            deactivatePlugin,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PluginManagement);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport PluginState from 'mattermost-redux/constants/plugins';\n\nimport * as Utils from 'utils/utils.jsx';\nimport Banner from 'components/admin_console/banner.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nconst PluginItemState = ({state}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.not_running'\n                defaultMessage='Not running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.starting'\n                defaultMessage='Starting'\n            />\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.running'\n                defaultMessage='Running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_start'\n                defaultMessage='Failed to start'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_stay_running'\n                defaultMessage='Crashing'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.stopping'\n                defaultMessage='Stopping'\n            />\n        );\n    default:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.unknown'\n                defaultMessage='Unknown'\n            />\n        );\n    }\n};\n\nPluginItemState.propTypes = {\n    state: PropTypes.number.isRequired,\n};\n\nconst PluginItemStateDescription = ({state}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-ban'/>\n                <FormattedMessage\n                    id='admin.plugin.state.not_running.description'\n                    defaultMessage='This plugin is not activated.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.starting.description'\n                    defaultMessage='This plugin is starting.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-check'/>\n                <FormattedMessage\n                    id='admin.plugin.state.running.description'\n                    defaultMessage='This plugin is running.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_start.description'\n                    defaultMessage='This plugin failed to start. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_stay_running.description'\n                    defaultMessage='This plugin crashed multiple times and is no longer running. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.stopping.description'\n                    defaultMessage='This plugin is stopping.'\n                />\n            </div>\n        );\n    default:\n        return null;\n    }\n};\n\nPluginItemStateDescription.propTypes = {\n    state: PropTypes.number.isRequired,\n};\n\nconst PluginItem = ({\n    pluginStatus,\n    removing,\n    handleActivate,\n    handleDeactivate,\n    handleRemove,\n    showInstances,\n}) => {\n    let activateButton;\n    const activating = pluginStatus.state === PluginState.PLUGIN_STATE_STARTING;\n    const deactivating = pluginStatus.state === PluginState.PLUGIN_STATE_STOPPING;\n    if (pluginStatus.active) {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                disabled={deactivating}\n                onClick={handleDeactivate}\n            >\n                {deactivating ?\n                    <FormattedMessage\n                        id='admin.plugin.deactivating'\n                        defaultMessage='Deactivating...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.deactivate'\n                        defaultMessage='Deactivate'\n                    />\n                }\n            </a>\n        );\n    } else {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                disabled={activating}\n                onClick={handleActivate}\n            >\n                {activating ?\n                    <FormattedMessage\n                        id='admin.plugin.activating'\n                        defaultMessage='Activating...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.activate'\n                        defaultMessage='Activate'\n                    />\n                }\n            </a>\n        );\n    }\n\n    let settingsButton;\n    if (pluginStatus.settings_schema) {\n        settingsButton = (\n            <span>\n                {' - '}\n                <Link\n                    to={'/admin_console/plugins/custom/' + pluginStatus.id}\n                >\n                    <FormattedMessage\n                        id='admin.plugin.settingsButton'\n                        defaultMessage='Settings'\n                    />\n                </Link>\n            </span>\n        );\n    }\n\n    let removeButton;\n    if (!pluginStatus.is_prepackaged) {\n        let removeButtonText;\n        if (removing) {\n            removeButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.removing'\n                    defaultMessage='Removing...'\n                />\n            );\n        } else {\n            removeButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.remove'\n                    defaultMessage='Remove'\n                />\n            );\n        }\n        removeButton = (\n            <span>\n                {' - '}\n                <a\n                    data-plugin-id={pluginStatus.id}\n                    disabled={removing}\n                    onClick={handleRemove}\n                >\n                    {removeButtonText}\n                </a>\n            </span>\n        );\n    }\n\n    let description;\n    if (pluginStatus.description) {\n        description = (\n            <div className='padding-top'>\n                {pluginStatus.description}\n            </div>\n        );\n    }\n\n    let prepackagedLabel;\n    if (pluginStatus.is_prepackaged) {\n        prepackagedLabel = (\n            <span>\n                {', '}\n                <FormattedMessage\n                    id='admin.plugin.prepackaged'\n                    defaultMessage='pre-packaged'\n                />\n            </span>\n        );\n    }\n\n    const notices = [];\n    if (pluginStatus.instances.some((instance) => instance.version !== pluginStatus.version)) {\n        notices.push(\n            <div\n                key='multiple-versions'\n                className='alert alert-warning'\n            >\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.multiple_versions_warning'\n                    defaultMessage='There are multiple versions of this plugin installed across your cluster. Re-install this plugin to ensure it works consistently.'\n                />\n            </div>\n        );\n    }\n\n    notices.push(\n        <PluginItemStateDescription\n            key='state-description'\n            state={pluginStatus.state}\n        />\n    );\n\n    const instances = pluginStatus.instances;\n    instances.sort((a, b) => {\n        if (a.cluster_id < b.cluster_id) {\n            return -1;\n        } else if (a.cluster_id > b.cluster_id) {\n            return 1;\n        }\n\n        return 0;\n    });\n\n    let clusterSummary;\n    if (showInstances) {\n        clusterSummary = (\n            <div className='padding-top x2 padding-bottom'>\n                <div className='row'>\n                    <div className='col-md-6'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.cluster_instance'\n                                defaultMessage='Cluster Instance'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.version_title'\n                                defaultMessage='Version'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.state'\n                                defaultMessage='State'\n                            />\n                        </strong>\n                    </div>\n                </div>\n                {instances.map((instance) => (\n                    <div\n                        key={instance.cluster_id}\n                        className='row'\n                    >\n                        <div className='col-md-6'>\n                            {instance.cluster_id}\n                        </div>\n                        <div className='col-md-3'>\n                            {instance.version}\n                        </div>\n                        <div className='col-md-3'>\n                            <PluginItemState state={instance.state}/>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <div>\n                <strong>{pluginStatus.name}</strong>\n                {' ('}\n                {pluginStatus.id}\n                {' - '}\n                {pluginStatus.version}\n                {prepackagedLabel}\n                {')'}\n            </div>\n            {description}\n            <div className='padding-top'>\n                {activateButton}\n                {removeButton}\n                {settingsButton}\n            </div>\n            <div>\n                {notices}\n            </div>\n            <div>\n                {clusterSummary}\n            </div>\n            <hr/>\n        </div>\n    );\n};\n\nPluginItem.propTypes = {\n    pluginStatus: PropTypes.object.isRequired,\n    removing: PropTypes.bool.isRequired,\n    handleActivate: PropTypes.func.isRequired,\n    handleDeactivate: PropTypes.func.isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    showInstances: PropTypes.bool.isRequired,\n};\n\nexport default class PluginManagement extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        pluginStatuses: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            uploadPlugin: PropTypes.func.isRequired,\n            removePlugin: PropTypes.func.isRequired,\n            getPluginStatuses: PropTypes.func.isRequired,\n            activatePlugin: PropTypes.func.isRequired,\n            deactivatePlugin: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            fileSelected: false,\n            fileName: null,\n            serverError: null,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.config.PluginSettings.Enable) {\n            this.props.actions.getPluginStatuses().then(\n                () => this.setState({loading: false})\n            );\n        }\n    }\n\n    handleChange = () => {\n        const element = this.refs.fileInput;\n        if (element.files.length > 0) {\n            this.setState({fileSelected: true, fileName: element.files[0].name});\n        }\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const element = this.refs.fileInput;\n        if (element.files.length === 0) {\n            return;\n        }\n        const file = element.files[0];\n\n        this.setState({uploading: true});\n\n        const {error} = await this.props.actions.uploadPlugin(file);\n        this.setState({fileSelected: false, fileName: null, uploading: false, serverError: null});\n        Utils.clearFileInput(element);\n\n        if (error) {\n            if (error.server_error_id === 'app.plugin.activate.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.activate', 'Unable to upload the plugin. It may conflict with another plugin on your server.')});\n            } else if (error.server_error_id === 'app.plugin.extract.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.extract', 'Encountered an error when extracting the plugin. Review your plugin file content and try again.')});\n            } else {\n                this.setState({serverError: error.message});\n            }\n        }\n    }\n\n    handleRemove = async (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n        this.setState({removing: pluginId});\n\n        const {error} = await this.props.actions.removePlugin(pluginId);\n        this.setState({removing: null});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleActivate = async (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n\n        const {error} = await this.props.actions.activatePlugin(pluginId);\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleDeactivate = async (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n\n        const {error} = await this.props.actions.deactivatePlugin(pluginId);\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    render() {\n        if (!this.props.config.PluginSettings.Enable) {\n            return (\n                <div className='wrapper--fixed'>\n                    <h3 className='admin-console-header'>\n                        <FormattedMessage\n                            id='admin.plugin.management.title'\n                            defaultMessage='Management'\n                        />\n                    </h3>\n                    <Banner\n                        title={<div/>}\n                        description={\n                            <FormattedHTMLMessage\n                                id='admin.plugin.management.banner'\n                                defaultMessage='Plugins are disabled on your server. To enable them, go to <strong>Plugins > Configuration</strong>.'\n                            />\n                        }\n                    />\n                </div>\n            );\n        }\n\n        let serverError = '';\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error half'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.fileName) {\n            fileName = this.state.fileName;\n        }\n\n        let uploadButtonText;\n        if (this.state.uploading) {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.uploading'\n                    defaultMessage='Uploading...'\n                />\n            );\n        } else {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.upload'\n                    defaultMessage='Upload'\n                />\n            );\n        }\n\n        let pluginsList;\n        let pluginsContainer;\n        const plugins = Object.values(this.props.pluginStatuses);\n        if (this.state.loading) {\n            pluginsList = <LoadingScreen/>;\n        } else if (plugins.length === 0) {\n            pluginsContainer = (\n                <FormattedMessage\n                    id='admin.plugin.no_plugins'\n                    defaultMessage='No installed plugins.'\n                />\n            );\n        } else {\n            const showInstances = plugins.some((pluginStatus) => pluginStatus.instances.length > 1);\n            plugins.sort((a, b) => {\n                if (a.name < b.name) {\n                    return -1;\n                } else if (a.name > b.name) {\n                    return 1;\n                }\n\n                return 0;\n            });\n            pluginsList = plugins.map((pluginStatus) => (\n                <PluginItem\n                    key={pluginStatus.id}\n                    pluginStatus={pluginStatus}\n                    removing={this.state.removing === pluginStatus.id}\n                    handleActivate={this.handleActivate}\n                    handleDeactivate={this.handleDeactivate}\n                    handleRemove={this.handleRemove}\n                    showInstances={showInstances}\n                />\n            ));\n\n            pluginsContainer = (\n                <div className='alert alert-transparent'>\n                    {pluginsList}\n                </div>\n            );\n        }\n\n        const enableUploads = this.props.config.PluginSettings.EnableUploads;\n        let uploadHelpText;\n        if (enableUploads) {\n            uploadHelpText = (\n                <FormattedHTMLMessage\n                    id='admin.plugin.uploadDesc'\n                    defaultMessage='Upload a plugin for your Mattermost server. See <a href=\"https://about.mattermost.com/default-plugin-uploads\" target=\"_blank\">documentation</a> to learn more.'\n                />\n            );\n        } else {\n            uploadHelpText = (\n                <FormattedHTMLMessage\n                    id='admin.plugin.uploadDisabledDesc'\n                    defaultMessage='To enable plugin uploads, go to <strong>Plugins > Configuration</strong>. See <a href=\"https://about.mattermost.com/default-plugin-uploads\" target=\"_blank\">documentation</a> to learn more.'\n                />\n            );\n        }\n\n        const uploadBtnClass = enableUploads ? 'btn btn-primary' : 'btn';\n\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.plugin.management.title'\n                        defaultMessage='Management'\n                    />\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                >\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.plugin.uploadTitle'\n                                defaultMessage='Upload Plugin: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            <div className='file__upload'>\n                                <button\n                                    className={uploadBtnClass}\n                                    disabled={!enableUploads}\n                                >\n                                    <FormattedMessage\n                                        id='admin.plugin.choose'\n                                        defaultMessage='Choose File'\n                                    />\n                                </button>\n                                <input\n                                    ref='fileInput'\n                                    type='file'\n                                    accept='.gz'\n                                    onChange={this.handleChange}\n                                    disabled={!enableUploads}\n                                />\n                            </div>\n                            <button\n                                className={btnClass}\n                                disabled={!this.state.fileSelected}\n                                onClick={this.handleSubmit}\n                            >\n                                {uploadButtonText}\n                            </button>\n                            <div className='help-text no-margin'>\n                                {fileName}\n                            </div>\n                            {serverError}\n                            <p className='help-text'>\n                                {uploadHelpText}\n                            </p>\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.plugin.installedTitle'\n                                defaultMessage='Installed Plugins: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            <p className='help-text'>\n                                <FormattedHTMLMessage\n                                    id='admin.plugin.installedDesc'\n                                    defaultMessage='Installed plugins on your Mattermost server. Pre-packaged plugins are installed by default, and can be deactivated but not removed.'\n                                />\n                            </p>\n                            <br/>\n                            {pluginsContainer}\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport CustomPluginSettings from './custom_plugin_settings.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const pluginId = ownProps.match.params.plugin_id;\n    const plugin = state.entities.admin.plugins[pluginId];\n    const settings = plugin && plugin.settings_schema && plugin.settings_schema.settings && plugin.settings_schema.settings.map((setting) => {\n        return {...setting, label: setting.display_name};\n    });\n    const translate = (plugin && plugin.translate) || false;\n    return {\n        schema: plugin ? {...plugin.settings_schema, id: plugin.id, name: plugin.name, settings, translate} : null,\n    };\n}\n\nexport default connect(mapStateToProps)(CustomPluginSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings.jsx';\n\nexport default class CustomPluginSettings extends SchemaAdminSettings {\n    constructor(props) {\n        super(props);\n        this.isPlugin = true;\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const id = this.props.schema ? this.props.schema.id : '';\n        const nextId = nextProps.schema ? nextProps.schema.id : '';\n\n        if ((!this.props.schema && nextProps.schema) || (id !== nextId)) {\n            this.setState(this.getStateFromConfig(nextProps.config, nextProps.schema));\n        }\n    }\n\n    getConfigFromState(config) {\n        const schema = this.props.schema;\n\n        if (schema) {\n            if (!config.PluginSettings.Plugins[schema.id]) {\n                config.PluginSettings.Plugins[schema.id] = {};\n            }\n\n            const configSettings = config.PluginSettings.Plugins[schema.id];\n\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                const lowerKey = setting.key.toLowerCase();\n                const value = this.state[lowerKey] || setting.default;\n                if (value == null) {\n                    Reflect.deleteProperty(configSettings, lowerKey);\n                } else {\n                    configSettings[lowerKey] = value;\n                }\n            });\n        }\n\n        return config;\n    }\n\n    getStateFromConfig(config, schema = this.props.schema) {\n        const state = {};\n\n        if (schema) {\n            const configSettings = config.PluginSettings.Plugins[schema.id] || {};\n\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                const lowerKey = setting.key.toLowerCase();\n                state[lowerKey] = configSettings[lowerKey] == null ? setting.default : configSettings[lowerKey];\n            });\n        }\n\n        return state;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactSelect from 'react-select';\n\nimport FormError from 'components/form_error.jsx';\n\nimport Setting from './setting.jsx';\n\nexport default class MultiSelectSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        selected: PropTypes.array.isRequired,\n        mustBePresent: PropTypes.string,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n        noResultText: PropTypes.node,\n        errorText: PropTypes.node,\n        notPresent: PropTypes.node,\n    };\n\n    static defaultProps = {\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {error: false};\n    }\n\n    handleChange(newValue) {\n        const values = newValue.map((n) => {\n            return n.value;\n        });\n\n        if (this.props.selected.length > 0 && this.props.mustBePresent && values.join(',').indexOf(this.props.mustBePresent) === -1) {\n            this.setState({error: this.props.notPresent});\n        } else {\n            this.props.onChange(this.props.id, values);\n            this.setState({error: false});\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(newProps) { // eslint-disable-line camelcase\n        if (newProps.selected.length > 0 && newProps.mustBePresent && newProps.selected.join(',').indexOf(newProps.mustBePresent) === -1) {\n            this.setState({error: this.props.notPresent});\n        } else {\n            this.setState({error: false});\n        }\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <ReactSelect\n                    id={this.props.id}\n                    multi={true}\n                    labelKey='text'\n                    options={this.props.values}\n                    joinValues={true}\n                    clearable={false}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                    noResultsText={this.props.noResultText}\n                    onChange={this.handleChange}\n                    value={this.props.selected}\n                />\n                <FormError error={this.state.error}/>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {ChromePicker} from 'react-color';\n\nimport Setting from './setting.jsx';\n\nexport default class ColorSetting extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The unique identifer for the admin console setting\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The text/jsx display name for the setting\n         */\n        label: PropTypes.node.isRequired,\n\n        /*\n         * The text/jsx help text to display underneath the setting\n         */\n        helpText: PropTypes.node,\n\n        /*\n         * The hex color value\n         */\n        value: PropTypes.string.isRequired,\n\n        /*\n         * Function called when the input changes\n         */\n        onChange: PropTypes.func,\n\n        /*\n         * Set to disable the setting\n         */\n        disabled: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showPicker: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.closePicker);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.closePicker);\n    }\n\n    handleChange = (color) => {\n        this.props.onChange(this.props.id, color.hex);\n    }\n\n    togglePicker = () => {\n        if (this.props.disabled) {\n            this.setState({showPicker: false});\n        } else {\n            this.setState({showPicker: !this.state.showPicker});\n        }\n    }\n\n    closePicker = (e) => {\n        if (!e.target.closest('.' + this.getPickerClass())) {\n            this.setState({showPicker: false});\n        }\n    }\n\n    onTextInput = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    getPickerClass = () => {\n        return this.props.id ? 'picker-' + this.props.id.replace('.', '-') : '';\n    }\n\n    render() {\n        let picker;\n        if (this.state.showPicker) {\n            picker = (\n                <div className={'color-picker__popover ' + this.getPickerClass()}>\n                    <ChromePicker\n                        color={this.props.value}\n                        onChange={this.handleChange}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div className='input-group color-picker colorpicker-element'>\n                    <input\n                        type='text'\n                        className='form-control'\n                        value={this.props.value}\n                        onChange={this.onTextInput}\n                        disabled={this.props.disabled}\n                    />\n                    <span\n                        className={'input-group-addon ' + this.getPickerClass()}\n                        onClick={this.togglePicker}\n                    >\n                        <i style={{backgroundColor: this.props.value}}/>\n                    </span>\n                    {picker}\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Client4} from 'mattermost-redux/client';\n\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport {autocompleteUsersInTeam} from 'actions/user_actions.jsx';\nimport {ActionTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport Setting from 'components/admin_console/setting.jsx';\nimport Provider from 'components/suggestion/provider.jsx';\nimport Suggestion from 'components/suggestion/suggestion.jsx';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\n\nclass UserSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'suggestion-list__item mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const username = item.username;\n        let description = '';\n\n        if ((item.first_name || item.last_name) && item.nickname) {\n            description = `- ${Utils.getFullName(item)} (${item.nickname})`;\n        } else if (item.nickname) {\n            description = `- (${item.nickname})`;\n        } else if (item.first_name || item.last_name) {\n            description = `- ${Utils.getFullName(item)}`;\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n            >\n                <div className='pull-left'>\n                    <img\n                        className='admin-setting-user__image'\n                        src={Client4.getUsersRoute() + '/' + item.id + '/image?_=' + (item.last_picture_update || 0)}\n                    />\n                </div>\n                <div className='pull-left admin-setting-user--align'>\n                    <span>\n                        {'@' + username}\n                    </span>\n                    <span className='admin-setting-user__fullname'>\n                        {' '}\n                        {description}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass UserProvider extends Provider {\n    handlePretextChanged(suggestionId, pretext) {\n        const normalizedPretext = pretext.toLowerCase();\n        this.startNewRequest(suggestionId, normalizedPretext);\n\n        autocompleteUsersInTeam(\n            normalizedPretext,\n            (data) => {\n                if (this.shouldCancelDispatch(normalizedPretext)) {\n                    return;\n                }\n\n                const users = Object.assign([], data.users);\n\n                AppDispatcher.handleServerAction({\n                    type: ActionTypes.SUGGESTION_RECEIVED_SUGGESTIONS,\n                    id: suggestionId,\n                    matchedPretext: normalizedPretext,\n                    terms: users.map((user) => user.username),\n                    items: users,\n                    component: UserSuggestion,\n                });\n            }\n        );\n\n        return true;\n    }\n}\n\nexport default class UserAutocompleteSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            helpText: PropTypes.node,\n            value: PropTypes.string,\n            onChange: PropTypes.func,\n            disabled: PropTypes.bool,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.userSuggestionProviders = [new UserProvider()];\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    handleUserSelected = (user) => {\n        this.props.onChange(this.props.id, user.username);\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div\n                    className='admin-setting-user__dropdown'\n                >\n                    <SuggestionBox\n                        id={'admin_user_setting_' + this.props.id}\n                        className='form-control'\n                        placeholder={this.props.placeholder}\n                        value={this.props.value}\n                        onChange={this.handleChange}\n                        onItemSelected={this.handleUserSelected}\n                        listComponent={SuggestionList}\n                        listStyle='bottom'\n                        providers={this.userSuggestionProviders}\n                        disabled={this.props.disabled}\n                        requiredCharacters={0}\n                        openOnFocus={true}\n                    />\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\n\nimport WebhookSettings from './custom_integrations_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        roles: getRoles(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            editRole,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WebhookSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage, injectIntl, intlShape} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {rolesFromMapping, mappingValueFromRoles} from 'utils/policy_roles_adapter';\nimport {saveConfig} from 'actions/admin_actions.jsx';\n\nimport AdminSettings from '.././admin_settings.jsx';\nimport BooleanSetting from '.././boolean_setting.jsx';\nimport SettingsGroup from '.././settings_group.jsx';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport class WebhookSettings extends AdminSettings {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        roles: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state, // Brings the state in from the parent class.\n            enableOnlyAdminIntegrations: null,\n            loaded: false,\n            edited: {},\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.props.actions.loadRolesIfNeeded(['team_user', 'system_user']);\n        if (this.props.roles.system_user &&\n            this.props.roles.team_user) {\n            this.loadPoliciesIntoState(this.props);\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!this.state.loaded &&\n            nextProps.roles.system_user &&\n            nextProps.roles.team_user) {\n            this.loadPoliciesIntoState(nextProps);\n        }\n    }\n\n    handleChange = (id, value) => {\n        this.setState({\n            saveNeeded: true,\n            [id]: value,\n            edited: {...this.state.edited, [id]: this.props.intl.formatMessage({id: 'admin.field_names.' + id, defaultMessage: id})},\n        });\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // Purposely converting enableOnlyAdminIntegrations value from boolean to string 'true' or 'false'\n        // so that it can be used as a key in the policy roles adapter mapping.\n        const updatedRoles = rolesFromMapping({enableOnlyAdminIntegrations: this.state.enableOnlyAdminIntegrations.toString()}, this.props.roles);\n\n        let success = true;\n\n        await Promise.all(Object.values(updatedRoles).map(async (item) => {\n            try {\n                await this.props.actions.editRole(item);\n            } catch (err) {\n                success = false;\n                this.setState({\n                    saving: false,\n                    serverError: err.message,\n                });\n            }\n        }));\n\n        if (success) {\n            const configFieldEdited = (\n                this.state.edited.enableIncomingWebhooks ||\n                this.state.edited.enableOutgoingWebhooks ||\n                this.state.edited.enableCommands ||\n                this.state.edited.enablePostUsernameOverride ||\n                this.state.edited.enablePostIconOverride ||\n                this.state.edited.enableOAuthServiceProvider ||\n                this.state.edited.enableUserAccessTokens\n            );\n            if (configFieldEdited) {\n                this.doSubmit(() => {\n                    if (!this.state.serverError) {\n                        this.setState({edited: {}});\n                    }\n                });\n            } else {\n                this.setState({\n                    saving: false,\n                    saveNeeded: false,\n                    serverError: null,\n                    edited: {},\n                });\n                this.props.setNavigationBlocked(false);\n            }\n        }\n    };\n\n    doSubmit = (callback) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        saveConfig(\n            config,\n            (savedConfig) => {\n                this.setState(this.getStateFromConfig(savedConfig));\n\n                this.setState({\n                    saveNeeded: false,\n                    saving: false,\n                });\n\n                this.props.setNavigationBlocked(false);\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            },\n            (err) => {\n                let errMessage = err.message;\n                if (err.id === 'ent.cluster.save_config.error') {\n                    errMessage = (\n                        <FormattedMessage\n                            id='ent.cluster.save_config_with_roles.error'\n                            defaultMessage='The following configuration settings cannot be saved when High Availability is enabled and the System Console is in read-only mode: {keys}.'\n                            values={{\n                                keys: [\n                                    this.state.edited.enableIncomingWebhooks,\n                                    this.state.edited.enableOutgoingWebhooks,\n                                    this.state.edited.enableCommands,\n                                    this.state.edited.enablePostUsernameOverride,\n                                    this.state.edited.enablePostIconOverride,\n                                    this.state.edited.enableOAuthServiceProvider,\n                                    this.state.edited.enableUserAccessTokens,\n                                ].filter((v) => v).join(', '),\n                            }}\n                        />\n                    );\n                }\n\n                this.setState({\n                    saving: false,\n                    serverError: errMessage,\n                });\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            }\n        );\n    };\n\n    loadPoliciesIntoState(props) {\n        const {roles} = props;\n\n        // Purposely parsing boolean from string 'true' or 'false'\n        // because the string comes from the policy roles adapter mapping.\n        const enableOnlyAdminIntegrations = (mappingValueFromRoles('enableOnlyAdminIntegrations', roles) === 'true');\n\n        this.setState({enableOnlyAdminIntegrations, loaded: true});\n    }\n\n    getConfigFromState = (config) => {\n        config.ServiceSettings.EnableIncomingWebhooks = this.state.enableIncomingWebhooks;\n        config.ServiceSettings.EnableOutgoingWebhooks = this.state.enableOutgoingWebhooks;\n        config.ServiceSettings.EnableCommands = this.state.enableCommands;\n        config.ServiceSettings.EnablePostUsernameOverride = this.state.enablePostUsernameOverride;\n        config.ServiceSettings.EnablePostIconOverride = this.state.enablePostIconOverride;\n        config.ServiceSettings.EnableOAuthServiceProvider = this.state.enableOAuthServiceProvider;\n        config.ServiceSettings.EnableUserAccessTokens = this.state.enableUserAccessTokens;\n\n        return config;\n    };\n\n    getStateFromConfig(config) {\n        return {\n            enableIncomingWebhooks: config.ServiceSettings.EnableIncomingWebhooks,\n            enableOutgoingWebhooks: config.ServiceSettings.EnableOutgoingWebhooks,\n            enableCommands: config.ServiceSettings.EnableCommands,\n            enablePostUsernameOverride: config.ServiceSettings.EnablePostUsernameOverride,\n            enablePostIconOverride: config.ServiceSettings.EnablePostIconOverride,\n            enableOAuthServiceProvider: config.ServiceSettings.EnableOAuthServiceProvider,\n            enableUserAccessTokens: config.ServiceSettings.EnableUserAccessTokens,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.integrations.custom'\n                defaultMessage='Custom Integrations'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        if (!this.state.loaded) {\n            return <LoadingScreen/>;\n        }\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableIncomingWebhooks'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.webhooksTitle'\n                            defaultMessage='Enable Incoming Webhooks: '\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.service.webhooksDescription'\n                            defaultMessage='When true, incoming webhooks will be allowed. To help combat phishing attacks, all posts from webhooks will be labelled by a BOT tag. See <a href=\"http://docs.mattermost.com/developer/webhooks-incoming.html\" target=\"_blank\">documentation</a> to learn more.'\n                        />\n                    }\n                    value={this.state.enableIncomingWebhooks}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableIncomingWebhooks')}\n                />\n                <BooleanSetting\n                    id='enableOutgoingWebhooks'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.outWebhooksTitle'\n                            defaultMessage='Enable Outgoing Webhooks: '\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.service.outWebhooksDesc'\n                            defaultMessage='When true, outgoing webhooks will be allowed. See <a href=\"http://docs.mattermost.com/developer/webhooks-outgoing.html\" target=\"_blank\">documentation</a> to learn more.'\n                        />\n                    }\n                    value={this.state.enableOutgoingWebhooks}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableOutgoingWebhooks')}\n                />\n                <BooleanSetting\n                    id='enableCommands'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.cmdsTitle'\n                            defaultMessage='Enable Custom Slash Commands: '\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.service.cmdsDesc'\n                            defaultMessage='When true, custom slash commands will be allowed. See <a href=\"http://docs.mattermost.com/developer/slash-commands.html\" target=\"_blank\">documentation</a> to learn more.'\n                        />\n                    }\n                    value={this.state.enableCommands}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableCommands')}\n                />\n                <BooleanSetting\n                    id='enableOAuthServiceProvider'\n                    label={\n                        <FormattedMessage\n                            id='admin.oauth.providerTitle'\n                            defaultMessage='Enable OAuth 2.0 Service Provider: '\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.oauth.providerDescription'\n                            defaultMessage='When true, Mattermost can act as an OAuth 2.0 service provider allowing Mattermost to authorize API requests from external applications. See <a href=\"https://docs.mattermost.com/developer/oauth-2-0-applications.html\" target=\"_blank\">documentation</a> to learn more.'\n                        />\n                    }\n                    value={this.state.enableOAuthServiceProvider}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableOAuthServiceProvider')}\n                />\n                {this.props.license.IsLicensed === 'false' &&\n                    <BooleanSetting\n                        id='enableOnlyAdminIntegrations'\n                        label={\n                            <FormattedMessage\n                                id='admin.service.integrationAdmin'\n                                defaultMessage='Restrict managing integrations to Admins:'\n                            />\n                        }\n                        helpText={\n                            <FormattedMessage\n                                id='admin.service.integrationAdminDesc'\n                                defaultMessage='When true, webhooks and slash commands can only be created, edited and viewed by Team and System Admins, and OAuth 2.0 applications by System Admins. Integrations are available to all users after they have been created by the Admin.'\n                            />\n                        }\n                        value={this.state.enableOnlyAdminIntegrations}\n                        onChange={this.handleChange}\n                        setByEnv={false}\n                    />}\n                <BooleanSetting\n                    id='enablePostUsernameOverride'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.overrideTitle'\n                            defaultMessage='Enable integrations to override usernames:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.service.overrideDescription'\n                            defaultMessage='When true, webhooks, slash commands and other integrations, such as <a href=\"https://docs.mattermost.com/integrations/zapier.html\" target=\"_blank\">Zapier</a>, will be allowed to change the username they are posting as. Note: Combined with allowing integrations to override profile picture icons, users may be able to perform phishing attacks by attempting to impersonate other users.'\n                        />\n                    }\n                    value={this.state.enablePostUsernameOverride}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnablePostUsernameOverride')}\n                />\n                <BooleanSetting\n                    id='enablePostIconOverride'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.iconTitle'\n                            defaultMessage='Enable integrations to override profile picture icons:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.service.iconDescription'\n                            defaultMessage='When true, webhooks, slash commands and other integrations, such as <a href=\"https://docs.mattermost.com/integrations/zapier.html\" target=\"_blank\">Zapier</a>, will be allowed to change the profile picture they post with. Note: Combined with allowing integrations to override usernames, users may be able to perform phishing attacks by attempting to impersonate other users.'\n                        />\n                    }\n                    value={this.state.enablePostIconOverride}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnablePostIconOverride')}\n                />\n                <BooleanSetting\n                    id='enableUserAccessTokens'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.userAccessTokensTitle'\n                            defaultMessage='Enable User Access Tokens: '\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.service.userAccessTokensDescription'\n                            defaultMessage='When true, users can create <a href=\"https://about.mattermost.com/default-user-access-tokens\" target=\"_blank\">user access tokens</a> for integrations in <strong>Account Settings > Security</strong>. They can be used to authenticate against the API and give full access to the account.<br/><br/>To manage who can create personal access tokens or to search users by token ID, go to the <strong>System Console > Users</strong> page.'\n                        />\n                    }\n                    value={this.state.enableUserAccessTokens}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableUserAccessTokens')}\n                />\n            </SettingsGroup>\n        );\n    };\n}\n\nexport default injectIntl(WebhookSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\n\nimport UsersAndTeamsSettings from './users_and_teams_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        roles: getRoles(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            editRole,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersAndTeamsSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedHTMLMessage, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {rolesFromMapping, mappingValueFromRoles} from 'utils/policy_roles_adapter';\nimport {saveConfig} from 'actions/admin_actions.jsx';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport AdminSettings from '../admin_settings.jsx';\nimport BooleanSetting from '../boolean_setting.jsx';\nimport DropdownSetting from '../dropdown_setting.jsx';\nimport SettingsGroup from '../settings_group.jsx';\nimport TextSetting from '../text_setting.jsx';\n\nconst RESTRICT_DIRECT_MESSAGE_ANY = 'any';\nconst RESTRICT_DIRECT_MESSAGE_TEAM = 'team';\n\nexport class UsersAndTeamsSettings extends AdminSettings {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        roles: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.state, // Brings the state in from the parent class.\n            enableTeamCreation: null,\n            loaded: false,\n            edited: {},\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.props.actions.loadRolesIfNeeded(['system_user']);\n        if (this.props.roles.system_user) {\n            this.loadPoliciesIntoState(this.props);\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!this.state.loaded && nextProps.roles.system_user) {\n            this.loadPoliciesIntoState(nextProps);\n        }\n    }\n\n    handleChange = (id, value) => {\n        this.setState({\n            saveNeeded: true,\n            [id]: value,\n            edited: {...this.state.edited, [id]: this.props.intl.formatMessage({id: 'admin.field_names.' + id, defaultMessage: id})},\n        });\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // Purposely converting enableTeamCreation value from boolean to string 'true' or 'false'\n        // so that it can be used as a key in the policy roles adapter mapping.\n        const updatedRoles = rolesFromMapping({enableTeamCreation: this.state.enableTeamCreation.toString()}, this.props.roles);\n\n        let success = true;\n\n        await Promise.all(Object.values(updatedRoles).map(async (item) => {\n            try {\n                await this.props.actions.editRole(item);\n            } catch (err) {\n                success = false;\n                this.setState({\n                    saving: false,\n                    serverError: err.message,\n                });\n            }\n        }));\n\n        if (success) {\n            const configFieldEdited = (\n                this.state.edited.enableUserCreation ||\n                this.state.edited.maxUsersPerTeam ||\n                this.state.edited.restrictCreationToDomains ||\n                this.state.edited.restrictDirectMessage ||\n                this.state.edited.teammateNameDisplay ||\n                this.state.edited.maxChannelsPerTeam ||\n                this.state.edited.maxNotificationsPerChannel ||\n                this.state.edited.enableConfirmNotificationsToChannel\n            );\n\n            if (configFieldEdited) {\n                this.doSubmit(() => {\n                    if (!this.state.serverError) {\n                        this.setState({edited: {}});\n                    }\n                });\n            } else {\n                this.setState({\n                    saving: false,\n                    saveNeeded: false,\n                    serverError: null,\n                    edited: {},\n                });\n                this.props.setNavigationBlocked(false);\n            }\n        }\n    };\n\n    doSubmit = (callback) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        saveConfig(\n            config,\n            (savedConfig) => {\n                this.setState(this.getStateFromConfig(savedConfig));\n\n                this.setState({\n                    saveNeeded: false,\n                    saving: false,\n                });\n\n                this.props.setNavigationBlocked(false);\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            },\n            (err) => {\n                let errMessage = err.message;\n                if (err.id === 'ent.cluster.save_config.error') {\n                    errMessage = (\n                        <FormattedMessage\n                            id='ent.cluster.save_config_with_roles.error'\n                            defaultMessage='The following configuration settings cannot be saved when High Availability is enabled and the System Console is in read-only mode: {keys}.'\n                            values={{\n                                keys: [\n                                    this.state.edited.enableUserCreation,\n                                    this.state.edited.maxUsersPerTeam,\n                                    this.state.edited.restrictCreationToDomains,\n                                    this.state.edited.restrictDirectMessage,\n                                    this.state.edited.teammateNameDisplay,\n                                    this.state.edited.maxChannelsPerTeam,\n                                    this.state.edited.maxNotificationsPerChannel,\n                                    this.state.edited.enableConfirmNotificationsToChannel,\n                                ].filter((v) => v).join(', '),\n                            }}\n                        />\n                    );\n                }\n\n                this.setState({\n                    saving: false,\n                    serverError: errMessage,\n                });\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            }\n        );\n    };\n\n    loadPoliciesIntoState(props) {\n        const {roles} = props;\n\n        // Purposely parsing boolean from string 'true' or 'false'\n        // because the string comes from the policy roles adapter mapping.\n        const enableTeamCreation = (mappingValueFromRoles('enableTeamCreation', roles) === 'true');\n\n        this.setState({enableTeamCreation, loaded: true});\n    }\n\n    getConfigFromState = (config) => {\n        config.TeamSettings.EnableUserCreation = this.state.enableUserCreation;\n        config.TeamSettings.MaxUsersPerTeam = this.parseIntNonZero(this.state.maxUsersPerTeam, Constants.DEFAULT_MAX_USERS_PER_TEAM);\n        config.TeamSettings.RestrictCreationToDomains = this.state.restrictCreationToDomains;\n        config.TeamSettings.RestrictDirectMessage = this.state.restrictDirectMessage;\n        config.TeamSettings.TeammateNameDisplay = this.state.teammateNameDisplay;\n        config.TeamSettings.MaxChannelsPerTeam = this.parseIntNonZero(this.state.maxChannelsPerTeam, Constants.DEFAULT_MAX_CHANNELS_PER_TEAM);\n        config.TeamSettings.MaxNotificationsPerChannel = this.parseIntNonZero(this.state.maxNotificationsPerChannel, Constants.DEFAULT_MAX_NOTIFICATIONS_PER_CHANNEL);\n        config.TeamSettings.EnableConfirmNotificationsToChannel = this.state.enableConfirmNotificationsToChannel;\n        return config;\n    };\n\n    getStateFromConfig(config) {\n        return {\n            enableUserCreation: config.TeamSettings.EnableUserCreation,\n            maxUsersPerTeam: config.TeamSettings.MaxUsersPerTeam,\n            restrictCreationToDomains: config.TeamSettings.RestrictCreationToDomains,\n            restrictDirectMessage: config.TeamSettings.RestrictDirectMessage,\n            teammateNameDisplay: config.TeamSettings.TeammateNameDisplay,\n            maxChannelsPerTeam: config.TeamSettings.MaxChannelsPerTeam,\n            maxNotificationsPerChannel: config.TeamSettings.MaxNotificationsPerChannel,\n            enableConfirmNotificationsToChannel: config.TeamSettings.EnableConfirmNotificationsToChannel,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.general.usersAndTeams'\n                defaultMessage='Users and Teams'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        if (!this.state.loaded) {\n            return <LoadingScreen/>;\n        }\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableUserCreation'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.userCreationTitle'\n                            defaultMessage='Enable Account Creation: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.userCreationDescription'\n                            defaultMessage='When false, the ability to create accounts is disabled. The create account button displays error when pressed.'\n                        />\n                    }\n                    value={this.state.enableUserCreation}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSetting.EnableUserCreation')}\n                />\n                {this.props.license.IsLicensed === 'false' &&\n                    <BooleanSetting\n                        id='enableTeamCreation'\n                        label={\n                            <FormattedMessage\n                                id='admin.team.teamCreationTitle'\n                                defaultMessage='Enable Team Creation: '\n                            />\n                        }\n                        helpText={\n                            <FormattedMessage\n                                id='admin.team.teamCreationDescription'\n                                defaultMessage='When false, only System Administrators can create teams.'\n                            />\n                        }\n                        value={this.state.enableTeamCreation}\n                        onChange={this.handleChange}\n                        setByEnv={false}\n                    />}\n                <TextSetting\n                    id='maxUsersPerTeam'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.maxUsersTitle'\n                            defaultMessage='Max Users Per Team:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.team.maxUsersExample', 'Ex \"25\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.maxUsersDescription'\n                            defaultMessage='Maximum total number of users per team, including both active and inactive users.'\n                        />\n                    }\n                    value={this.state.maxUsersPerTeam}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSetting.MaxUsersPerTeam')}\n                />\n                <TextSetting\n                    id='maxChannelsPerTeam'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.maxChannelsTitle'\n                            defaultMessage='Max Channels Per Team:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.team.maxChannelsExample', 'Ex \"100\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.maxChannelsDescription'\n                            defaultMessage='Maximum total number of channels per team, including both active and archived channels.'\n                        />\n                    }\n                    value={this.state.maxChannelsPerTeam}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSetting.MaxChannelsPerTeam')}\n                />\n                <TextSetting\n                    id='maxNotificationsPerChannel'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.maxNotificationsPerChannelTitle'\n                            defaultMessage='Max Notifications Per Channel:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.team.maxNotificationsPerChannelExample', 'Ex \"1000\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.maxNotificationsPerChannelDescription'\n                            defaultMessage='Maximum total number of users in a channel before users typing messages, @all, @here, and @channel no longer send notifications because of performance.'\n                        />\n                    }\n                    value={this.state.maxNotificationsPerChannel}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSetting.MaxNotificationsPerChannel')}\n                />\n                <BooleanSetting\n                    id='enableConfirmNotificationsToChannel'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.enableConfirmNotificationsToChannelTitle'\n                            defaultMessage='Show @channel and @all confirmation dialog: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.enableConfirmNotificationsToChannelDescription'\n                            defaultMessage='When true, users will be prompted to confirm when posting @channel and @all in channels with over five members. When false, no confirmation is required.'\n                        />\n                    }\n                    value={this.state.enableConfirmNotificationsToChannel}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSetting.EnableConfirmNotificationsToChannel')}\n                />\n                <TextSetting\n                    id='restrictCreationToDomains'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.restrictTitle'\n                            defaultMessage='Restrict account creation to specified email domains:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.team.restrictExample', 'Ex \"corp.mattermost.com, mattermost.org\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.team.restrictDescription'\n                            defaultMessage='Teams and user accounts can only be created from a specific domain (e.g. \"mattermost.org\") or list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\").'\n                        />\n                    }\n                    value={this.state.restrictCreationToDomains}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSetting.RestrictCreationToDomains')}\n                />\n                <DropdownSetting\n                    id='restrictDirectMessage'\n                    values={[\n                        {value: RESTRICT_DIRECT_MESSAGE_ANY, text: Utils.localizeMessage('admin.team.restrict_direct_message_any', 'Any user on the Mattermost server')},\n                        {value: RESTRICT_DIRECT_MESSAGE_TEAM, text: Utils.localizeMessage('admin.team.restrict_direct_message_team', 'Any member of the team')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.team.restrictDirectMessage'\n                            defaultMessage='Enable users to open Direct Message channels with:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.team.restrictDirectMessageDesc'\n                            defaultMessage='\"Any user on the Mattermost server\" enables users to open a Direct Message channel with any user on the server, even if they are not on any teams together. \"Any member of the team\" limits the ability in the Direct Messages \"More\" menu to only open Direct Message channels with users who are in the same team.<br /><br />Note: This setting only affects the UI, not permissions on the server.'\n                        />\n                    }\n                    value={this.state.restrictDirectMessage}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSetting.RestrictDirectMessage')}\n                />\n                <DropdownSetting\n                    id='teammateNameDisplay'\n                    values={[\n                        {value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME, text: Utils.localizeMessage('admin.team.showUsername', 'Show username (default)')},\n                        {value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME, text: Utils.localizeMessage('admin.team.showNickname', 'Show nickname if one exists, otherwise show first and last name')},\n                        {value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME, text: Utils.localizeMessage('admin.team.showFullname', 'Show first and last name')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.team.teammateNameDisplay'\n                            defaultMessage='Teammate Name Display:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.team.teammateNameDisplayDesc'\n                            defaultMessage=\"Set how to display users' names in posts and the Direct Messages list.\"\n                        />\n                    }\n                    value={this.state.teammateNameDisplay}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSetting.TeammateNameDisplay')}\n                />\n            </SettingsGroup>\n        );\n    };\n}\n\nexport default injectIntl(UsersAndTeamsSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nconst PUSH_NOTIFICATIONS_OFF = 'off';\nconst PUSH_NOTIFICATIONS_MHPNS = 'mhpns';\nconst PUSH_NOTIFICATIONS_MTPNS = 'mtpns';\nconst PUSH_NOTIFICATIONS_CUSTOM = 'custom';\n\nexport default class PushSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.canSave = this.canSave.bind(this);\n        this.handleAgreeChange = this.handleAgreeChange.bind(this);\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    }\n\n    canSave() {\n        return this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_MHPNS || this.state.agree;\n    }\n\n    handleAgreeChange(e) {\n        this.setState({\n            agree: e.target.checked,\n        });\n    }\n\n    handleDropdownChange(id, value) {\n        if (id === 'pushNotificationServerType') {\n            this.setState({\n                agree: false,\n            });\n\n            if (value === PUSH_NOTIFICATIONS_MHPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MHPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_MTPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MTPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_CUSTOM &&\n                (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS ||\n                this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS)) {\n                this.setState({\n                    pushNotificationServer: '',\n                });\n            }\n        }\n\n        this.handleChange(id, value);\n    }\n\n    getConfigFromState(config) {\n        config.EmailSettings.SendPushNotifications = this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_OFF;\n        config.EmailSettings.PushNotificationServer = this.state.pushNotificationServer.trim();\n        config.EmailSettings.PushNotificationContents = this.state.pushNotificationContents;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        let pushNotificationServerType = PUSH_NOTIFICATIONS_CUSTOM;\n        let agree = false;\n        if (!config.EmailSettings.SendPushNotifications) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_OFF;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MHPNS &&\n            this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MHPNS;\n            agree = true;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MTPNS) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MTPNS;\n        }\n\n        let pushNotificationServer = config.EmailSettings.PushNotificationServer;\n        if (pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushNotificationServer = Constants.MTPNS;\n        } else if (pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushNotificationServer = Constants.MHPNS;\n        }\n\n        return {\n            pushNotificationServerType,\n            pushNotificationServer,\n            pushNotificationContents: config.EmailSettings.PushNotificationContents,\n            agree,\n        };\n    }\n\n    isPushNotificationServerSetByEnv = () => {\n        // Assume that if one of these has been set using an environment variable,\n        // all of them have been set that way\n        return this.isSetByEnv('EmailSettings.SendPushNotifications') ||\n            this.isSetByEnv('EmailSettings.PushNotificationServer');\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.notifications.title'\n                defaultMessage='Notification Settings'\n            />\n        );\n    }\n\n    renderSettings() {\n        const pushNotificationServerTypes = [];\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_OFF, text: Utils.localizeMessage('admin.email.pushOff', 'Do not send push notifications')});\n        if (this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MHPNS, text: Utils.localizeMessage('admin.email.mhpns', 'Use encrypted, production-quality HPNS connection to iOS and Android apps')});\n        }\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MTPNS, text: Utils.localizeMessage('admin.email.mtpns', 'Use iOS and Android apps on iTunes and Google Play with TPNS')});\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_CUSTOM, text: Utils.localizeMessage('admin.email.selfPush', 'Manually enter Push Notification Service location')});\n\n        let sendHelpText = null;\n        let pushServerHelpText = null;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_OFF) {\n            sendHelpText = (\n                <FormattedHTMLMessage\n                    id='admin.email.pushOffHelp'\n                    defaultMessage='Please see <a href=\"https://about.mattermost.com/default-mobile-push-notifications/\" target=\"_blank\">documentation on push notifications</a> to learn more about setup options.'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushServerHelpText = (\n                <FormattedHTMLMessage\n                    id='admin.email.mhpnsHelp'\n                    defaultMessage='Download <a href=\"https://about.mattermost.com/mattermost-ios-app/\" target=\"_blank\">Mattermost iOS app</a> from iTunes. Download <a href=\"https://about.mattermost.com/mattermost-android-app/\" target=\"_blank\">Mattermost Android app</a> from Google Play. Learn more about the <a href=\"https://about.mattermost.com/default-hpns/\" target=\"_blank\">Mattermost Hosted Push Notification Service</a>.'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushServerHelpText = (\n                <FormattedHTMLMessage\n                    id='admin.email.mtpnsHelp'\n                    defaultMessage='Download <a href=\"https://about.mattermost.com/mattermost-ios-app/\" target=\"_blank\">Mattermost iOS app</a> from iTunes. Download <a href=\"https://about.mattermost.com/mattermost-android-app/\" target=\"_blank\">Mattermost Android app</a> from Google Play. Learn more about the <a href=\"https://about.mattermost.com/default-tpns/\" target=\"_blank\">Mattermost Test Push Notification Service</a>.'\n                />\n            );\n        } else {\n            pushServerHelpText = (\n                <FormattedHTMLMessage\n                    id='admin.email.easHelp'\n                    defaultMessage='Learn more about compiling and deploying your own mobile apps from an <a href=\"https://about.mattermost.com/default-enterprise-app-store\" target=\"_blank\">Enterprise App Store</a>.'\n                />\n            );\n        }\n\n        let tosCheckbox;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            tosCheckbox = (\n                <div className='form-group'>\n                    <div className='col-sm-4'/>\n                    <div className='col-sm-8'>\n                        <input\n                            type='checkbox'\n                            ref='agree'\n                            checked={this.state.agree}\n                            onChange={this.handleAgreeChange}\n                        />\n                        <FormattedHTMLMessage\n                            id='admin.email.agreeHPNS'\n                            defaultMessage=' I understand and accept the Mattermost Hosted Push Notification Service <a href=\"https://about.mattermost.com/hpns-terms/\" target=\"_blank\">Terms of Service</a> and <a href=\"https://about.mattermost.com/hpns-privacy/\" target=\"_blank\">Privacy Policy</a>.'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <SettingsGroup\n                header={\n                    <FormattedMessage\n                        id='admin.notifications.push'\n                        defaultMessage='Mobile Push'\n                    />\n                }\n            >\n                <DropdownSetting\n                    id='pushNotificationServerType'\n                    values={pushNotificationServerTypes}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushTitle'\n                            defaultMessage='Enable Push Notifications: '\n                        />\n                    }\n                    value={this.state.pushNotificationServerType}\n                    onChange={this.handleDropdownChange}\n                    helpText={sendHelpText}\n                    setByEnv={this.isPushNotificationServerSetByEnv()}\n                />\n                {tosCheckbox}\n                <TextSetting\n                    id='pushNotificationServer'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushServerTitle'\n                            defaultMessage='Push Notification Server:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.pushServerEx', 'E.g.: \"http://push-test.mattermost.com\"')}\n                    helpText={pushServerHelpText}\n                    value={this.state.pushNotificationServer}\n                    onChange={this.handleChange}\n                    disabled={this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_CUSTOM}\n                    setByEnv={this.isSetByEnv('EmailSettings.PushNotificationServer')}\n                />\n                <DropdownSetting\n                    id='pushNotificationContents'\n                    values={[\n                        {value: 'generic_no_channel', text: Utils.localizeMessage('admin.email.genericNoChannelPushNotification', '\"Send generic description with only sender name')},\n                        {value: 'generic', text: Utils.localizeMessage('admin.email.genericPushNotification', 'Send generic description with sender and channel names')},\n                        {value: 'full', text: Utils.localizeMessage('admin.email.fullPushNotification', 'Send full message snippet')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushContentTitle'\n                            defaultMessage='Push Notification Contents:'\n                        />\n                    }\n                    value={this.state.pushNotificationContents}\n                    onChange={this.handleDropdownChange}\n                    disabled={this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_OFF}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.email.pushContentDesc'\n                            defaultMessage='\"Send generic description with only sender name\" includes only the name of the person who sent the message in push notifications, with no information about channel name or message contents.<br /><br />\"Send generic description with sender and channel names\" includes the name of the person who sent the message and the channel it was sent in, but not the message text.<br /><br />\"Send full message snippet\" includes a message excerpt in push notifications, which may contain confidential information sent in messages. If your Push Notification Service is outside your firewall, it is *highly recommended* this option only be used with an \"https\" protocol to encrypt the connection.'\n                        />\n                    }\n                    setByEnv={this.isSetByEnv('EmailSettings.PushNotificationContents')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport FileUploadSetting from './file_upload_setting.jsx';\nimport RemoveFileSetting from './remove_file_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class SamlSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n        this.uploadCertificate = this.uploadCertificate.bind(this);\n        this.removeCertificate = this.removeCertificate.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.SamlSettings.Enable = this.state.enable;\n        config.SamlSettings.EnableSyncWithLdap = this.state.enableSyncWithLdap;\n        config.SamlSettings.Verify = this.state.verify;\n        config.SamlSettings.Encrypt = this.state.encrypt;\n        config.SamlSettings.IdpUrl = this.state.idpUrl;\n        config.SamlSettings.IdpDescriptorUrl = this.state.idpDescriptorUrl;\n        config.SamlSettings.AssertionConsumerServiceURL = this.state.assertionConsumerServiceURL;\n        config.SamlSettings.IdpCertificateFile = this.state.idpCertificateFile;\n        config.SamlSettings.PublicCertificateFile = this.state.publicCertificateFile;\n        config.SamlSettings.PrivateKeyFile = this.state.privateKeyFile;\n        config.SamlSettings.FirstNameAttribute = this.state.firstNameAttribute;\n        config.SamlSettings.LastNameAttribute = this.state.lastNameAttribute;\n        config.SamlSettings.EmailAttribute = this.state.emailAttribute;\n        config.SamlSettings.UsernameAttribute = this.state.usernameAttribute;\n        config.SamlSettings.NicknameAttribute = this.state.nicknameAttribute;\n        config.SamlSettings.PositionAttribute = this.state.positionAttribute;\n        config.SamlSettings.LocaleAttribute = this.state.localeAttribute;\n        config.SamlSettings.LoginButtonText = this.state.loginButtonText;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const settings = config.SamlSettings;\n\n        // pre-populate Service Provider Login URL page\n        const siteUrl = config.ServiceSettings.SiteURL;\n        let consumerServiceUrl = settings.AssertionConsumerServiceURL;\n        if (siteUrl.length > 0 && consumerServiceUrl.length === 0) {\n            const addSlashIfNeeded = siteUrl[siteUrl.length - 1] === '/' ? '' : '/';\n            consumerServiceUrl = `${siteUrl}${addSlashIfNeeded}login/sso/saml`;\n        }\n\n        return {\n            siteUrlSet: siteUrl.length > 0,\n            enable: settings.Enable,\n            enableSyncWithLdap: settings.EnableSyncWithLdap,\n            verify: settings.Verify,\n            encrypt: settings.Encrypt,\n            idpUrl: settings.IdpUrl,\n            idpDescriptorUrl: settings.IdpDescriptorUrl,\n            assertionConsumerServiceURL: consumerServiceUrl,\n            idpCertificateFile: settings.IdpCertificateFile,\n            publicCertificateFile: settings.PublicCertificateFile,\n            privateKeyFile: settings.PrivateKeyFile,\n            firstNameAttribute: settings.FirstNameAttribute,\n            lastNameAttribute: settings.LastNameAttribute,\n            emailAttribute: settings.EmailAttribute,\n            usernameAttribute: settings.UsernameAttribute,\n            nicknameAttribute: settings.NicknameAttribute,\n            positionAttribute: settings.PositionAttribute,\n            localeAttribute: settings.LocaleAttribute,\n            loginButtonText: settings.LoginButtonText,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        AdminActions.samlCertificateStatus(\n            (data) => {\n                const files = {};\n                if (!data.idp_certificate_file) {\n                    files.idpCertificateFile = '';\n                }\n\n                if (!data.public_certificate_file) {\n                    files.publicCertificateFile = '';\n                }\n\n                if (!data.private_key_file) {\n                    files.privateKeyFile = '';\n                }\n                this.setState(files);\n            }\n        );\n    }\n\n    uploadCertificate(id, file, callback) {\n        const complete = () => {\n            const fileName = file.name;\n            this.handleChange(id, fileName);\n            this.setState({[id]: fileName, [`${id}Error`]: null});\n            if (callback && typeof callback === 'function') {\n                callback();\n            }\n        };\n\n        function fail(error) {\n            if (callback && typeof callback === 'function') {\n                callback(error.message);\n            }\n        }\n\n        if (id === 'idpCertificateFile') {\n            AdminActions.uploadIdpSamlCertificate(file, complete, fail);\n        } else if (id === 'publicCertificateFile') {\n            AdminActions.uploadPublicSamlCertificate(file, complete, fail);\n        } else if (id === 'privateKeyFile') {\n            AdminActions.uploadPrivateSamlCertificate(file, complete, fail);\n        }\n    }\n\n    removeCertificate(id, callback) {\n        const complete = () => {\n            this.handleChange(id, '');\n            this.setState({[id]: null, [`${id}Error`]: null});\n        };\n\n        const fail = (error) => {\n            if (callback && typeof callback === 'function') {\n                callback();\n            }\n            this.setState({[id]: null, [`${id}Error`]: error.message});\n        };\n\n        if (id === 'idpCertificateFile') {\n            AdminActions.removeIdpSamlCertificate(complete, fail);\n        } else if (id === 'publicCertificateFile') {\n            AdminActions.removePublicSamlCertificate(complete, fail);\n        } else if (id === 'privateKeyFile') {\n            AdminActions.removePrivateSamlCertificate(complete, fail);\n        }\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.authentication.saml'\n                defaultMessage='SAML 2.0'\n            />\n        );\n    }\n\n    renderSettings() {\n        const licenseEnabled = this.props.license.IsLicensed === 'true' && this.props.license.SAML === 'true';\n        if (!licenseEnabled) {\n            return null;\n        }\n\n        let idpCert;\n        let privKey;\n        let pubCert;\n\n        if (this.state.idpCertificateFile) {\n            idpCert = (\n                <RemoveFileSetting\n                    id='idpCertificateFile'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.idpCertificateFileTitle'\n                            defaultMessage='Identity Provider Public Certificate:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.idpCertificateFileRemoveDesc'\n                            defaultMessage='Remove the public authentication certificate issued by your Identity Provider.'\n                        />\n                    }\n                    removeButtonText={Utils.localizeMessage('admin.saml.remove.idp_certificate', 'Remove Identity Provider Certificate')}\n                    removingText={Utils.localizeMessage('admin.saml.removing.certificate', 'Removing Certificate...')}\n                    fileName={this.state.idpCertificateFile}\n                    onSubmit={this.removeCertificate}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.IdpCertificateFile')}\n                />\n            );\n        } else {\n            idpCert = (\n                <FileUploadSetting\n                    id='idpCertificateFile'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.idpCertificateFileTitle'\n                            defaultMessage='Identity Provider Public Certificate:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.idpCertificateFileDesc'\n                            defaultMessage='The public authentication certificate issued by your Identity Provider.'\n                        />\n                    }\n                    uploadingText={Utils.localizeMessage('admin.saml.uploading.certificate', 'Uploading Certificate...')}\n                    disabled={!this.state.enable}\n                    fileType='.crt,.cer,.cert,.pem'\n                    onSubmit={this.uploadCertificate}\n                    error={this.state.idpCertificateFileError}\n                    setByEnv={this.isSetByEnv('SamlSettings.IdpCertificateFile')}\n                />\n            );\n        }\n\n        if (this.state.privateKeyFile) {\n            privKey = (\n                <RemoveFileSetting\n                    id='privateKeyFile'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.privateKeyFileTitle'\n                            defaultMessage='Service Provider Private Key:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.privateKeyFileFileRemoveDesc'\n                            defaultMessage='Remove the private key used to decrypt SAML Assertions from the Identity Provider.'\n                        />\n                    }\n                    removeButtonText={Utils.localizeMessage('admin.saml.remove.privKey', 'Remove Service Provider Private Key')}\n                    removingText={Utils.localizeMessage('admin.saml.removing.privKey', 'Removing Private Key...')}\n                    fileName={this.state.privateKeyFile}\n                    onSubmit={this.removeCertificate}\n                    disabled={!this.state.enable || !this.state.encrypt}\n                    setByEnv={this.isSetByEnv('SamlSettings.PrivateKeyFile')}\n                />\n            );\n        } else {\n            privKey = (\n                <FileUploadSetting\n                    id='privateKeyFile'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.privateKeyFileTitle'\n                            defaultMessage='Service Provider Private Key:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.privateKeyFileFileDesc'\n                            defaultMessage='The private key used to decrypt SAML Assertions from the Identity Provider.'\n                        />\n                    }\n                    uploadingText={Utils.localizeMessage('admin.saml.uploading.privateKey', 'Uploading Private Key...')}\n                    disabled={!this.state.enable || !this.state.encrypt}\n                    fileType='.key'\n                    onSubmit={this.uploadCertificate}\n                    error={this.state.privateKeyFileError}\n                    setByEnv={this.isSetByEnv('SamlSettings.PrivateKeyFile')}\n                />\n            );\n        }\n\n        if (this.state.publicCertificateFile) {\n            pubCert = (\n                <RemoveFileSetting\n                    id='publicCertificateFile'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.publicCertificateFileTitle'\n                            defaultMessage='Service Provider Public Certificate:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.publicCertificateFileRemoveDesc'\n                            defaultMessage='Remove the certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.'\n                        />\n                    }\n                    removeButtonText={Utils.localizeMessage('admin.saml.remove.sp_certificate', 'Remove Service Provider Certificate')}\n                    removingText={Utils.localizeMessage('admin.saml.removing.certificate', 'Removing Certificate...')}\n                    fileName={this.state.publicCertificateFile}\n                    onSubmit={this.removeCertificate}\n                    disabled={!this.state.enable || !this.state.encrypt}\n                    setByEnv={this.isSetByEnv('SamlSettings.PublicCertificateFile')}\n                />\n            );\n        } else {\n            pubCert = (\n                <FileUploadSetting\n                    id='publicCertificateFile'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.publicCertificateFileTitle'\n                            defaultMessage='Service Provider Public Certificate:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.publicCertificateFileDesc'\n                            defaultMessage='The certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.'\n                        />\n                    }\n                    uploadingText={Utils.localizeMessage('admin.saml.uploading.certificate', 'Uploading Certificate...')}\n                    disabled={!this.state.enable || !this.state.encrypt}\n                    fileType='.crt,.cer'\n                    onSubmit={this.uploadCertificate}\n                    error={this.state.publicCertificateFileError}\n                    setByEnv={this.isSetByEnv('SamlSettings.PublicCertificateFile')}\n                />\n            );\n        }\n\n        let consumerServiceUrlHelp;\n        if (this.state.siteUrlSet) {\n            consumerServiceUrlHelp = (\n                <FormattedMessage\n                    id='admin.saml.assertionConsumerServiceURLPopulatedDesc'\n                    defaultMessage='This field is also known as the Assertion Consumer Service URL.'\n                />\n            );\n        } else {\n            consumerServiceUrlHelp = (\n                <FormattedMessage\n                    id='admin.saml.assertionConsumerServiceURLDesc'\n                    defaultMessage='Enter https://<your-mattermost-url>/login/sso/saml. Make sure you use HTTP or HTTPS in your URL depending on your server configuration. This field is also known as the Assertion Consumer Service URL.'\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enable'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.enableTitle'\n                            defaultMessage='Enable Login With SAML 2.0:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.saml.enableDescription'\n                            defaultMessage='When true, Mattermost allows login using SAML 2.0. Please see <a href=\"http://docs.mattermost.com/deployment/sso-saml.html\" target=\"_blank\">documentation</a> to learn more about configuring SAML for Mattermost.'\n                        />\n                    }\n                    value={this.state.enable}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SamlSettings.Enable')}\n                />\n                <BooleanSetting\n                    id='enableSyncWithLdap'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.enableSyncWithLdapTitle'\n                            defaultMessage='Enable Synchronizing SAML Accounts With AD/LDAP:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.saml.enableSyncWithLdapDescription'\n                            defaultMessage='When true, Mattermost periodically synchronizes SAML user attributes, including user deactivation and removal, from AD/LDAP. Enable and configure synchronization settings at <strong>Authentication > AD/LDAP</strong>. When false, user attributes are updated from SAML during user login. See <a href=\"https://about.mattermost.com/default-saml-ldap-sync\" target=\"_blank\">documentation</a> to learn more.'\n                        />\n                    }\n                    value={this.state.enableSyncWithLdap}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.EnableSyncWithLdap')}\n                />\n                <TextSetting\n                    id='idpUrl'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.idpUrlTitle'\n                            defaultMessage='SAML SSO URL:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.idpUrlEx', 'E.g.: \"https://idp.example.org/SAML2/SSO/Login\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.idpUrlDesc'\n                            defaultMessage='The URL where Mattermost sends a SAML request to start login sequence.'\n                        />\n                    }\n                    value={this.state.idpUrl}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.IdpUrl')}\n                />\n                <TextSetting\n                    id='idpDescriptorUrl'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.idpDescriptorUrlTitle'\n                            defaultMessage='Identity Provider Issuer URL:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.idpDescriptorUrlEx', 'E.g.: \"https://idp.example.org/SAML2/issuer\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.idpDescriptorUrlDesc'\n                            defaultMessage='The issuer URL for the Identity Provider you use for SAML requests.'\n                        />\n                    }\n                    value={this.state.idpDescriptorUrl}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.IdpDescriptorUrl')}\n                />\n                {idpCert}\n                <BooleanSetting\n                    id='verify'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.verifyTitle'\n                            defaultMessage='Verify Signature:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.verifyDescription'\n                            defaultMessage='When false, Mattermost will not verify that the signature sent from a SAML Response matches the Service Provider Login URL. Not recommended for production environments. For testing only.'\n                        />\n                    }\n                    value={this.state.verify}\n                    disabled={!this.state.enable}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SamlSettings.Verify')}\n                />\n                <TextSetting\n                    id='assertionConsumerServiceURL'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.assertionConsumerServiceURLTitle'\n                            defaultMessage='Service Provider Login URL:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.assertionConsumerServiceURLEx', 'E.g.: \"https://<your-mattermost-url>/login/sso/saml\"')}\n                    helpText={consumerServiceUrlHelp}\n                    value={this.state.assertionConsumerServiceURL}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable || !this.state.verify || this.state.siteUrlSet}\n                    setByEnv={this.isSetByEnv('SamlSettings.AssertionConsumerServiceURL')}\n                />\n                <BooleanSetting\n                    id='encrypt'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.encryptTitle'\n                            defaultMessage='Enable Encryption:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.encryptDescription'\n                            defaultMessage='When false, Mattermost will not decrypt SAML Assertions encrypted with your Service Provider Public Certificate. Not recommended for production environments. For testing only.'\n                        />\n                    }\n                    value={this.state.encrypt}\n                    disabled={!this.state.enable}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SamlSettings.Encrypt')}\n                />\n                {privKey}\n                {pubCert}\n                <TextSetting\n                    id='emailAttribute'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.emailAttrTitle'\n                            defaultMessage='Email Attribute:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.emailAttrEx', 'E.g.: \"Email\" or \"PrimaryEmail\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.emailAttrDesc'\n                            defaultMessage='The attribute in the SAML Assertion that will be used to populate the email addresses of users in Mattermost.'\n                        />\n                    }\n                    value={this.state.emailAttribute}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.EmailAttribute')}\n                />\n                <TextSetting\n                    id='usernameAttribute'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.usernameAttrTitle'\n                            defaultMessage='Username Attribute:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.usernameAttrEx', 'E.g.: \"Username\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.usernameAttrDesc'\n                            defaultMessage='The attribute in the SAML Assertion that will be used to populate the username field in Mattermost.'\n                        />\n                    }\n                    value={this.state.usernameAttribute}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.UsernameAttribute')}\n                />\n                <TextSetting\n                    id='firstNameAttribute'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.firstnameAttrTitle'\n                            defaultMessage='First Name Attribute:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.firstnameAttrEx', 'E.g.: \"FirstName\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.firstnameAttrDesc'\n                            defaultMessage='(Optional) The attribute in the SAML Assertion that will be used to populate the first name of users in Mattermost.'\n                        />\n                    }\n                    value={this.state.firstNameAttribute}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.FirstNameAttribute')}\n                />\n                <TextSetting\n                    id='lastNameAttribute'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.lastnameAttrTitle'\n                            defaultMessage='Last Name Attribute:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.lastnameAttrEx', 'E.g.: \"LastName\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.lastnameAttrDesc'\n                            defaultMessage='(Optional) The attribute in the SAML Assertion that will be used to populate the last name of users in Mattermost.'\n                        />\n                    }\n                    value={this.state.lastNameAttribute}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.LastNameAttribute')}\n                />\n                <TextSetting\n                    id='nicknameAttribute'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.nicknameAttrTitle'\n                            defaultMessage='Nickname Attribute:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.nicknameAttrEx', 'E.g.: \"Nickname\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.nicknameAttrDesc'\n                            defaultMessage='(Optional) The attribute in the SAML Assertion that will be used to populate the nickname of users in Mattermost.'\n                        />\n                    }\n                    value={this.state.nicknameAttribute}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.NicknameAttribute')}\n                />\n                <TextSetting\n                    id='positionAttribute'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.positionAttrTitle'\n                            defaultMessage='Position Attribute:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.positionAttrEx', 'E.g.: \"Role\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.positionAttrDesc'\n                            defaultMessage='(Optional) The attribute in the SAML Assertion that will be used to populate the position of users in Mattermost.'\n                        />\n                    }\n                    value={this.state.positionAttribute}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.PositionAttribute')}\n                />\n                <TextSetting\n                    id='localeAttribute'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.localeAttrTitle'\n                            defaultMessage='Preferred Language Attribute:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.localeAttrEx', 'E.g.: \"Locale\" or \"PrimaryLanguage\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.localeAttrDesc'\n                            defaultMessage='(Optional) The attribute in the SAML Assertion that will be used to populate the language of users in Mattermost.'\n                        />\n                    }\n                    value={this.state.localeAttribute}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.LocaleAttribute')}\n                />\n                <TextSetting\n                    id='loginButtonText'\n                    label={\n                        <FormattedMessage\n                            id='admin.saml.loginButtonTextTitle'\n                            defaultMessage='Login Button Text:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.saml.loginButtonTextEx', 'E.g.: \"With OKTA\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.saml.loginButtonTextDesc'\n                            defaultMessage='(Optional) The text that appears in the login button on the login page. Defaults to \"With SAML\".'\n                        />\n                    }\n                    value={this.state.loginButtonText}\n                    onChange={this.handleChange}\n                    disabled={!this.state.enable}\n                    setByEnv={this.isSetByEnv('SamlSettings.LoginButtonText')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting.jsx';\n\nexport default class FileUploadSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            uploadingText: PropTypes.node,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            fileType: PropTypes.string.isRequired,\n            error: PropTypes.string,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.state = {\n            fileName: null,\n            serverError: props.error,\n        };\n    }\n\n    handleChange() {\n        const files = this.refs.fileInput.files;\n        if (files && files.length > 0) {\n            this.setState({fileSelected: true, fileName: files[0].name});\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        $(this.refs.upload_button).button('loading');\n        this.props.onSubmit(this.props.id, this.refs.fileInput.files[0], (error) => {\n            $(this.refs.upload_button).button('reset');\n            if (error) {\n                Utils.clearFileInput(this.refs.fileInput);\n            }\n        });\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.fileName) {\n            fileName = this.state.fileName;\n        } else {\n            fileName = (\n                <FormattedMessage\n                    id='admin.file_upload.noFile'\n                    defaultMessage='No file uploaded'\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='file__upload'>\n                        <button\n                            className='btn btn-default'\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.file_upload.chooseFile'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            disabled={this.props.disabled}\n                            accept={this.props.fileType}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button\n                        className={btnClass}\n                        disabled={!this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        ref='upload_button'\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.uploadingText}`}\n                    >\n                        <FormattedMessage\n                            id='admin.file_upload.uploadFile'\n                            defaultMessage='Upload'\n                        />\n                    </button>\n                    <div className='help-text no-margin'>\n                        {fileName}\n                    </div>\n                    {serverError}\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class RemoveFileSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            removeButtonText: PropTypes.node.isRequired,\n            removingText: PropTypes.node,\n            fileName: PropTypes.string.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n        this.handleRemove = this.handleRemove.bind(this);\n    }\n\n    handleRemove(e) {\n        e.preventDefault();\n\n        $(this.refs.remove_button).button('loading');\n        this.props.onSubmit(this.props.id, () => {\n            $(this.refs.remove_button).button('reset');\n        });\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='help-text remove-filename'>\n                        {this.props.fileName}\n                    </div>\n                    <button\n                        className='btn btn-danger'\n                        onClick={this.handleRemove}\n                        ref='remove_button'\n                        disabled={this.props.disabled}\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.removingText}`}\n                    >\n                        {this.props.removeButtonText}\n                    </button>\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nconst MINIMUM_IDLE_TIMEOUT = 5;\n\nexport default class SessionSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ServiceSettings.SessionLengthWebInDays = this.parseIntNonZero(this.state.sessionLengthWebInDays);\n        config.ServiceSettings.SessionLengthMobileInDays = this.parseIntNonZero(this.state.sessionLengthMobileInDays);\n        config.ServiceSettings.SessionLengthSSOInDays = this.parseIntNonZero(this.state.sessionLengthSSOInDays);\n        config.ServiceSettings.SessionCacheInMinutes = this.parseIntNonZero(this.state.sessionCacheInMinutes);\n\n        const timeout = this.parseInt(this.state.sessionIdleTimeoutInMinutes);\n        if (timeout !== 0 && timeout < MINIMUM_IDLE_TIMEOUT) {\n            config.ServiceSettings.SessionIdleTimeoutInMinutes = MINIMUM_IDLE_TIMEOUT;\n        } else {\n            config.ServiceSettings.SessionIdleTimeoutInMinutes = timeout;\n        }\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            sessionLengthWebInDays: config.ServiceSettings.SessionLengthWebInDays,\n            sessionLengthMobileInDays: config.ServiceSettings.SessionLengthMobileInDays,\n            sessionLengthSSOInDays: config.ServiceSettings.SessionLengthSSOInDays,\n            sessionCacheInMinutes: config.ServiceSettings.SessionCacheInMinutes,\n            sessionIdleTimeoutInMinutes: config.ServiceSettings.SessionIdleTimeoutInMinutes,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.security.session'\n                defaultMessage='Sessions'\n            />\n        );\n    }\n\n    renderSettings() {\n        let idleTimeout;\n        if (this.props.license.IsLicensed === 'true' && this.props.license.Compliance === 'true') {\n            idleTimeout = (\n                <TextSetting\n                    id='sessionIdleTimeoutInMinutes'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.sessionIdleTimeout'\n                            defaultMessage='Session Idle Timeout (minutes):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionIdleTimeoutEx', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.service.sessionIdleTimeoutDesc'\n                            defaultMessage=\"The number of minutes from the last time a user was active on the system to the expiry of the user's session. Once expired, the user will need to log in to continue. Minimum is 5 minutes, and 0 is unlimited.<br/><br/>Applies to the desktop app and browsers. For mobile apps, use an EMM provider to lock the app when not in use. In High Availability mode, enable IP hash load balancing for reliable timeout measurement.\"\n                        />\n                    }\n                    value={this.state.sessionIdleTimeoutInMinutes}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionIdleTimeoutInMinutes')}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <TextSetting\n                    id='sessionLengthWebInDays'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.webSessionDays'\n                            defaultMessage='Session Length AD/LDAP and Email (days):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionDaysEx', 'E.g.: \"30\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.webSessionDaysDesc'\n                            defaultMessage='The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.'\n                        />\n                    }\n                    value={this.state.sessionLengthWebInDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionLengthWebInDays')}\n                />\n                <TextSetting\n                    id='sessionLengthMobileInDays'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.mobileSessionDays'\n                            defaultMessage='Session Length Mobile (days):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionDaysEx', 'E.g.: \"30\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.mobileSessionDaysDesc'\n                            defaultMessage='The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.'\n                        />\n                    }\n                    value={this.state.sessionLengthMobileInDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionLengthMobileInDays')}\n                />\n                <TextSetting\n                    id='sessionLengthSSOInDays'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.ssoSessionDays'\n                            defaultMessage='Session Length SSO (days):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionDaysEx', 'E.g.: \"30\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.ssoSessionDaysDesc'\n                            defaultMessage='The number of days from the last time a user entered their credentials to the expiry of the users session. If the authentication method is SAML or GitLab, the user may automatically be logged back in to Mattermost if they are already logged in to SAML or GitLab. After changing this setting, the setting will take effect after the next time the user enters their credentials. '\n                        />\n                    }\n                    value={this.state.sessionLengthSSOInDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionLengthSSOInDays')}\n                />\n                <TextSetting\n                    id='sessionCacheInMinutes'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.sessionCache'\n                            defaultMessage='Session Cache (minutes):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionDaysEx', 'E.g.: \"30\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.sessionCacheDesc'\n                            defaultMessage='The number of minutes to cache a session in memory.'\n                        />\n                    }\n                    value={this.state.sessionCacheInMinutes}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionCacheInMinutes')}\n                />\n                {idleTimeout}\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nexport default class DiscardChangesModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Bool whether the modal is shown\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Action to call on confirm\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Action to call on cancel\n         */\n        onCancel: PropTypes.func.isRequired,\n\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='discard_changes_modal.title'\n                defaultMessage='Discard Changes?'\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='discard_changes_modal.message'\n                defaultMessage='You have unsaved changes, are you sure you want to discard them?'\n            />\n        );\n\n        const buttonClass = 'btn btn-primary';\n        const button = (\n            <FormattedMessage\n                id='discard_changes_modal.leave'\n                defaultMessage='Yes, Discard'\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        const {show, onConfirm, onCancel} = this.props;\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={buttonClass}\n                confirmButtonText={button}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getPlugins} from 'mattermost-redux/actions/admin';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport AdminSidebar from './admin_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const buildEnterpriseReady = config.BuildEnterpriseReady === 'true';\n    const siteName = config.SiteName;\n\n    return {\n        license,\n        config: state.entities.admin.config,\n        plugins: state.entities.admin.plugins,\n        buildEnterpriseReady,\n        siteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getPlugins,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, {pure: false})(AdminSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport AdminSidebarCategory from 'components/admin_console/admin_sidebar_category.jsx';\nimport AdminSidebarHeader from 'components/admin_console/admin_sidebar_header.jsx';\nimport AdminSidebarSection from 'components/admin_console/admin_sidebar_section.jsx';\n\nexport default class AdminSidebar extends React.Component {\n    static get contextTypes() {\n        return {\n            router: PropTypes.object.isRequired,\n        };\n    }\n\n    static propTypes = {\n        license: PropTypes.object.isRequired,\n        config: PropTypes.object,\n        plugins: PropTypes.object,\n        buildEnterpriseReady: PropTypes.bool,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get installed plugins\n             */\n            getPlugins: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        plugins: {},\n    }\n\n    componentDidMount() {\n        if (this.props.config.PluginSettings.Enable) {\n            this.props.actions.getPlugins();\n        }\n\n        this.updateTitle();\n\n        if (!Utils.isMobile()) {\n            $('.admin-sidebar .nav-pills__container').perfectScrollbar({\n                suppressScrollX: true,\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        if (!Utils.isMobile()) {\n            $('.admin-sidebar .nav-pills__container').perfectScrollbar({\n                suppressScrollX: true,\n            });\n        }\n    }\n\n    updateTitle = () => {\n        let currentSiteName = '';\n        if (this.props.siteName) {\n            currentSiteName = ' - ' + this.props.siteName;\n        }\n\n        document.title = Utils.localizeMessage('sidebar_right_menu.console', 'System Console') + currentSiteName;\n    }\n\n    render() {\n        let oauthSettings = null;\n        let ldapSettings = null;\n        let samlSettings = null;\n        let clusterSettings = null;\n        let metricsSettings = null;\n        let complianceSettings = null;\n        let mfaSettings = null;\n        let messageExportSettings = null;\n        let complianceSection = null;\n\n        let license = null;\n        let audits = null;\n        let announcement = null;\n\n        if (this.props.buildEnterpriseReady) {\n            license = (\n                <AdminSidebarSection\n                    name='license'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.license'\n                            defaultMessage='Edition and License'\n                        />\n                    }\n                />\n            );\n        }\n\n        if (this.props.license.IsLicensed === 'true') {\n            if (this.props.license.LDAP === 'true') {\n                ldapSettings = (\n                    <AdminSidebarSection\n                        name='ldap'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.ldap'\n                                defaultMessage='AD/LDAP'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.Cluster === 'true') {\n                clusterSettings = (\n                    <AdminSidebarSection\n                        name='cluster'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.cluster'\n                                defaultMessage='High Availability'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.Metrics === 'true') {\n                metricsSettings = (\n                    <AdminSidebarSection\n                        name='metrics'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.metrics'\n                                defaultMessage='Performance Monitoring'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.SAML === 'true') {\n                samlSettings = (\n                    <AdminSidebarSection\n                        name='saml'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.saml'\n                                defaultMessage='SAML 2.0'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.Compliance === 'true') {\n                complianceSettings = (\n                    <AdminSidebarSection\n                        name='compliance'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.compliance'\n                                defaultMessage='Compliance'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.MFA === 'true') {\n                mfaSettings = (\n                    <AdminSidebarSection\n                        name='mfa'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.mfa'\n                                defaultMessage='MFA'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.MessageExport === 'true') {\n                messageExportSettings = (\n                    <AdminSidebarSection\n                        name='message_export'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.compliance_export'\n                                defaultMessage='Compliance Export (Beta)'\n                            />\n                        }\n                    />\n                );\n            }\n\n            oauthSettings = (\n                <AdminSidebarSection\n                    name='oauth'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.oauth'\n                            defaultMessage='OAuth 2.0'\n                        />\n                    }\n                />\n            );\n            announcement = (\n                <AdminSidebarSection\n                    name='announcement'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.announcement'\n                            defaultMessage='Announcement Banner'\n                        />\n                    }\n                />\n            );\n        } else {\n            oauthSettings = (\n                <AdminSidebarSection\n                    name='gitlab'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.gitlab'\n                            defaultMessage='GitLab'\n                        />\n                    }\n                />\n            );\n        }\n\n        if (this.props.license.IsLicensed === 'true') {\n            audits = (\n                <AdminSidebarSection\n                    name='audits'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.audits'\n                            defaultMessage='Complaince and Auditing'\n                        />\n                    }\n                />\n            );\n        }\n\n        let otherCategory = null;\n        if (license || audits) {\n            otherCategory = (\n                <AdminSidebarCategory\n                    parentLink='/admin_console'\n                    icon='fa-wrench'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.other'\n                            defaultMessage='OTHER'\n                        />\n                    }\n                >\n                    {license}\n                    {audits}\n                </AdminSidebarCategory>\n            );\n        }\n\n        const webrtcSettings = (\n            <AdminSidebarSection\n                name='webrtc'\n                title={\n                    <FormattedMessage\n                        id='admin.sidebar.webrtc'\n                        defaultMessage='WebRTC (Beta)'\n                    />\n                }\n            />\n        );\n\n        let elasticSearchSettings = null;\n        if (this.props.license.IsLicensed === 'true' && this.props.license.Elasticsearch === 'true') {\n            elasticSearchSettings = (\n                <AdminSidebarSection\n                    name='elasticsearch'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.elasticsearch'\n                            defaultMessage='Elasticsearch'\n                        />\n                    }\n                />\n            );\n        }\n\n        let dataRetentionSettings = null;\n        if (this.props.license.IsLicensed === 'true' && this.props.license.DataRetention === 'true') {\n            dataRetentionSettings = (\n                <AdminSidebarSection\n                    name='data_retention'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.data_retention'\n                            defaultMessage='Data Retention Policy (Beta)'\n                        />\n                    }\n                />\n            );\n        }\n\n        const SHOW_CLIENT_VERSIONS = false;\n        let clientVersions = null;\n        if (SHOW_CLIENT_VERSIONS) {\n            clientVersions = (\n                <AdminSidebarSection\n                    name='client_versions'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.client_versions'\n                            defaultMessage='Client Versions'\n                        />\n                    }\n                />\n            );\n        }\n\n        if (dataRetentionSettings || messageExportSettings) {\n            complianceSection = (\n                <AdminSidebarSection\n                    name='compliance'\n                    type='text'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.compliance'\n                            defaultMessage='Compliance'\n                        />\n                    }\n                >\n                    {dataRetentionSettings}\n                    {messageExportSettings}\n                </AdminSidebarSection>\n            );\n        }\n\n        const customPlugins = [];\n        if (this.props.config.PluginSettings.Enable) {\n            Object.values(this.props.plugins).forEach((p) => {\n                if (!p.settings_schema || Object.keys(p.settings_schema) === 0) {\n                    return;\n                }\n\n                customPlugins.push(\n                    <AdminSidebarSection\n                        key={'customplugin' + p.id}\n                        name={'custom/' + p.id}\n                        title={p.name}\n                    />\n                );\n            });\n        }\n\n        return (\n            <div className='admin-sidebar'>\n                <AdminSidebarHeader/>\n                <div className='nav-pills__container'>\n                    <ul className='nav nav-pills nav-stacked'>\n                        <AdminSidebarCategory\n                            parentLink='/admin_console'\n                            icon='fa-bar-chart'\n                            title={\n                                <FormattedMessage\n                                    id='admin.sidebar.reports'\n                                    defaultMessage='REPORTING'\n                                />\n                            }\n                        >\n                            <AdminSidebarSection\n                                name='system_analytics'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.view_statistics'\n                                        defaultMessage='Site Statistics'\n                                    />\n                                }\n                            />\n                            <AdminSidebarSection\n                                name='team_analytics'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.statistics'\n                                        defaultMessage='Team Statistics'\n                                    />\n                                }\n                            />\n                            <AdminSidebarSection\n                                name='users'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.users'\n                                        defaultMessage='Users'\n                                    />\n                                }\n                            />\n                            <AdminSidebarSection\n                                name='logs'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.logs'\n                                        defaultMessage='Logs'\n                                    />\n                                }\n                            />\n                        </AdminSidebarCategory>\n                        <AdminSidebarCategory\n                            sectionClass='sections--settings'\n                            parentLink='/admin_console'\n                            icon='fa-gear'\n                            title={\n                                <FormattedMessage\n                                    id='admin.sidebar.settings'\n                                    defaultMessage='SETTINGS'\n                                />\n                            }\n                        >\n                            <AdminSidebarSection\n                                name='general'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.general'\n                                        defaultMessage='General'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='configuration'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.configuration'\n                                            defaultMessage='Configuration'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='localization'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.localization'\n                                            defaultMessage='Localization'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='users_and_teams'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.usersAndTeams'\n                                            defaultMessage='Users and Teams'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='privacy'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.privacy'\n                                            defaultMessage='Privacy'\n                                        />\n                                    }\n                                />\n                                {complianceSettings}\n                                <AdminSidebarSection\n                                    name='logging'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.logging'\n                                            defaultMessage='Logging'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            {this.props.license.IsLicensed === 'true' &&\n                                <AdminSidebarSection\n                                    name='permissions'\n                                    type='text'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.permissions'\n                                            defaultMessage='Advanced Permissions'\n                                        />\n                                    }\n                                >\n                                    {this.props.license.CustomPermissionsSchemes !== 'true' &&\n                                        <AdminSidebarSection\n                                            name='system-scheme'\n                                            title={\n                                                <FormattedMessage\n                                                    id='admin.sidebar.system-scheme'\n                                                    defaultMessage='System scheme'\n                                                />\n                                            }\n                                        />}\n                                    {this.props.license.CustomPermissionsSchemes === 'true' &&\n                                        <AdminSidebarSection\n                                            name='schemes'\n                                            title={\n                                                <FormattedMessage\n                                                    id='admin.sidebar.schemes'\n                                                    defaultMessage='Permission Schemes'\n                                                />\n                                            }\n                                        />}\n                                </AdminSidebarSection>}\n                            <AdminSidebarSection\n                                name='authentication'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.authentication'\n                                        defaultMessage='Authentication'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='authentication_email'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.email'\n                                            defaultMessage='Email'\n                                        />\n                                    }\n                                />\n                                {oauthSettings}\n                                {ldapSettings}\n                                {samlSettings}\n                                {mfaSettings}\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='security'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.security'\n                                        defaultMessage='Security'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='sign_up'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.signUp'\n                                            defaultMessage='Sign Up'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='password'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.password'\n                                            defaultMessage='Password'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='public_links'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.publicLinks'\n                                            defaultMessage='Public Links'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='sessions'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.sessions'\n                                            defaultMessage='Sessions'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='connections'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.connections'\n                                            defaultMessage='Connections'\n                                        />\n                                    }\n                                />\n                                {clientVersions}\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='notifications'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.notifications'\n                                        defaultMessage='Notifications'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='notifications_email'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.email'\n                                            defaultMessage='Email'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='push'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.push'\n                                            defaultMessage='Mobile Push'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='integrations'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.integrations'\n                                        defaultMessage='Integrations'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='custom'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.customIntegrations'\n                                            defaultMessage='Custom Integrations'\n                                        />\n                                    }\n                                />\n                                {webrtcSettings}\n                                <AdminSidebarSection\n                                    name='external'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.external'\n                                            defaultMessage='External Services'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='plugins'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.plugins'\n                                        defaultMessage='Plugins (Beta)'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='configuration'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.plugins.configuration'\n                                            defaultMessage='Configuration'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='management'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.plugins.management'\n                                            defaultMessage='Management'\n                                        />\n                                    }\n                                />\n                                {customPlugins}\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='files'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.files'\n                                        defaultMessage='Files'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    key='storage'\n                                    name='storage'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.storage'\n                                            defaultMessage='Storage'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='customization'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.customization'\n                                        defaultMessage='Customization'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='custom_brand'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.customBrand'\n                                            defaultMessage='Custom Branding'\n                                        />\n                                    }\n                                />\n                                {announcement}\n                                <AdminSidebarSection\n                                    name='emoji'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.emoji'\n                                            defaultMessage='Emoji'\n                                        />\n\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='gif'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.gif'\n                                            defaultMessage='GIF (Beta)'\n                                        />\n\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='posts'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.posts'\n                                            defaultMessage='Posts'\n                                        />\n\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='legal_and_support'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.legalAndSupport'\n                                            defaultMessage='Legal and Support'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='native_app_links'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.nativeAppLinks'\n                                            defaultMessage='Mattermost App Links'\n                                        />\n\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            {complianceSection}\n                            <AdminSidebarSection\n                                name='advanced'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.advanced'\n                                        defaultMessage='Advanced'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='rate'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.rateLimiting'\n                                            defaultMessage='Rate Limiting'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='database'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.database'\n                                            defaultMessage='Database'\n                                        />\n                                    }\n                                />\n                                {elasticSearchSettings}\n                                <AdminSidebarSection\n                                    name='developer'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.developer'\n                                            defaultMessage='Developer'\n                                        />\n                                    }\n                                />\n                                {clusterSettings}\n                                {metricsSettings}\n                            </AdminSidebarSection>\n                        </AdminSidebarCategory>\n                        {otherCategory}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {NavLink, Route} from 'react-router-dom';\n\nexport default class AdminSidebarCategory extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string,\n            title: PropTypes.node.isRequired,\n            icon: PropTypes.string.isRequired,\n            sectionClass: PropTypes.string,\n            parentLink: PropTypes.string,\n            children: PropTypes.node,\n            action: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n        };\n    }\n\n    static get contextTypes() {\n        return {\n            router: PropTypes.object.isRequired,\n        };\n    }\n\n    render() {\n        let link = this.props.parentLink;\n        let title = (\n            <div className='category-title category-title--active'>\n                <i className={'category-icon fa ' + this.props.icon}/>\n                <span className='category-title__text'>\n                    {this.props.title}\n                </span>\n                {this.props.action}\n            </div>\n        );\n\n        if (this.props.name) {\n            link += '/' + name;\n            title = (\n                <NavLink\n                    to={link}\n                    className='category-title'\n                    activeClassName='category-title category-title--active'\n                >\n                    {title}\n                </NavLink>\n            );\n        }\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <Route\n                    path={link}\n                    render={() => (\n                        <ul className={'sections ' + this.props.sectionClass}>\n                            {\n                                React.Children.map(this.props.children, (child) => {\n                                    if (child === null) {\n                                        return null;\n                                    }\n\n                                    return React.cloneElement(child, {\n                                        parentLink: link,\n                                    });\n                                })\n                            }\n                        </ul>\n                    )}\n                />\n            );\n        }\n\n        return (\n            <li className='sidebar-category'>\n                {title}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport UserStore from 'stores/user_store.jsx';\n\nimport AdminNavbarDropdown from './admin_navbar_dropdown';\n\nexport default class SidebarHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    toggleDropdown = (e) => {\n        e.preventDefault();\n\n        if (this.refs.dropdown.blockToggle) {\n            this.refs.dropdown.blockToggle = false;\n            return;\n        }\n\n        $('.team__header').find('.dropdown-toggle').dropdown('toggle');\n    }\n\n    render() {\n        var me = UserStore.getCurrentUser();\n        var profilePicture = null;\n\n        if (!me) {\n            return null;\n        }\n\n        if (me.last_picture_update) {\n            profilePicture = (\n                <img\n                    className='user__picture'\n                    src={Client4.getProfilePictureUrl(me.id, me.last_picture_update)}\n                />\n            );\n        }\n\n        return (\n            <div className='team__header theme'>\n                <a\n                    href='#'\n                    onClick={this.toggleDropdown}\n                >\n                    {profilePicture}\n                    <div className='header__info'>\n                        <div className='team__name'>\n                            <FormattedMessage\n                                id='admin.sidebarHeader.systemConsole'\n                                defaultMessage='System Console'\n                            />\n                        </div>\n                        <div className='user__name'>{'@' + me.username}</div>\n                    </div>\n                </a>\n                <AdminNavbarDropdown ref='dropdown'/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deferNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked} from 'selectors/views/admin';\n\nimport AdminNavbarDropdown from './admin_navbar_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        navigationBlocked: getNavigationBlocked(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminNavbarDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport TeamStore from 'stores/team_store.jsx';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport AboutBuildModal from 'components/about_build_modal';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport MenuIcon from 'components/svg/menu_icon';\n\nexport default class AdminNavbarDropdown extends React.Component {\n    static propTypes = {\n\n        /*\n         * Bool whether the navigation is blocked by unsaved changes\n         */\n        navigationBlocked: PropTypes.bool,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Action to attempt a navigation and set a callback\n             * to execute after the navigation is confirmed\n             */\n            deferNavigation: PropTypes.func,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            teams: TeamStore.getAll(),\n            teamMembers: TeamStore.getMyTeamMembers(),\n            showAboutModal: false,\n        };\n    }\n\n    componentDidMount() {\n        $(ReactDOM.findDOMNode(this.refs.dropdown)).on('hide.bs.dropdown', () => {\n            this.blockToggle = true;\n            setTimeout(() => {\n                this.blockToggle = false;\n            }, 100);\n        });\n\n        TeamStore.addChangeListener(this.onTeamChange);\n    }\n\n    componentWillUnmount() {\n        $(ReactDOM.findDOMNode(this.refs.dropdown)).off('hide.bs.dropdown');\n        TeamStore.removeChangeListener(this.onTeamChange);\n    }\n\n    handleAboutModal = (e) => {\n        e.preventDefault();\n\n        this.setState({showAboutModal: true});\n    };\n\n    handleLogout = (e) => {\n        if (this.props.navigationBlocked) {\n            e.preventDefault();\n            this.props.actions.deferNavigation(GlobalActions.emitUserLoggedOutEvent);\n        } else {\n            GlobalActions.emitUserLoggedOutEvent();\n        }\n    };\n\n    aboutModalDismissed = () => {\n        this.setState({showAboutModal: false});\n    };\n\n    onTeamChange = () => {\n        this.setState({\n            teams: TeamStore.getAll(),\n            teamMembers: TeamStore.getMyTeamMembers(),\n        });\n    };\n\n    render() {\n        var teamsArray = []; // Array of team objects\n        var teams = []; // Array of team components\n        let switchTeams;\n\n        if (this.state.teamMembers && this.state.teamMembers.length > 0) {\n            for (const index in this.state.teamMembers) {\n                if (this.state.teamMembers.hasOwnProperty(index)) {\n                    const teamMember = this.state.teamMembers[index];\n                    const team = this.state.teams[teamMember.team_id];\n                    teamsArray.push(team);\n                }\n            }\n\n            teamsArray = filterAndSortTeamsByDisplayName(teamsArray);\n\n            for (const team of teamsArray) {\n                teams.push(\n                    <li key={'team_' + team.name}>\n                        <BlockableLink\n                            id={'swithTo' + Utils.createSafeId(team.name)}\n                            to={'/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`}\n                        >\n                            <FormattedMessage\n                                id='navbar_dropdown.switchTo'\n                                defaultMessage='Switch to '\n                            />\n                            {team.display_name}\n                        </BlockableLink>\n                    </li>\n                );\n            }\n\n            teams.push(\n                <li\n                    key='teamDiv'\n                    className='divider'\n                />\n            );\n        } else {\n            switchTeams = (\n                <li>\n                    <BlockableLink\n                        to={'/select_team'}\n                    >\n                        <i\n                            className='fa fa-exchange'\n                            title={Utils.localizeMessage('select_team.icon', 'Select Team Icon')}\n                        />\n                        <FormattedMessage\n                            id='admin.nav.switch'\n                            defaultMessage='Team Selection'\n                        />\n                    </BlockableLink>\n                </li>\n            );\n        }\n\n        return (\n            <ul className='nav navbar-nav navbar-right admin-navbar-dropdown'>\n                <li\n                    ref='dropdown'\n                    className='dropdown'\n                >\n                    <a\n                        href='#'\n                        id='adminNavbarDropdownButton'\n                        className='dropdown-toggle admin-navbar-dropdown__toggle'\n                        data-toggle='dropdown'\n                        role='button'\n                        aria-expanded='false'\n                    >\n                        <MenuIcon className='dropdown__icon admin-navbar-dropdown__icon'/>\n                    </a>\n                    <ul\n                        className='dropdown-menu'\n                        role='menu'\n                    >\n                        {teams}\n                        {switchTeams}\n                        <li\n                            key='teamDiv'\n                            className='divider'\n                        />\n                        <li>\n                            <Link\n                                to='https://about.mattermost.com/administrators-guide/'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.administratorsGuide'\n                                    defaultMessage='Administrator Guide'\n                                />\n                            </Link>\n                        </li>\n                        <li>\n                            <Link\n                                to='https://about.mattermost.com/troubleshooting-forum/'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.troubleshootingForum'\n                                    defaultMessage='Troubleshooting Forum'\n                                />\n                            </Link>\n                        </li>\n                        <li>\n                            <Link\n                                to='https://about.mattermost.com/commercial-support/'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.commercialSupport'\n                                    defaultMessage='Commercial Support'\n                                />\n                            </Link>\n                        </li>\n                        <li>\n                            <a\n                                href='#'\n                                onClick={this.handleAboutModal}\n                            >\n                                <FormattedMessage\n                                    id='navbar_dropdown.about'\n                                    defaultMessage='About Mattermost'\n                                />\n                            </a>\n                        </li>\n                        <li className='divider'/>\n                        <li>\n                            <a\n                                href='#'\n                                id='logout'\n                                onClick={this.handleLogout}\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.logout'\n                                    defaultMessage='Logout'\n                                />\n                            </a>\n                        </li>\n                        <AboutBuildModal\n                            show={this.state.showAboutModal}\n                            onModalDismissed={this.aboutModalDismissed}\n                        />\n                    </ul>\n                </li>\n            </ul>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {NavLink} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\n\nexport default class BlockableLink extends React.Component {\n    static propTypes = {\n\n        /*\n         * Bool whether navigation is blocked\n         */\n        blocked: PropTypes.bool.isRequired,\n\n        /*\n         * String Link destination\n         */\n        to: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function for deferring navigation while blocked\n             */\n            deferNavigation: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = (e) => {\n        if (this.props.blocked) {\n            e.preventDefault();\n\n            this.props.actions.deferNavigation(() => {\n                browserHistory.push(this.props.to);\n            });\n        }\n    };\n\n    render() {\n        const props = {...this.props};\n        Reflect.deleteProperty(props, 'blocked');\n        Reflect.deleteProperty(props, 'actions');\n\n        return (\n            <NavLink\n                {...props}\n                onClick={this.handleClick}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class AdminSidebarSection extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string.isRequired,\n            title: PropTypes.node.isRequired,\n            type: PropTypes.string,\n            parentLink: PropTypes.string,\n            subsection: PropTypes.bool,\n            children: PropTypes.node,\n            action: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n            subsection: false,\n            children: [],\n        };\n    }\n\n    getLink() {\n        return this.props.parentLink + '/' + this.props.name;\n    }\n\n    render() {\n        const link = this.getLink();\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <ul className='nav nav__sub-menu subsections'>\n                    {\n                        React.Children.map(this.props.children, (child) => {\n                            if (child === null) {\n                                return null;\n                            }\n\n                            return React.cloneElement(child, {\n                                parentLink: link,\n                                subsection: true,\n                            });\n                        })\n                    }\n                </ul>\n            );\n        }\n\n        let className = 'sidebar-section';\n        if (this.props.subsection) {\n            className += ' sidebar-subsection';\n        }\n\n        let sidebarItem = (\n            <BlockableLink\n                id={Utils.createSafeId(this.props.name)}\n                className={`${className}-title`}\n                activeClassName={`${className}-title ${className}-title--active`}\n                to={link}\n            >\n                <span className={`${className}-title__text`}>\n                    {this.props.title}\n                </span>\n                {this.props.action}\n            </BlockableLink>\n        );\n\n        if (this.props.type === 'text') {\n            sidebarItem = (\n                <div\n                    className={`${className}-title`}\n                >\n                    <span className={`${className}-title__text`}>\n                        {this.props.title}\n                    </span>\n                    {this.props.action}\n                </div>\n            );\n        }\n\n        return (\n            <li className={className}>\n                {sidebarItem}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport {ldapTest, invalidateAllCaches, reloadConfig, testS3Connection} from 'actions/admin_actions';\nimport SystemAnalytics from 'components/analytics/system_analytics';\nimport TeamAnalytics from 'components/analytics/team_analytics';\n\nimport Audits from './audits';\nimport CustomUrlSchemesSetting from './custom_url_schemes_setting.jsx';\nimport LicenseSettings from './license_settings';\nimport PermissionSchemesSettings from './permission_schemes_settings';\nimport PermissionSystemSchemeSettings from './permission_schemes_settings/permission_system_scheme_settings';\nimport PermissionTeamSchemeSettings from './permission_schemes_settings/permission_team_scheme_settings';\nimport SystemUsers from './system_users';\nimport ServerLogs from './server_logs';\n\nimport * as DefinitionConstants from './admin_definition_constants';\n\nconst FILE_STORAGE_DRIVER_LOCAL = 'local';\nconst FILE_STORAGE_DRIVER_S3 = 'amazons3';\nconst MEBIBYTE = Math.pow(1024, 2);\n\n// admin_definitions data structure define the autogenerated admin_console\n// section. It defines the structure of the menu based on sections, subsections\n// and pages. Each page contains an schema which defines a component to use for\n// render the entire section or the name of the section (name and\n// name_default), the section in the config file (id), and a list of options to\n// configure (settings).\n//\n// All text fiels contains a transation key, and the <field>_default string are the\n// default text when the translation is still not avaiable (the english version\n// of the text).\n//\n// We can define different types of settings configuration widgets:\n//\n// Widget:\n//   - type: which define the widget type.\n//   - label (and label_default): which define the main text of the setting.\n//   - isDisabled: a function which receive current config, the state of the page and the license.\n//   - isHidden: a function which receive current config, the state of the page and the license.\n//\n// Custom Widget (extends from Widget):\n//   - component: The component used to render the widget\n//\n// JobsTable Widget (extends from Widget):\n//   - job_type: The kind of job from Constants.JobTypes\n//   - render_job: Function to convert a job object into a react component.\n//\n// Banner Widget (extends from Widget):\n//   - banner_type: The type of banner (options: info or warning)\n//\n// Setting Widget (extends from Widget):\n//   - key: The key to store the configuration in the config file.\n//   - help_text (and help_text_default): Long description of the field.\n//   - help_text_html: True if the translation text contains html.\n//   - help_text_values: Values to fill the translation (if needed).\n//\n// Bool Widget (extends from Setting Widget)\n//\n// Number Widget (extends from Setting Widget)\n//\n// Color Widget (extends from Setting Widget)\n//\n// Text Widget (extends from Setting Widget)\n//   - placeholder (and placeholder_default): Placeholder text to show in the input.\n//\n// Button Widget (extends from Setting Widget)\n//   - action: A redux action to execute on click.\n//   - error_message (and error_message_default): Error to show if action doesn't work.\n//   - success_message (and success_message_default): Success message to show if action doesn't work.\n//\n// Language Widget (extends from Setting Widget)\n//   - multiple: If you can select multiple languages.\n//   - no_result (and no_result_default): Text to show on not results found (only for multiple = true).\n//   - not_present (and not_present_default): Text to show when the default language is not present (only for multiple = true).\n//\n// Dropdown Widget (extends from Setting Widget)\n//   - options: List of options of the dropdown (each options has value, display_name and display_name_default fields).\n\nexport const needsUtils = {\n    not: (func) => (config, state, license) => !func(config, state, license),\n    and: (...funcs) => (config, state, license) => {\n        for (const func of funcs) {\n            if (!func(config, state, license)) {\n                return false;\n            }\n        }\n        return true;\n    },\n    or: (...funcs) => (config, state, license) => {\n        for (const func of funcs) {\n            if (func(config, state, license)) {\n                return true;\n            }\n        }\n        return false;\n    },\n    stateValueMatch: (key, regex) => (config, state) => state[key].match(regex),\n    stateValueEqual: (key, value) => (config, state) => state[key] === value,\n    stateValueTrue: (key) => (config, state) => Boolean(state[key]),\n    stateValueFalse: (key) => (config, state) => !state[key],\n    hasLicense: (config, state, license) => license.IsLicensed,\n};\n\nexport default {\n    reporting: {\n        system_analytics: {\n            schema: {\n                id: 'SystemAnalytics',\n                component: SystemAnalytics,\n            },\n        },\n        team_analytics: {\n            schema: {\n                id: 'TeamAnalytics',\n                component: TeamAnalytics,\n            },\n        },\n        system_users: {\n            schema: {\n                id: 'SystemUsers',\n                component: SystemUsers,\n            },\n        },\n        server_logs: {\n            schema: {\n                id: 'ServerLogs',\n                component: ServerLogs,\n            },\n        },\n    },\n    settings: {\n        general: {\n            configuration: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: 'admin.general.configuration',\n                    name_default: 'Configuration',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: 'admin.rate.noteDescription',\n                            label_default: 'Changing properties in this section will require a server restart before taking effect.',\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.SiteURL',\n                            label: 'admin.service.siteURL',\n                            label_default: 'Site URL:',\n                            help_text: 'admin.service.siteURLDescription',\n                            help_text_default: 'The URL that users will use to access Mattermost. Standard ports, such as 80 and 443, can be omitted, but non-standard ports are required. For example: http://example.com:8065. This setting is required.<br /><br />Mattermost may be hosted at a subpath. For example: http://example.com:8065/company/mattermost. A restart is required before the server will work correctly.',\n                            help_text_html: true,\n                            placeholder: 'admin.service.siteURLExample',\n                            placeholder_default: 'E.g.: \"http://example.com:8065\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.ListenAddress',\n                            label: 'admin.service.listenAddress',\n                            label_default: 'Listen Address:',\n                            placeholder: 'admin.service.listenExample',\n                            placeholder_default: 'E.g.: \":8065\"',\n                            help_text: 'admin.service.listenDescription',\n                            help_text_default: 'The address and port to which to bind and listen. Specifying \":8065\" will bind to all network interfaces. Specifying \"127.0.0.1:8065\" will only bind to the network interface having that IP address. If you choose a port of a lower level (called \"system ports\" or \"well-known ports\", in the range of 0-1023), you must have permissions to bind to that port. On Linux you can use: \"sudo setcap cap_net_bind_service=+ep ./bin/mattermost\" to allow Mattermost to bind to well-known ports.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.Forward80To443',\n                            label: 'admin.service.forward80To443',\n                            label_default: 'Forward port 80 to 443:',\n                            help_text: 'admin.service.forward80To443Description',\n                            help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.',\n                            disabled_help_text: 'admin.service.forward80To443Description.disabled',\n                            disabled_help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.<br /><br />This setting cannot be enabled until your server is <a href=\"#ListenAddress\">listening</a> on port 443.',\n                            disabled_help_text_html: true,\n                            isDisabled: needsUtils.not(needsUtils.stateValueMatch('ServiceSettings.ListenAddress', /:443$/)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'ServiceSettings.ConnectionSecurity',\n                            label: 'admin.connectionSecurityTitle',\n                            label_default: 'Connection Security:',\n                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_WEBSERVER,\n                            options: [\n                                {\n                                    value: '',\n                                    display_name: 'admin.connectionSecurityNone',\n                                    display_name_default: 'None',\n                                },\n                                {\n                                    value: 'TLS',\n                                    display_name: 'admin.connectionSecurityTls',\n                                    display_name_default: 'TLS (Recommended)',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.TLSCertFile',\n                            label: 'admin.service.tlsCertFile',\n                            label_default: 'TLS Certificate File:',\n                            help_text: 'admin.service.tlsCertFileDescription',\n                            help_text_default: 'The certificate file to use.',\n                            isDisabled: needsUtils.stateValueTrue('ServiceSettings.UseLetsEncrypt'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.TLSKeyFile',\n                            label: 'admin.service.tlsKeyFile',\n                            label_default: 'TLS Key File:',\n                            help_text: 'admin.service.tlsKeyFileDescription',\n                            help_text_default: 'The private key file to use.',\n                            isDisabled: needsUtils.stateValueTrue('ServiceSettings.UseLetsEncrypt'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.UseLetsEncrypt',\n                            label: 'admin.service.useLetsEncrypt',\n                            label_default: 'Use Let\\'s Encrypt:',\n                            help_text: 'admin.service.useLetsEncryptDescription',\n                            help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.',\n                            disabled_help_text: 'admin.service.useLetsEncryptDescription.disabled',\n                            disabled_help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.<br /><br />This setting cannot be enabled unless the <a href=\"#Forward80To443\">Forward port 80 to 443</a> setting is set to true.',\n                            disabled_help_text_html: true,\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.Forward80To443'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.LetsEncryptCertificateCacheFile',\n                            label: 'admin.service.letsEncryptCertificateCacheFile',\n                            label_default: 'Let\\'s Encrypt Certificate Cache File:',\n                            help_text: 'admin.service.letsEncryptCertificateCacheFileDescription',\n                            help_text_default: 'Certificates retrieved and other data about the Let\\'s Encrypt service will be stored in this file.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.UseLetsEncrypt'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.ReadTimeout',\n                            label: 'admin.service.readTimeout',\n                            label_default: 'Read Timeout:',\n                            help_text: 'admin.service.readTimeoutDescription',\n                            help_text_default: 'Maximum time allowed from when the connection is accepted to when the request body is fully read.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.WriteTimeout',\n                            label: 'admin.service.writeTimeout',\n                            label_default: 'Write Timeout:',\n                            help_text: 'admin.service.writeTimeoutDescription',\n                            help_text_default: 'If using HTTP (insecure), this is the maximum time allowed from the end of reading the request headers until the response is written. If using HTTPS, it is the total time from when the connection is accepted until the response is written.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'ServiceSettings.WebserverMode',\n                            label: 'admin.webserverModeTitle',\n                            label_default: 'Webserver Mode:',\n                            help_text: DefinitionConstants.WEBSERVER_MODE_HELP_TEXT,\n                            options: [\n                                {\n                                    value: 'gzip',\n                                    display_name: 'admin.webserverModeGzip',\n                                    display_name_default: 'gzip',\n                                },\n                                {\n                                    value: 'uncompressed',\n                                    display_name: 'admin.webserverModeUncompressed',\n                                    display_name_default: 'Uncompressed',\n                                },\n                                {\n                                    value: 'disabled',\n                                    display_name: 'admin.webserverModeDisabled',\n                                    display_name_default: 'Disabled',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            action: reloadConfig,\n                            key: 'ReloadConfigButton',\n                            label: 'admin.reload.button',\n                            label_default: 'Reload Configuration From Disk',\n                            help_text: 'admin.reload.reloadDescription',\n                            help_text_default: 'Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating \"config.json\" to the new desired configuration and using the {featureName} feature to load the new settings while the server is running. The administrator should then use the {recycleDatabaseConnections} feature to recycle the database connections based on the new settings.',\n                            help_text_values: {\n                                featureName: (\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.reload.reloadDescription.featureName'\n                                            defaultMessage='Reload Configuration from Disk'\n                                        />\n                                    </b>\n                                ),\n                                recycleDatabaseConnections: (\n                                    <a href='../advanced/database'>\n                                        <b>\n                                            <FormattedMessage\n                                                id='admin.reload.reloadDescription.recycleDatabaseConnections'\n                                                defaultMessage='Database > Recycle Database Connections'\n                                            />\n                                        </b>\n                                    </a>\n                                ),\n                            },\n                            error_message: 'admin.reload.reloadFail',\n                            error_message_default: 'Reload unsuccessful: {error}',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            key: 'PurgeButton',\n                            action: invalidateAllCaches,\n                            label: 'admin.purge.button',\n                            label_default: 'Purge All Caches',\n                            help_text: 'admin.purge.purgeDescription',\n                            help_text_default: 'This will purge all the in-memory caches for things like sessions, accounts, channels, etc. Deployments using High Availability will attempt to purge all the servers in the cluster.  Purging the caches may adversely impact performance.',\n                            error_message: 'admin.purge.purgeFail',\n                            error_message_default: 'Purging unsuccessful: {error}',\n                        },\n                    ],\n                },\n            },\n            localization: {\n                schema: {\n                    id: 'LocalizationSettings',\n                    name: 'admin.general.localization',\n                    name_default: 'Localization',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                            key: 'LocalizationSettings.DefaultServerLocale',\n                            label: 'admin.general.localization.serverLocaleTitle',\n                            label_default: 'Default Server Language:',\n                            help_text: 'admin.general.localization.serverLocaleDescription',\n                            help_text_default: 'Default language for system messages and logs. Changing this will require a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                            key: 'LocalizationSettings.DefaultClientLocale',\n                            label: 'admin.general.localization.clientLocaleTitle',\n                            label_default: 'Default Client Language:',\n                            help_text: 'admin.general.localization.clientLocaleDescription',\n                            help_text_default: 'Default language for newly created users and pages where the user hasn\\'t logged in.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                            key: 'LocalizationSettings.AvailableLocales',\n                            label: 'admin.general.localization.availableLocalesTitle',\n                            label_default: 'Available Languages:',\n                            help_text: 'admin.general.localization.availableLocalesDescription',\n                            help_text_html: true,\n                            help_text_default: 'Set which languages are available for users in Account Settings (leave this field blank to have all supported languages available). If you\\'re manually adding new languages, the <strong>Default Client Language</strong> must be added before saving this setting.<br /><br />Would like to help with translations? Join the <a href=\"http://translate.mattermost.com/\" target=\"_blank\">Mattermost Translation Server</a> to contribute.',\n                            multiple: true,\n                            no_result: 'admin.general.localization.availableLocalesNoResults',\n                            no_result_default: 'No results found',\n                            not_present: 'admin.general.localization.availableLocalesNotPresent',\n                            not_present_default: 'The default client language must be included in the available list',\n                        },\n                    ],\n                },\n            },\n            privacy: {\n                schema: {\n                    id: 'PrivacySettings',\n                    name: 'admin.general.privacy',\n                    name_default: 'Privacy',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'PrivacySettings.ShowEmailAddress',\n                            label: 'admin.privacy.showEmailTitle',\n                            label_default: 'Show Email Address:',\n                            help_text: 'admin.privacy.showEmailDescription',\n                            help_text_default: 'When false, hides the email address of members from everyone except System Administrators.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'PrivacySettings.ShowFullName',\n                            label: 'admin.privacy.showFullNameTitle',\n                            label_default: 'Show Full Name:',\n                            help_text: 'admin.privacy.showFullNameDescription',\n                            help_text_default: 'When false, hides the full name of members from everyone except System Administrators. Username is shown in place of full name.',\n                        },\n                    ],\n                },\n            },\n            compliance: {\n                schema: {\n                    id: 'ComplianceSettings',\n                    name: 'admin.compliance.title',\n                    name_default: 'Compliance Settings',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: 'admin.compliance.noLicense',\n                            label_default: '<h4 class=\"banner__heading\">Note:</h4><p>Compliance is an enterprise feature. Your current license does not support Compliance. Click <a href=\"http://mattermost.com\"target=\"_blank\">here</a> for information and pricing on enterprise licenses.</p>',\n                            isHidden: needsUtils.hasLicense,\n                            banner_type: 'warning',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ComplianceSettings.Enable',\n                            label: 'admin.compliance.enableTitle',\n                            label_default: 'Enable Compliance Reporting:',\n                            help_text: 'admin.compliance.enableDesc',\n                            help_text_default: 'When true, Mattermost allows compliance reporting from the <strong>Compliance and Auditing</strong> tab. See <a href=\"https://docs.mattermost.com/administration/compliance.html\" target=\"_blank\">documentation</a> to learn more.',\n                            help_text_html: true,\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ComplianceSettings.Directory',\n                            label: 'admin.compliance.directoryTitle',\n                            label_default: 'Compliance Report Directory:',\n                            help_text: 'admin.compliance.directoryDescription',\n                            help_text_default: 'Directory to which compliance reports are written. If blank, will be set to ./data/.',\n                            placeholder: 'admin.sql.maxOpenExample',\n                            placeholder_default: 'E.g.: \"10\"',\n                            isDisabled: needsUtils.stateValueFalse('ComplianceSettings.Enable'),\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ComplianceSettings.EnableDaily',\n                            label: 'admin.compliance.enableDailyTitle',\n                            label_default: 'Enable Daily Report:',\n                            help_text: 'admin.compliance.enableDailyDesc',\n                            help_text_default: 'When true, Mattermost will generate a daily compliance report.',\n                            isDisabled: needsUtils.stateValueFalse('ComplianceSettings.Enable'),\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                    ],\n                },\n            },\n            logging: {\n                schema: {\n                    id: 'LogSettings',\n                    name: 'admin.general.log',\n                    name_default: 'Logging',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableConsole',\n                            label: 'admin.log.consoleTitle',\n                            label_default: 'Output logs to console: ',\n                            help_text: 'admin.log.consoleDescription',\n                            help_text_default: 'Typically set to false in production. Developers may set this field to true to output log messages to console based on the console level option.  If true, server writes messages to the standard output stream (stdout). Changing this setting requires a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'LogSettings.ConsoleLevel',\n                            label: 'admin.log.levelTitle',\n                            label_default: 'Console Log Level:',\n                            help_text: 'admin.log.levelDescription',\n                            help_text_default: 'This setting determines the level of detail at which log events are written to the console. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableConsole'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.ConsoleJson',\n                            label: 'admin.log.consoleJsonTitle',\n                            label_default: 'Output console logs as JSON:',\n                            help_text: 'admin.log.jsonDescription',\n                            help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableConsole'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableFile',\n                            label: 'admin.log.fileTitle',\n                            label_default: 'Output logs to file: ',\n                            help_text: 'admin.log.fileDescription',\n                            help_text_default: 'Typically set to true in production. When true, logged events are written to the mattermost.log file in the directory specified in the File Log Directory field. The logs are rotated at 10,000 lines and archived to a file in the same directory, and given a name with a datestamp and serial number. For example, mattermost.2017-03-31.001. Changing this setting requires a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'LogSettings.FileLevel',\n                            label: 'admin.log.fileLevelTitle',\n                            label_default: 'File Log Level:',\n                            help_text: 'admin.log.fileLevelDescription',\n                            help_text_default: 'This setting determines the level of detail at which log events are written to the log file. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.FileJson',\n                            label: 'admin.log.fileJsonTitle',\n                            label_default: 'Output file logs as JSON:',\n                            help_text: 'admin.log.jsonDescription',\n                            help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LogSettings.FileLocation',\n                            label: 'admin.log.locationTitle',\n                            label_default: 'File Log Directory:',\n                            help_text: 'admin.log.locationDescription',\n                            help_text_default: 'The location of the log files. If blank, they are stored in the ./logs directory. The path that you set must exist and Mattermost must have write permissions in it. Changing this setting requires a server restart before taking effect.',\n                            placeholder: 'admin.log.locationPlaceholder',\n                            placeholder_default: 'Enter your file location',\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableWebhookDebugging',\n                            label: 'admin.log.enableWebhookDebugging',\n                            label_default: 'Enable Webhook Debugging:',\n                            help_text: 'admin.log.enableWebhookDebuggingDescription',\n                            help_text_default: 'To output the request body of incoming webhooks to the console, enable this setting and set {boldedConsoleLogLevel} to \"DEBUG\". Disable this setting to remove webhook request body information from console logs when in DEBUG mode.',\n                            help_text_values: {\n                                boldedConsoleLogLevel: (\n                                    <strong>\n                                        <FormattedMessage\n                                            id='admin.log.consoleLogLevel'\n                                            defaultMessage='Console Log Level'\n                                        />\n                                    </strong>\n                                ),\n                            },\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableDiagnostics',\n                            label: 'admin.log.enableDiagnostics',\n                            label_default: 'Enable Diagnostics and Error Reporting:',\n                            help_text: 'admin.log.enableDiagnosticsDescription',\n                            help_text_default: 'Enable this feature to improve the quality and performance of Mattermost by sending error reporting and diagnostic information to Mattermost, Inc. Read our <a href=\"https://about.mattermost.com/default-privacy-policy/\" target=\"_blank\">privacy policy</a> to learn more.',\n                            help_text_html: true,\n                        },\n                    ],\n                },\n            },\n        },\n        permissions: {\n            schemes: {\n                schema: {\n                    id: 'PermissionSchemes',\n                    component: PermissionSchemesSettings,\n                },\n            },\n            systemScheme: {\n                schema: {\n                    id: 'PermissionSystemScheme',\n                    component: PermissionSystemSchemeSettings,\n                },\n            },\n            teamScheme: {\n                schema: {\n                    id: 'PermissionSystemScheme',\n                    component: PermissionTeamSchemeSettings,\n                },\n            },\n        },\n        authentication: {\n            email: {\n                schema: {\n                    id: 'EmailSettings',\n                    name: 'admin.authentication.email',\n                    name_default: 'Email Authentication',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.EnableSignUpWithEmail',\n                            label: 'admin.email.allowSignupTitle',\n                            label_default: 'Enable account creation with email:',\n                            help_text: 'admin.email.allowSignupDescription',\n                            help_text_default: 'When true, Mattermost allows account creation using email and password. This value should be false only when you want to limit sign up to a single sign-on service like AD/LDAP, SAML or GitLab.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.EnableSignInWithEmail',\n                            label: 'admin.email.allowEmailSignInTitle',\n                            label_default: 'Enable sign-in with email:',\n                            help_text: 'admin.email.allowEmailSignInDescription',\n                            help_text_default: 'When true, Mattermost allows users to sign in using their email and password.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.EnableSignInWithUsername',\n                            label: 'admin.email.allowUsernameSignInTitle',\n                            label_default: 'Enable sign-in with username:',\n                            help_text: 'admin.email.allowUsernameSignInDescription',\n                            help_text_default: 'When true, users with email login can sign in using their username and password. This setting does not affect AD/LDAP login.',\n                        },\n                    ],\n                },\n            },\n            ldap: {\n                schema: {\n                    id: 'LdapSettings',\n                    name: 'admin.authentication.ldap',\n                    name_default: 'AD/LDAP',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LdapSettings.Enable',\n                            label: 'admin.ldap.enableTitle',\n                            label_default: 'Enable sign-in with AD/LDAP:',\n                            help_text: 'admin.ldap.enableDesc',\n                            help_text_default: 'When true, Mattermost allows login using AD/LDAP',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LdapSettings.EnableSync',\n                            label: 'admin.ldap.enableSyncTitle',\n                            label_default: 'Enable Synchronization with AD/LDAP:',\n                            help_text: 'admin.ldap.enableSyncDesc',\n                            help_text_default: 'When true, Mattermost periodically synchronizes users from AD/LDAP. When false, user attributes are updated from AD/LDAP during user login only.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LdapServer',\n                            label: 'admin.ldap.serverTitle',\n                            label_default: 'AD/LDAP Server:',\n                            help_text: 'admin.ldap.serverDesc',\n                            help_text_default: 'The domain or IP address of AD/LDAP server.',\n                            placeholder: 'admin.ldap.serverEx',\n                            placeholder_default: 'E.g.: \"10.0.0.23\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.LdapPort',\n                            label: 'admin.ldap.portTitle',\n                            label_default: 'AD/LDAP Port:',\n                            help_text: 'admin.ldap.portDesc',\n                            help_text_default: 'The port Mattermost will use to connect to the AD/LDAP server. Default is 389.',\n                            placeholder: 'admin.ldap.portEx',\n                            placeholder_default: 'E.g.: \"389\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'LdapSettings.ConnectionSecurity',\n                            label: 'admin.connectionSecurityTitle',\n                            label_default: 'Connection Security:',\n                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_LDAP,\n                            options: [\n                                {\n                                    value: '',\n                                    display_name: 'admin.connectionSecurityNone',\n                                    display_name_default: 'None',\n                                },\n                                {\n                                    value: 'TLS',\n                                    display_name: 'admin.connectionSecurityTls',\n                                    display_name_default: 'TLS (Recommended)',\n                                },\n                                {\n                                    value: 'STARTTLS',\n                                    display_name: 'admin.connectionSecurityStart',\n                                    display_name_default: 'STARTTLS',\n                                },\n                            ],\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LdapSettings.SkipCertificateVerification',\n                            label: 'admin.ldap.skipCertificateVerification',\n                            label_default: 'Skip Certificate Verification:',\n                            help_text: 'admin.ldap.skipCertificateVerificationDesc',\n                            help_text_default: 'Skips the certificate verification step for TLS or STARTTLS connections. Not recommended for production environments where TLS is required. For testing only.',\n                            isDisabled: needsUtils.stateValueFalse('LdapSettings.ConnectionSecurity'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.BaseDN',\n                            label: 'admin.ldap.baseTitle',\n                            label_default: 'BaseDN:',\n                            help_text: 'admin.ldap.baseDesc',\n                            help_text_default: 'The Base DN is the Distinguished Name of the location where Mattermost should start its search for users in the AD/LDAP tree.',\n                            placeholder: 'admin.ldap.baseEx',\n                            placeholder_default: 'E.g.: \"ou=Unit Name,dc=corp,dc=example,dc=com\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.BindUsername',\n                            label: 'admin.ldap.bindUserTitle',\n                            label_default: 'Bind Username:',\n                            help_text: 'admin.ldap.bindUserDesc',\n                            help_text_default: 'The username used to perform the AD/LDAP search. This should typically be an account created specifically for use with Mattermost. It should have access limited to read the portion of the AD/LDAP tree specified in the BaseDN field.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.BindPassword',\n                            label: 'admin.ldap.bindPwdTitle',\n                            label_default: 'Bind Password:',\n                            help_text: 'admin.ldap.bindPwdDesc',\n                            help_text_default: 'Password of the user given in \"Bind Username\".',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.UserFilter',\n                            label: 'admin.ldap.userFilterTitle',\n                            label_default: 'User Filter:',\n                            help_text: 'admin.ldap.userFilterDisc',\n                            help_text_default: '(Optional) Enter an AD/LDAP Filter to use when searching for user objects. Only the users selected by the query will be able to access Mattermost. For Active Directory, the query to filter out disabled users is (&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))).',\n                            placeholder: 'admin.ldap.userFilterEx',\n                            placeholder_default: 'Ex. \"(objectClass=user)\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.FirstNameAttribute',\n                            label: 'admin.ldap.firstnameAttrTitle',\n                            label_default: 'First Name Attribute:',\n                            placeholder: 'admin.ldap.firstnameAttrEx',\n                            placeholder_default: 'E.g.: \"givenName\"',\n                            help_text: 'admin.ldap.firstnameAttrDesc',\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the first name of users in Mattermost. When set, users cannot edit their first name, since it is synchronized with the LDAP server. When left blank, users can set their first name in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LastNameAttribute',\n                            label: 'admin.ldap.lastnameAttrTitle',\n                            label_default: 'Last Name Attribute:',\n                            placeholder: 'admin.ldap.lastnameAttrEx',\n                            placeholder_default: 'E.g.: \"sn\"',\n                            help_text: 'admin.ldap.lastnameAttrDesc',\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the last name of users in Mattermost. When set, users cannot edit their last name, since it is synchronized with the LDAP server. When left blank, users can set their last name in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.NicknameAttribute',\n                            label: 'admin.ldap.nicknameAttrTitle',\n                            label_default: 'Nickname Attribute:',\n                            placeholder: 'admin.ldap.nicknameAttrEx',\n                            placeholder_default: 'E.g.: \"nickname\"',\n                            help_text: 'admin.ldap.nicknameAttrDesc',\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the nickname of users in Mattermost. When set, users cannot edit their nickname, since it is synchronized with the LDAP server. When left blank, users can set their nickname in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.PositionAttribute',\n                            label: 'admin.ldap.positionAttrTitle',\n                            label_default: 'Position Attribute:',\n                            placeholder: 'admin.ldap.positionAttrEx',\n                            placeholder_default: 'E.g.: \"title\"',\n                            help_text: 'admin.ldap.positionAttrDesc',\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the position field in Mattermost. When set, users cannot edit their position, since it is synchronized with the LDAP server. When left blank, users can set their position in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.EmailAttribute',\n                            label: 'admin.ldap.emailAttrTitle',\n                            label_default: 'Email Attribute:',\n                            placeholder: 'admin.ldap.emailAttrEx',\n                            placeholder_default: 'E.g.: \"mail\" or \"userPrincipalName\"',\n                            help_text: 'admin.ldap.emailAttrDesc',\n                            help_text_default: 'The attribute in the AD/LDAP server used to populate the email address field in Mattermost.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.UsernameAttribute',\n                            label: 'admin.ldap.usernameAttrTitle',\n                            label_default: 'Username Attribute:',\n                            placeholder: 'admin.ldap.usernameAttrEx',\n                            placeholder_default: 'E.g.: \"sAMAccountName\"',\n                            help_text: 'admin.ldap.usernameAttrDesc',\n                            help_text_default: 'The attribute in the AD/LDAP server used to populate the username field in Mattermost. This may be the same as the Login ID Attribute.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.IdAttribute',\n                            label: 'admin.ldap.idAttrTitle',\n                            label_default: 'ID Attribute: ',\n                            placeholder: 'admin.ldap.idAttrEx',\n                            placeholder_default: 'E.g.: \"objectGUID\"',\n                            help_text: 'admin.ldap.idAttrDesc',\n                            help_text_html: true,\n                            help_text_default: 'The attribute in the AD/LDAP server used as a unique identifier in Mattermost. It should be an AD/LDAP attribute with a value that does not change. If a user\\'s ID Attribute changes, it will create a new Mattermost account unassociated with their old one.<br /><br />If you need to change this field after users have already logged in, use the <a href=\"https://about.mattermost.com/default-mattermost-ldap-idmigrate\" target=\"_blank\">mattermost ldap idmigrate</a> CLI tool.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueEqual('LdapSettings.Enable', false),\n                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LoginIdAttribute',\n                            label: 'admin.ldap.loginAttrTitle',\n                            label_default: 'Login ID Attribute: ',\n                            placeholder: 'admin.ldap.loginIdAttrEx',\n                            placeholder_default: 'E.g.: \"sAMAccountName\"',\n                            help_text: 'admin.ldap.loginAttrDesc',\n                            help_text_html: true,\n                            help_text_default: 'The attribute in the AD/LDAP server used to log in to Mattermost. Normally this attribute is the same as the \"Username Attribute\" field above.<br /><br />If your team typically uses domain\\\\username to log in to other services with AD/LDAP, you may enter domain\\\\username in this field to maintain consistency between sites.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LoginFieldName',\n                            label: 'admin.ldap.loginNameTitle',\n                            label_default: 'Sign-in Field Default Text:',\n                            placeholder: 'admin.ldap.loginNameEx',\n                            placeholder_default: 'E.g.: \"AD/LDAP Username\"',\n                            help_text: 'admin.ldap.loginNameDesc',\n                            help_text_default: 'The placeholder text that appears in the login field on the login page. Defaults to \"AD/LDAP Username\".',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.SyncIntervalMinutes',\n                            label: 'admin.ldap.syncIntervalTitle',\n                            label_default: 'Synchronization Interval (minutes):',\n                            help_text: 'admin.ldap.syncIntervalHelpText',\n                            help_text_default: 'AD/LDAP Synchronization updates Mattermost user information to reflect updates on the AD/LDAP server. For example, when a user\\'s name changes on the AD/LDAP server, the change updates in Mattermost when synchronization is performed. Accounts removed from or disabled in the AD/LDAP server have their Mattermost accounts set to \"Inactive\" and have their account sessions revoked. Mattermost performs synchronization on the interval entered. For example, if 60 is entered, Mattermost synchronizes every 60 minutes.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.MaxPageSize',\n                            label: 'admin.ldap.maxPageSizeTitle',\n                            label_default: 'Maximum Page Size:',\n                            placeholder: 'admin.ldap.maxPageSizeEx',\n                            placeholder_default: 'E.g.: \"2000\"',\n                            help_text: 'admin.ldap.maxPageSizeHelpText',\n                            help_text_default: 'The maximum number of users the Mattermost server will request from the AD/LDAP server at one time. 0 is unlimited.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.QueryTimeout',\n                            label: 'admin.ldap.queryTitle',\n                            label_default: 'Query Timeout (seconds):',\n                            placeholder: 'admin.ldap.queryEx',\n                            placeholder_default: 'E.g.: \"60\"',\n                            help_text: 'admin.ldap.queryDesc',\n                            help_text_default: 'The timeout value for queries to the AD/LDAP server. Increase if you are getting timeout errors caused by a slow AD/LDAP server.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            action: ldapTest,\n                            key: 'LdapSettings.LdapTest',\n                            label: 'admin.ldap.ldap_test_button',\n                            label_default: 'AD/LDAP Test',\n                            help_text: 'admin.ldap.testHelpText',\n                            help_text_default: 'Tests if the Mattermost server can connect to the AD/LDAP server specified. See log file for more detailed error messages.',\n                            error_message: 'admin.ldap.testFailure',\n                            error_message_default: 'AD/LDAP Test Failure: {error}',\n                            success_message: 'admin.ldap.testSuccess',\n                            success_message_default: 'AD/LDAP Test Successful',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_JOBSTABLE,\n                            job_type: Constants.JobTypes.LDAP_SYNC,\n                            label: 'admin.ldap.sync_button',\n                            label_default: 'AD/LDAP Synchronize Now',\n                            help_text: 'admin.ldap.testHelpText',\n                            help_text_default: 'Initiates an AD/LDAP synchronization immediately.',\n                            isDisabled: needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            render_job: (job) => {\n                                let mattermostUsers = '0';\n                                let ldapUsers = '0';\n                                let deleteCount = '0';\n                                let updateCount = '0';\n\n                                if (job && job.data) {\n                                    if (job.data.mattermost_users_count && job.data.mattermost_users_count.length > 0) {\n                                        mattermostUsers = job.data.mattermost_users_count;\n                                    }\n\n                                    if (job.data.ldap_users_count && job.data.ldap_users_count.length > 0) {\n                                        ldapUsers = job.data.ldap_users_count;\n                                    }\n\n                                    if (job.data.delete_count && job.data.delete_count.length > 0) {\n                                        deleteCount = job.data.delete_count;\n                                    }\n\n                                    if (job.data.update_count && job.data.update_count.length > 0) {\n                                        updateCount = job.data.update_count;\n                                    }\n                                }\n\n                                return (\n                                    <FormattedMessage\n                                        id='admin.ldap.jobExtraInfo'\n                                        defaultMessage='Scanned {ldapUsers} LDAP users, updated {updateCount}, deactivated {deleteCount}'\n                                        values={{\n                                            mattermostUsers,\n                                            ldapUsers,\n                                            deleteCount,\n                                            updateCount,\n                                        }}\n                                    />\n                                );\n                            },\n                        },\n                    ],\n                },\n            },\n            mfa: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: 'admin.mfa.title',\n                    name_default: 'Multi-factor Authentication',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: 'admin.mfa.bannerDesc',\n                            label_default: '<a href=\\'https://docs.mattermost.com/deployment/auth.html\\' target=\\'_blank\\'>Multi-factor authentication</a> is available for accounts with AD/LDAP or email login. If other login methods are used, MFA should be configured with the authentication provider.',\n                            label_html: true,\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableMultifactorAuthentication',\n                            label: 'admin.service.mfaTitle',\n                            label_default: 'Enable Multi-factor Authentication:',\n                            help_text: 'admin.service.mfaDesc',\n                            help_text_default: 'When true, users with AD/LDAP or email login can add multi-factor authentication to their account using Google Authenticator.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnforceMultifactorAuthentication',\n                            label: 'admin.service.enforceMfaTitle',\n                            label_default: 'Enforce Multi-factor Authentication:',\n                            help_text: 'admin.service.enforceMfaDesc',\n                            help_text_html: true,\n                            help_text_default: 'When true, <a href=\\'https://docs.mattermost.com/deployment/auth.html\\' target=\\'_blank\\'>multi-factor authentication</a> is required for login. New users will be required to configure MFA on signup. Logged in users without MFA configured are redirected to the MFA setup page until configuration is complete.<br/><br/>If your system has users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.EnableMultifactorAuthentication'),\n                        },\n                    ],\n                },\n            },\n        },\n        security: {\n            signup: {\n                schema: {\n                    id: 'SignupSettings',\n                    name: 'admin.security.signup',\n                    name_default: 'Signup',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.RequireEmailVerification',\n                            label: 'admin.email.requireVerificationTitle',\n                            label_default: 'Require Email Verification: ',\n                            help_text: 'admin.email.requireVerificationDescription',\n                            help_text_default: 'Typically set to true in production. When true, Mattermost requires email verification after account creation prior to allowing login. Developers may set this field to false to skip sending verification emails for faster development.',\n                            disabled_help_text: 'admin.security.requireEmailVerification.disabled',\n                            disabled_help_text_default: 'Email verification cannot be changed while sending emails is disabled.',\n                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_GENERATED,\n                            key: 'EmailSettings.InviteSalt',\n                            label: 'admin.email.inviteSaltTitle',\n                            label_default: 'Email Invite Salt:',\n                            help_text: 'admin.email.inviteSaltDescription',\n                            help_text_default: '32-character salt added to signing of email invites. Randomly generated on install. Click \"Regenerate\" to create new salt.',\n                            disabled_help_text: 'admin.security.inviteSalt.disabled',\n                            disabled_help_text_default: 'Invite salt cannot be changed while sending emails is disabled.',\n                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.EnableOpenServer',\n                            label: 'admin.team.openServerTitle',\n                            label_default: 'Enable Open Server: ',\n                            help_text: 'admin.team.openServerDescription',\n                            help_text_default: 'When true, anyone can signup for a user account on this server without the need to be invited.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableEmailInvitations',\n                            label: 'admin.team.emailInvitationsTitle',\n                            label_default: 'Enable Email Invitations: ',\n                            help_text: 'admin.team.emailInvitationsDescription',\n                            help_text_default: 'When true users can invite others to the system using email.',\n                        },\n                    ],\n                },\n            },\n            public_links: {\n                schema: {\n                    id: 'PublicLinkSettings',\n                    name: 'admin.security.public_links',\n                    name_default: 'Public Links',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnablePublicLink',\n                            label: 'admin.image.shareTitle',\n                            label_default: 'Enable Public File Links: ',\n                            help_text: 'admin.image.shareDescription',\n                            help_text_default: 'Allow users to share public links to files and images.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_GENERATED,\n                            key: 'FileSettings.PublicLinkSalt',\n                            label: 'admin.image.publicLinkTitle',\n                            label_default: 'Public Link Salt:',\n                            help_text: 'admin.image.publicLinkDescription',\n                            help_text_default: '32-character salt added to signing of public image links. Randomly generated on install. Click \"Regenerate\" to create new salt.',\n                        },\n                    ],\n                },\n            },\n            connections: {\n                schema: {\n                    id: 'ConnectionSettings',\n                    name: 'admin.security.connection',\n                    name_default: 'Connections',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.AllowCorsFrom',\n                            label: 'admin.service.corsTitle',\n                            label_default: 'Enable cross-origin requests from:',\n                            placeholder: 'admin.service.corsEx',\n                            placeholder_default: 'http://example.com',\n                            help_text: 'admin.service.corsDescription',\n                            help_text_default: 'Enable HTTP Cross origin request from a specific domain. Use \"*\" if you want to allow CORS from any domain or leave it blank to disable it.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableInsecureOutgoingConnections',\n                            label: 'admin.service.insecureTlsTitle',\n                            label_default: 'Enable Insecure Outgoing Connections: ',\n                            help_text: 'admin.service.insecureTlsDesc',\n                            help_text_default: 'When true, any outgoing HTTPS requests will accept unverified, self-signed certificates. For example, outgoing webhooks to a server with a self-signed TLS certificate, using any domain, will be allowed. Note that this makes these connections susceptible to man-in-the-middle attacks.',\n                        },\n                    ],\n                },\n            },\n        },\n        notifications: {\n        },\n        integrations: {\n            webrtc: {\n                schema: {\n                    id: 'WebrtcSettings',\n                    name: 'admin.integrations.webrtc',\n                    name_default: 'Mattermost WebRTC (Beta)',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'WebrtcSettings.Enable',\n                            label: 'admin.webrtc.enableTitle',\n                            label_default: 'Enable Mattermost WebRTC: ',\n                            help_text: 'admin.webrtc.enableDescription',\n                            help_text_default: 'When true, Mattermost allows making <strong>one-on-one</strong> video calls. WebRTC calls are available on Chrome, Firefox and Mattermost Desktop Apps.',\n                            help_text_html: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.GatewayWebsocketUrl',\n                            label: 'admin.webrtc.gatewayWebsocketUrlTitle',\n                            label_default: 'Gateway WebSocket URL:',\n                            placeholder: 'admin.webrtc.gatewayWebsocketUrlExample',\n                            placeholder_default: 'E.g.: \"wss://webrtc.mattermost.com:8189\"',\n                            help_text: 'admin.webrtc.gatewayWebsocketUrlDescription',\n                            help_text_default: 'Enter wss://<mattermost-webrtc-gateway-url>:<port>. Make sure you use WS or WSS in your URL depending on your server configuration.\\n' +\n                                'This is the WebSocket used to signal and establish communication between the peers.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.GatewayAdminUrl',\n                            label: 'admin.webrtc.gatewayAdminUrlTitle',\n                            label_default: 'Gateway Admin URL:',\n                            placeholder: 'admin.webrtc.gatewayAdminUrlExample',\n                            placeholder_default: 'E.g.: \"https://webrtc.mattermost.com:7089/admin\"',\n                            help_text: 'admin.webrtc.gatewayAdminUrlDescription',\n                            help_text_default: 'Enter https://<mattermost-webrtc-gateway-url>:<port>/admin. Make sure you use HTTP or HTTPS in your URL depending on your server configuration.\\n' +\n                                'Mattermost WebRTC uses this URL to obtain valid tokens for each peer to establish the connection.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.GatewayAdminSecret',\n                            label: 'admin.webrtc.gatewayAdminSecretTitle',\n                            label_default: 'Gateway Admin Secret:',\n                            placeholder: 'admin.webrtc.gatewayAdminSecretExample',\n                            placeholder_default: 'E.g.: \"PVRzWNN1Tg6szn7IQWvhpAvLByScWxdy\"',\n                            help_text: 'admin.webrtc.gatewayAdminSecretDescription',\n                            help_text_default: 'Enter your admin secret password to access the Gateway Admin URL.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.StunURI',\n                            label: 'admin.webrtc.stunUriTitle',\n                            label_default: 'STUN URI:',\n                            placeholder: 'admin.webrtc.stunUriExample',\n                            placeholder_default: 'E.g.: \"stun:webrtc.mattermost.com:5349\"',\n                            help_text: 'admin.webrtc.stunUriDescription',\n                            help_text_default: 'Enter your STUN URI as stun:<your-stun-url>:<port>. STUN is a standardized network protocol to allow an end host to assist devices to access its public IP address if it is located behind a NAT.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.TurnURI',\n                            label: 'admin.webrtc.turnUriTitle',\n                            label_default: 'TURN URI:',\n                            placeholder: 'admin.webrtc.turnUriExample',\n                            placeholder_default: 'E.g.: \"turn:webrtc.mattermost.com:5349\"',\n                            help_text: 'admin.webrtc.turnUriDescription',\n                            help_text_default: 'Enter your TURN URI as turn:<your-turn-url>:<port>. TURN is a standardized network protocol to allow an end host to assist devices to establish a connection by using a relay public IP address if it is located behind a symmetric NAT.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.TurnUsername',\n                            label: 'admin.webrtc.turnUsernameTitle',\n                            label_default: 'TURN Username:',\n                            placeholder: 'admin.webrtc.turnUsernameExample',\n                            placeholder_default: 'E.g.: \"myusername\"',\n                            help_text: 'admin.webrtc.turnUsernameDescription',\n                            help_text_default: 'Enter your TURN Server Username.',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                                needsUtils.stateValueFalse('WebrtcSettings.TurnURI'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.TurnSharedKey',\n                            label: 'admin.webrtc.turnSharedKeyTitle',\n                            label_default: 'TURN Shared Key:',\n                            placeholder: 'admin.webrtc.turnSharedKeyExample',\n                            placeholder_default: 'E.g.: \"bXdkOWQxc3d0Ynk3emY5ZmsxZ3NtazRjaWg=\"',\n                            help_text: 'admin.webrtc.turnSharedKeyDescription',\n                            help_text_default: 'Enter your TURN Server Shared Key. This is used to created dynamic passwords to establish the connection. Each password is valid for a short period of time.',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                                needsUtils.stateValueFalse('WebrtcSettings.TurnURI'),\n                            ),\n                        },\n                    ],\n                },\n            },\n            external: {\n                schema: {\n                    id: 'ExternalServiceSettings',\n                    name: 'admin.integrations.external',\n                    name_default: 'External Services',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.GoogleDeveloperKey',\n                            label: 'admin.service.googleTitle',\n                            label_default: 'Google API Key:',\n                            placeholder: 'admin.service.googleExample',\n                            placeholder_default: 'E.g.: \"7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QV\"',\n                            help_text: 'admin.service.googleDescription',\n                            help_text_default: 'Set this key to enable the display of titles for embedded YouTube video previews. Without the key, YouTube previews will still be created based on hyperlinks appearing in messages or comments but they will not show the video title. View a <a href=\"https://www.youtube.com/watch?v=Im69kzhpR3I\" target=\"_blank\">Google Developers Tutorial</a> for instructions on how to obtain a key and add YouTube Data API v3 as a service to your key.',\n                            help_text_html: true,\n                        },\n                    ],\n                },\n            },\n        },\n        plugins: {\n            configuration: {\n                schema: {\n                    id: 'PluginSettings',\n                    name: 'admin.plugins.settings.title',\n                    name_default: 'Configuration',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'PluginSettings.Enable',\n                            label: 'admin.plugins.settings.enable',\n                            label_default: 'Enable Plugins: ',\n                            help_text: 'admin.plugins.settings.enableDesc',\n                            help_text_default: 'When true, enables plugins on your Mattermost server. Use plugins to integrate with third-party systems, extend functionality or customize the user interface of your Mattermost server. See <a href=\"https://about.mattermost.com/default-plugins\" target=\"_blank\">documentation</a> to learn more.',\n                            help_text_html: true,\n                        },\n                    ],\n                },\n            },\n        },\n        files: {\n            storage: {\n                schema: {\n                    id: 'FileSettings',\n                    name: 'admin.files.storage',\n                    name_default: 'Storage',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'FileSettings.DriverName',\n                            label: 'admin.image.storeTitle',\n                            label_default: 'File Storage System:',\n                            help_text: 'admin.image.storeDescription',\n                            help_text_default: 'Storage system where files and image attachments are saved.<br /><br />Selecting \"Amazon S3\" enables fields to enter your Amazon credentials and bucket details.<br /><br />Selecting \"Local File System\" enables the field to specify a local file directory.',\n                            help_text_html: true,\n                            options: [\n                                {\n                                    value: FILE_STORAGE_DRIVER_LOCAL,\n                                    display_name: 'admin.image.storeLocal',\n                                    display_name_default: 'Local File System',\n                                },\n                                {\n                                    value: FILE_STORAGE_DRIVER_S3,\n                                    display_name: 'admin.image.storeAmazonS3',\n                                    display_name_default: 'Amazon S3',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.Directory',\n                            label: 'admin.image.localTitle',\n                            label_default: 'Local Storage Directory:',\n                            help_text: 'admin.image.localDescription',\n                            help_text_default: 'Directory to which files and images are written. If blank, defaults to ./data/.',\n                            placeholder: 'admin.image.localExample',\n                            placeholder_default: 'E.g.: \"./data/\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_LOCAL)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3Bucket',\n                            label: 'admin.image.amazonS3BucketTitle',\n                            label_default: 'Amazon S3 Bucket:',\n                            help_text: 'admin.image.amazonS3BucketDescription',\n                            help_text_default: 'Name you selected for your S3 bucket in AWS.',\n                            placeholder: 'admin.image.amazonS3BucketExample',\n                            placeholder_default: 'E.g.: \"mattermost-media\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3Region',\n                            label: 'admin.image.amazonS3RegionTitle',\n                            label_default: 'Amazon S3 Region:',\n                            help_text: 'admin.image.amazonS3RegionDescription',\n                            help_text_default: 'AWS region you selected when creating your S3 bucket. If no region is set, Mattermost attempts to get the appropriate region from AWS, or sets it to \"us-east-1\" if none found.',\n                            placeholder: 'admin.image.amazonS3RegionExample',\n                            placeholder_default: 'E.g.: \"us-east-1\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3AccessKeyId',\n                            label: 'admin.image.amazonS3IdTitle',\n                            label_default: 'Amazon S3 Access Key ID:',\n                            help_text: 'admin.image.amazonS3IdDescription',\n                            help_text_html: true,\n                            help_text_default: '(Optional) Only required if you do not want to authenticate to S3 using an <a href=\"https://about.mattermost.com/default-iam-role\" target=\"_blank\">IAM role</a>. Enter the Access Key ID provided by your Amazon EC2 administrator.',\n                            placeholder: 'admin.image.amazonS3IdExample',\n                            placeholder_default: 'E.g.: \"AKIADTOVBGERKLCBV\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3SecretAccessKey',\n                            label: 'admin.image.amazonS3SecretTitle',\n                            label_default: 'Amazon S3 Secret Access Key:',\n                            help_text: 'admin.image.amazonS3SecretDescription',\n                            help_text_default: '(Optional) The secret access key associated with your Amazon S3 Access Key ID.',\n                            placeholder: 'admin.image.amazonS3SecretExample',\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.AmazonS3SSL',\n                            label: 'admin.image.amazonS3SSLTitle',\n                            label_default: 'Enable Secure Amazon S3 Connections:',\n                            help_text: 'admin.image.amazonS3SSLDescription',\n                            help_text_default: 'When false, allow insecure connections to Amazon S3. Defaults to secure connections only.',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.AmazonS3SSE',\n                            label: 'admin.image.amazonS3SSETitle',\n                            label_default: 'Enable Server-Side Encryption for Amazon S3:',\n                            help_text: 'admin.image.amazonS3SSEDescription',\n                            help_text_html: true,\n                            help_text_default: 'When true, encrypt files in Amazon S3 using server-side encryption with Amazon S3-managed keys. See <a href=\"https://about.mattermost.com/default-server-side-encryption\" target=\"_blank\">documentation</a> to learn more.',\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.AmazonS3Trace',\n                            label: 'admin.image.amazonS3TraceTitle',\n                            label_default: 'Enable Amazon S3 Debugging:',\n                            help_text: 'admin.image.amazonS3TraceDescription',\n                            help_text_default: '(Development Mode) When true, log additional debugging information to the system logs.',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            action: testS3Connection,\n                            key: 'TestS3Connection',\n                            label: 'admin.s3.connectionS3Test',\n                            label_default: 'Test Connection',\n                            loading: 'admin.s3.testing',\n                            loading_default: 'Testing...',\n                            error_message: 'admin.s3.s3Fail',\n                            error_message_default: 'Connection unsuccessful: {error}',\n                            success_message: 'admin.s3.s3Success',\n                            success_message_default: 'Connection was successful',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnableFileAttachments',\n                            label: 'admin.file.enableFileAttachments',\n                            label_default: 'Allow File Sharing:',\n                            help_text: 'admin.file.enableFileAttachmentsDesc',\n                            help_text_default: 'When false, disables file sharing on the server. All file and image uploads on messages are forbidden across clients and devices, including mobile.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnableMobileUpload',\n                            label: 'admin.file.enableMobileUploadTitle',\n                            label_default: 'Allow File Uploads on Mobile:',\n                            help_text: 'admin.file.enableMobileUploadDesc',\n                            help_text_default: 'When false, disables file uploads on mobile apps. If Allow File Sharing is set to true, users can still upload files from a mobile web browser.',\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnableMobileDownload',\n                            label: 'admin.file.enableMobileDownloadTitle',\n                            label_default: 'Allow File Downloads on Mobile:',\n                            help_text: 'admin.file.enableMobileDownloadDesc',\n                            help_text_default: 'When false, disables file downloads on mobile apps. Users can still download files from a mobile web browser.',\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'FileSettings.MaxFileSize',\n                            label: 'admin.image.maxFileSizeTitle',\n                            label_default: 'Maximum File Size:',\n                            help_text: 'admin.image.maxFileSizeDescription',\n                            help_text_default: 'Maximum file size for message attachments in megabytes. Caution: Verify server memory can support your setting choice. Large file sizes increase the risk of server crashes and failed uploads due to network interruptions.',\n                            placeholder: 'admin.image.maxFileSizeExample',\n                            placeholder_default: '50',\n                            onConfigLoad: (configVal) => configVal / MEBIBYTE,\n                            onConfigSave: (displayVal) => displayVal * MEBIBYTE,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'ServiceSettings.ImageProxyType',\n                            label: 'admin.image.proxyType',\n                            label_default: 'Image Proxy Type:',\n                            help_text: 'admin.image.proxyTypeDescription',\n                            help_text_default: 'Configure an image proxy to load all Markdown images through a proxy. The image proxy prevents users from making insecure image requests, provides caching for increased performance, and automates image adjustments such as resizing. See <a href=\"https://about.mattermost.com/default-image-proxy-documentation\" target=\"_blank\">documentation</a> to learn more.',\n                            help_text_html: true,\n                            options: [\n                                {\n                                    value: '',\n                                    display_name: 'admin.image.proxyTypeNone',\n                                    display_name_default: 'None',\n                                },\n                                {\n                                    value: 'atmos/camo',\n                                    display_name: 'atmos/camo',\n                                    display_name_default: 'atmos/camo',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.ImageProxyURL',\n                            label: 'admin.image.proxyURL',\n                            label_default: 'Image Proxy URL:',\n                            help_text: 'admin.image.proxyURLDescription',\n                            help_text_default: 'URL of your image proxy server.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.ImageProxyType'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.ImageProxyOptions',\n                            label: 'admin.image.proxyOptions',\n                            label_default: 'Image Proxy Options:',\n                            help_text: 'admin.image.proxyOptionsDescription',\n                            help_text_default: 'Additional options such as the URL signing key. Refer to your image proxy documentation to learn more about what options are supported.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.ImageProxyType'),\n                        },\n                    ],\n                },\n            },\n        },\n        customization: {\n            announcement: {\n                schema: {\n                    id: 'AnnouncementSettings',\n                    name: 'admin.customization.announcement',\n                    name_default: 'Announcement Banner',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'AnnouncementSettings.EnableBanner',\n                            label: 'admin.customization.announcement.enableBannerTitle',\n                            label_default: 'Enable Announcement Banner:',\n                            help_text: 'admin.customization.announcement.enableBannerDesc',\n                            help_text_default: 'Enable an announcement banner across all teams.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'AnnouncementSettings.BannerText',\n                            label: 'admin.customization.announcement.bannerTextTitle',\n                            label_default: 'Banner Text:',\n                            help_text: 'admin.customization.announcement.bannerTextDesc',\n                            help_text_default: 'Text that will appear in the announcement banner.',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_COLOR,\n                            key: 'AnnouncementSettings.BannerColor',\n                            label: 'admin.customization.announcement.bannerColorTitle',\n                            label_default: 'Banner Color:',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_COLOR,\n                            key: 'AnnouncementSettings.BannerTextColor',\n                            label: 'admin.customization.announcement.bannerTextColorTitle',\n                            label_default: 'Banner Text Color:',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'AnnouncementSettings.AllowBannerDismissal',\n                            label: 'admin.customization.announcement.allowBannerDismissalTitle',\n                            label_default: 'Allow Banner Dismissal:',\n                            help_text: 'admin.customization.announcement.allowBannerDismissalDesc',\n                            help_text_default: 'When true, users can dismiss the banner until its next update. When false, the banner is permanently visible until it is turned off by the System Admin.',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                    ],\n                },\n            },\n            posts: {\n                schema: {\n                    id: 'PostSettings',\n                    name: 'admin.customization.posts',\n                    name_default: 'Posts',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableLinkPreviews',\n                            label: 'admin.customization.enableLinkPreviewsTitle',\n                            label_default: 'Enable Link Previews:',\n                            help_text: 'admin.customization.enableLinkPreviewsDesc',\n                            help_text_default: 'Display a preview of website content below messages, when available. Users can disable these previews from Account Settings > Display > Website Link Previews.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_CUSTOM,\n                            component: CustomUrlSchemesSetting,\n                            key: 'DisplaySettings.CustomUrlSchemes',\n                        },\n                    ],\n                },\n            },\n            legal_and_support: {\n                schema: {\n                    id: 'LegalAndSupportSettings',\n                    name: 'admin.customization.support',\n                    name_default: 'Legal and Support',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.TermsOfServiceLink',\n                            label: 'admin.support.termsTitle',\n                            label_default: 'Terms of Service link:',\n                            help_text: 'admin.support.termsDesc',\n                            help_text_default: 'Link to the terms under which users may use your online service. By default, this includes the \"Mattermost Conditions of Use (End Users)\" explaining the terms under which Mattermost software is provided to end users. If you change the default link to add your own terms for using the service you provide, your new terms must include a link to the default terms so end users are aware of the Mattermost Conditions of Use (End User) for Mattermost software.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.PrivacyPolicyLink',\n                            label: 'admin.support.privacyTitle',\n                            label_default: 'Privacy Policy link:',\n                            help_text: 'admin.support.privacyDesc',\n                            help_text_default: 'The URL for the Privacy link on the login and sign-up pages. If this field is empty, the Privacy link is hidden from users.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.AboutLink',\n                            label: 'admin.support.aboutTitle',\n                            label_default: 'About link:',\n                            help_text: 'admin.support.aboutDesc',\n                            help_text_default: 'The URL for the About link on the Mattermost login and sign-up pages. If this field is empty, the About link is hidden from users.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.HelpLink',\n                            label: 'admin.support.helpTitle',\n                            label_default: 'Help link:',\n                            help_text: 'admin.support.helpDesc',\n                            help_text_default: 'The URL for the Help link on the Mattermost login page, sign-up pages, and Main Menu. If this field is empty, the Help link is hidden from users.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.ReportAProblemLink',\n                            label: 'admin.support.problemTitle',\n                            label_default: 'Report a Problem link:',\n                            help_text: 'admin.support.problemDesc',\n                            help_text_default: 'The URL for the Report a Problem link in the Main Menu. If this field is empty, the link is removed from the Main Menu.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.SupportEmail',\n                            label: 'admin.support.emailTitle',\n                            label_default: 'Support Email:',\n                            help_text: 'admin.support.emailHelp',\n                            help_text_default: 'Email address displayed on email notifications and during tutorial for end users to ask support questions.',\n                        },\n                    ],\n                },\n            },\n            native_app_links: {\n                schema: {\n                    id: 'LegalAndSupportSettings',\n                    name: 'admin.customization.nativeAppLinks',\n                    name_default: 'Mattermost App Links',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'NativeAppSettings.AppDownloadLink',\n                            label: 'admin.customization.appDownloadLinkTitle',\n                            label_default: 'Mattermost Apps Download Page Link:',\n                            help_text: 'admin.customization.appDownloadLinkDesc',\n                            help_text_default: 'Add a link to a download page for the Mattermost apps. When a link is present, an option to \"Download Mattermost Apps\" will be added in the Main Menu so users can find the download page. Leave this field blank to hide the option from the Main Menu.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'NativeAppSettings.AndroidAppDownloadLink',\n                            label: 'admin.customization.androidAppDownloadLinkTitle',\n                            label_default: 'Android App Download Link:',\n                            help_text: 'admin.customization.androidAppDownloadLinkDesc',\n                            help_text_default: 'Add a link to download the Android app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'NativeAppSettings.IosAppDownloadLink',\n                            label: 'admin.customization.iosAppDownloadLinkTitle',\n                            label_default: 'iOS App Download Link:',\n                            help_text: 'admin.customization.iosAppDownloadLinkDesc',\n                            help_text_default: 'Add a link to download the iOS app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                        },\n                    ],\n                },\n            },\n        },\n        compliance: {\n        },\n        advanced: {\n            rate: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: 'admin.rate.title',\n                    name_default: 'Rate Limit Settings',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: 'admin.rate.noteDescription',\n                            label_default: 'Changing properties other than Site URL in this section will require a server restart before taking effect.',\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'RateLimitSettings.Enable',\n                            label: 'admin.rate.enableLimiterTitle',\n                            label_default: 'Enable Rate Limiting:',\n                            help_text: 'admin.rate.enableLimiterDescription',\n                            help_text_default: 'When true, APIs are throttled at rates specified below.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'RateLimitSettings.PerSec',\n                            label: 'admin.rate.queriesTitle',\n                            label_default: 'Maximum Queries per Second:',\n                            placeholder: 'admin.rate.queriesExample',\n                            placeholder_default: 'E.g.: \"10\"',\n                            help_text: 'admin.rate.queriesDescription',\n                            help_text_default: 'Throttles API at this number of requests per second.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'RateLimitSettings.MaxBurst',\n                            label: 'admin.rate.maxBurst',\n                            label_default: 'Maximum Burst Size:',\n                            placeholder: 'admin.rate.maxBurstExample',\n                            placeholder_default: 'E.g.: \"100\"',\n                            help_text: 'admin.rate.maxBurstDescription',\n                            help_text_default: 'Maximum number of requests allowed beyond the per second query limit.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'RateLimitSettings.MemoryStoreSize',\n                            label: 'admin.rate.memoryTitle',\n                            label_default: 'Memory Store Size:',\n                            placeholder: 'admin.rate.memoryExample',\n                            placeholder_default: 'E.g.: \"10000\"',\n                            help_text: 'admin.rate.memoryDescription',\n                            help_text_default: 'Maximum number of users sessions connected to the system as determined by \"Vary rate limit by remote address\" and \"Vary rate limit by HTTP header\".',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'RateLimitSettings.VaryByRemoteAddr',\n                            label: 'admin.rate.remoteTitle',\n                            label_default: 'Vary rate limit by remote address:',\n                            help_text: 'admin.rate.remoteDescription',\n                            help_text_default: 'When true, rate limit API access by IP address.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'RateLimitSettings.VaryByUser',\n                            label: 'admin.rate.varyByUser',\n                            label_default: 'Vary rate limit by user:',\n                            help_text: 'admin.rate.varyByUserDescription',\n                            help_text_default: 'When true, rate limit API access by user athentication token.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'RateLimitSettings.VaryByHeader',\n                            label: 'admin.rate.httpHeaderTitle',\n                            label_default: 'Vary rate limit by HTTP header:',\n                            placeholder: 'admin.rate.httpHeaderExample',\n                            placeholder_default: 'E.g.: \"X-Real-IP\", \"X-Forwarded-For\"',\n                            help_text: 'admin.rate.httpHeaderDescription',\n                            help_text_default: 'When filled in, vary rate limiting by HTTP header field specified (e.g. when configuring NGINX set to \"X-Real-IP\", when configuring AmazonELB set to \"X-Forwarded-For\").',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                                needsUtils.stateValueEqual('RateLimitSettings.VaryByRemoteAddr', true),\n                            ),\n                        },\n                    ],\n                },\n            },\n            developer: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: 'admin.developer.title',\n                    name_default: 'Developer Settings',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableTesting',\n                            label: 'admin.service.testingTitle',\n                            label_default: 'Enable Testing Commands:',\n                            help_text: 'admin.service.testingDescription',\n                            help_text_default: 'When true, /test slash command is enabled to load test accounts, data and text formatting. Changing this requires a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableDeveloper',\n                            label: 'admin.service.developerTitle',\n                            label_default: 'Enable Developer Mode: ',\n                            help_text: 'admin.service.developerDesc',\n                            help_text_default: 'When true, JavaScript errors are shown in a purple bar at the top of the user interface. Not recommended for use in production.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.AllowedUntrustedInternalConnections',\n                            label: 'admin.service.internalConnectionsTitle',\n                            label_default: 'Allow untrusted internal connections to: ',\n                            placeholder: 'admin.service.internalConnectionsEx',\n                            placeholder_default: 'webhooks.internal.example.com 127.0.0.1 10.0.16.0/28',\n                            help_text: 'admin.service.internalConnectionsDesc',\n                            help_text_default: 'In testing environments, such as when developing integrations locally on a development machine, use this setting to specify domains, IP addresses, or CIDR notations to allow internal connections. <b>Not recommended for use in production</b>, since this can allow a user to extract confidential data from your server or internal network.<br /><br />By default, user-supplied URLs such as those used for Open Graph metadata, webhooks, or slash commands will not be allowed to connect to reserved IP addresses including loopback or link-local addresses used for internal networks. Push notification, OAuth 2.0 and WebRTC server URLs are trusted and not affected by this setting.',\n                            help_text_html: true,\n                        },\n                    ],\n                },\n            },\n            metrics: {\n                schema: {\n                    id: 'MetricsSettings',\n                    name: 'admin.advance.metrics',\n                    name_default: 'Performance Monitoring',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'MetricsSettings.Enable',\n                            label: 'admin.metrics.enableTitle',\n                            label_default: 'Enable Performance Monitoring:',\n                            help_text: 'admin.metrics.enableDescription',\n                            help_text_default: 'When true, Mattermost will enable performance monitoring collection and profiling. Please see <a href=\"http://docs.mattermost.com/deployment/metrics.html\" target=\"_blank\">documentation</a> to learn more about configuring performance monitoring for Mattermost.',\n                            help_text_html: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'MetricsSettings.ListenAddress',\n                            label: 'admin.metrics.listenAddressTitle',\n                            label_default: 'Listen Address:',\n                            placeholder: 'admin.metrics.listenAddressEx',\n                            placeholder_default: 'E.g.: \":8067\"',\n                            help_text: 'admin.metrics.listenAddressDesc',\n                            help_text_default: 'The address the server will listen on to expose performance metrics.',\n                        },\n                    ],\n                },\n            },\n        },\n    },\n    other: {\n        license: {\n            schema: {\n                id: 'LicenseSettings',\n                component: LicenseSettings,\n            },\n        },\n        audits: {\n            schema: {\n                id: 'Audits',\n                component: Audits,\n            },\n        },\n    },\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport SystemAnalytics from './system_analytics.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    return {\n        isLicensed,\n    };\n}\n\nexport default connect(mapStateToProps)(SystemAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport AnalyticsStore from 'stores/analytics_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport DoughnutChart from '../doughnut_chart.jsx';\nimport LineChart from '../line_chart.jsx';\nimport StatisticCount from '../statistic_count.jsx';\n\nimport {\n    formatPostsPerDayData,\n    formatUsersWithPostsPerDayData,\n    formatChannelDoughtnutData,\n    formatPostDoughtnutData,\n} from '../format.jsx';\n\nconst StatTypes = Constants.StatTypes;\n\nexport default class SystemAnalytics extends React.Component {\n    static propTypes = {\n        isLicensed: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {stats: AnalyticsStore.getAllSystem()};\n    }\n\n    componentDidMount() {\n        AnalyticsStore.addChangeListener(this.onChange);\n\n        AdminActions.getStandardAnalytics();\n        AdminActions.getPostsPerDayAnalytics();\n        AdminActions.getUsersPerDayAnalytics();\n\n        if (this.props.isLicensed) {\n            AdminActions.getAdvancedAnalytics();\n        }\n    }\n\n    componentWillUnmount() {\n        AnalyticsStore.removeChangeListener(this.onChange);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!Utils.areObjectsEqual(nextState.stats, this.state.stats)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    onChange = () => {\n        this.setState({stats: AnalyticsStore.getAllSystem()});\n    }\n\n    render() {\n        const stats = this.state.stats;\n        const isLicensed = this.props.isLicensed;\n        const skippedIntensiveQueries = stats[StatTypes.TOTAL_POSTS] === -1;\n        const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n\n        let banner;\n        let postCount;\n        let postTotalGraph;\n        let activeUserGraph;\n        if (skippedIntensiveQueries) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedHTMLMessage\n                            id='analytics.system.skippedIntensiveQueries'\n                            defaultMessage=\"To maximize performance, some statistics are disabled. You can <a href='https://docs.mattermost.com/administration/statistics.html' target='_blank'>re-enable them in config.json</a>.\"\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            postCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={stats[StatTypes.TOTAL_POSTS]}\n                />\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            activeUserGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        let advancedStats;\n        let advancedGraphs;\n        let sessionCount;\n        let commandCount;\n        let incomingCount;\n        let outgoingCount;\n        if (this.props.isLicensed) {\n            sessionCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalSessions'\n                            defaultMessage='Total Sessions'\n                        />\n                    }\n                    icon='fa-signal'\n                    count={stats[StatTypes.TOTAL_SESSIONS]}\n                />\n            );\n\n            commandCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalCommands'\n                            defaultMessage='Total Commands'\n                        />\n                    }\n                    icon='fa-terminal'\n                    count={stats[StatTypes.TOTAL_COMMANDS]}\n                />\n            );\n\n            incomingCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalIncomingWebhooks'\n                            defaultMessage='Incoming Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-down'\n                    count={stats[StatTypes.TOTAL_IHOOKS]}\n                />\n            );\n\n            outgoingCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalOutgoingWebhooks'\n                            defaultMessage='Outgoing Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-up'\n                    count={stats[StatTypes.TOTAL_OHOOKS]}\n                />\n            );\n\n            advancedStats = (\n                <div>\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalWebsockets'\n                                defaultMessage='WebSocket Conns'\n                            />\n                        }\n                        icon='fa-user'\n                        count={stats[StatTypes.TOTAL_WEBSOCKET_CONNECTIONS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalMasterDbConnections'\n                                defaultMessage='Master DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={stats[StatTypes.TOTAL_MASTER_DB_CONNECTIONS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalReadDbConnections'\n                                defaultMessage='Replica DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={stats[StatTypes.TOTAL_READ_DB_CONNECTIONS]}\n                    />\n                </div>\n            );\n\n            const channelTypeData = formatChannelDoughtnutData(stats[StatTypes.TOTAL_PUBLIC_CHANNELS], stats[StatTypes.TOTAL_PRIVATE_GROUPS]);\n            const postTypeData = formatPostDoughtnutData(stats[StatTypes.TOTAL_FILE_POSTS], stats[StatTypes.TOTAL_HASHTAG_POSTS], stats[StatTypes.TOTAL_POSTS]);\n\n            let postTypeGraph;\n            if (stats[StatTypes.TOTAL_POSTS] !== -1) {\n                postTypeGraph = (\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.postTypes'\n                                defaultMessage='Posts, Files and Hashtags'\n                            />\n                        }\n                        data={postTypeData}\n                        width={300}\n                        height={225}\n                    />\n                );\n            }\n\n            advancedGraphs = (\n                <div className='row'>\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.channelTypes'\n                                defaultMessage='Channel Types'\n                            />\n                        }\n                        data={channelTypeData}\n                        width={300}\n                        height={225}\n                    />\n                    {postTypeGraph}\n                </div>\n            );\n        }\n\n        const userCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalUsers'\n                        defaultMessage='Total Active Users'\n                    />\n                }\n                icon='fa-user'\n                count={stats[StatTypes.TOTAL_USERS]}\n            />\n        );\n\n        const teamCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalTeams'\n                        defaultMessage='Total Teams'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.TOTAL_TEAMS]}\n            />\n        );\n\n        const channelCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalChannels'\n                        defaultMessage='Total Channels'\n                    />\n                }\n                icon='fa-globe'\n                count={stats[StatTypes.TOTAL_PUBLIC_CHANNELS] + stats[StatTypes.TOTAL_PRIVATE_GROUPS]}\n            />\n        );\n\n        const dailyActiveUsers = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.dailyActiveUsers'\n                        defaultMessage='Daily Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.DAILY_ACTIVE_USERS]}\n            />\n        );\n\n        const monthlyActiveUsers = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.monthlyActiveUsers'\n                        defaultMessage='Monthly Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.MONTHLY_ACTIVE_USERS]}\n            />\n        );\n\n        let firstRow;\n        let secondRow;\n        if (isLicensed && skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {sessionCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (isLicensed && !skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {sessionCount}\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (!isLicensed) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n        }\n\n        const thirdRow = (\n            <div>\n                {dailyActiveUsers}\n                {monthlyActiveUsers}\n            </div>\n        );\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='analytics.system.title'\n                        defaultMessage='System Statistics'\n                    />\n                </h3>\n                {banner}\n                <div className='row'>\n                    {firstRow}\n                    {secondRow}\n                    {thirdRow}\n                    {advancedStats}\n                </div>\n                {advancedGraphs}\n                {postTotalGraph}\n                {activeUserGraph}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport Chart from 'chart.js';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class DoughnutChart extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Chart title\n         */\n        title: PropTypes.node,\n\n        /*\n         * Chart width\n         */\n        width: PropTypes.number,\n\n        /*\n         * Chart height\n         */\n        height: PropTypes.number,\n\n        /*\n         * Chart data\n         */\n        data: PropTypes.object,\n    };\n\n    chart = null;\n\n    componentDidMount() {\n        this.initChart();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            this.initChart(true);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.chart && this.refs.canvas) {\n            this.chart.destroy();\n        }\n    }\n\n    initChart = (update) => {\n        if (!this.refs.canvas) {\n            return;\n        }\n        var el = ReactDOM.findDOMNode(this.refs.canvas);\n        var ctx = el.getContext('2d');\n        this.chart = new Chart(ctx, {type: 'doughnut', data: this.props.data, options: {}}); //eslint-disable-line new-cap\n        if (update) {\n            this.chart.update();\n        }\n    }\n\n    render() {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else {\n            content = (\n                <canvas\n                    ref='canvas'\n                    width={this.props.width}\n                    height={this.props.height}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams} from 'mattermost-redux/actions/teams';\nimport {getProfilesInTeam} from 'mattermost-redux/actions/users';\nimport {getTeamsList} from 'mattermost-redux/selectors/entities/teams';\n\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport TeamAnalytics from './team_analytics.jsx';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nfunction mapStateToProps(state) {\n    const teams = getTeamsList(state);\n    const teamId = BrowserStore.getGlobalItem(LAST_ANALYTICS_TEAM, teams.length > 0 ? teams[0].id : '');\n\n    return {\n        initialTeam: state.entities.teams.teams[teamId],\n        locale: getCurrentLocale(state),\n        teams,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getProfilesInTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport AnalyticsStore from 'stores/analytics_store.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {StatTypes} from 'utils/constants.jsx';\nimport Banner from 'components/admin_console/banner.jsx';\nimport LineChart from 'components/analytics/line_chart.jsx';\nimport StatisticCount from 'components/analytics/statistic_count.jsx';\nimport TableChart from 'components/analytics/table_chart.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport {getMonthLong} from 'utils/i18n';\n\nimport {formatPostsPerDayData, formatUsersWithPostsPerDayData} from '../format.jsx';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nexport default class TeamAnalytics extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of team objects\n         */\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * Initial team to load analytics for\n         */\n        initialTeam: PropTypes.object,\n\n        /**\n         * The locale of the current user\n          */\n        locale: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get teams\n             */\n            getTeams: PropTypes.func.isRequired,\n\n            /*\n             * Function to get users in a team\n             */\n            getProfilesInTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const teamId = props.initialTeam ? props.initialTeam.id : '';\n\n        this.state = {\n            team: props.initialTeam,\n            stats: AnalyticsStore.getAllTeam(teamId),\n            recentlyActiveUsers: [],\n            newUsers: [],\n        };\n    }\n\n    componentDidMount() {\n        AnalyticsStore.addChangeListener(this.onChange);\n\n        if (this.state.team) {\n            this.getData(this.state.team.id);\n        }\n\n        this.props.actions.getTeams(0, 1000);\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState) { // eslint-disable-line camelcase\n        if (nextState.team && nextState.team !== this.state.team) {\n            this.getData(nextState.team.id);\n        }\n    }\n\n    getData = async (id) => {\n        AdminActions.getStandardAnalytics(id);\n        AdminActions.getPostsPerDayAnalytics(id);\n        AdminActions.getUsersPerDayAnalytics(id);\n        const {data: recentlyActiveUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'last_activity_at');\n        const {data: newUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'create_at');\n\n        this.setState({\n            recentlyActiveUsers,\n            newUsers,\n        });\n    }\n\n    componentWillUnmount() {\n        AnalyticsStore.removeChangeListener(this.onChange);\n    }\n\n    onChange = () => {\n        const teamId = this.state.team ? this.state.team.id : '';\n        this.setState({\n            stats: AnalyticsStore.getAllTeam(teamId),\n        });\n    }\n\n    handleTeamChange = (e) => {\n        const teamId = e.target.value;\n\n        let team;\n        this.props.teams.forEach((t) => {\n            if (t.id === teamId) {\n                team = t;\n            }\n        });\n\n        this.setState({\n            team,\n        });\n\n        BrowserStore.setGlobalItem(LAST_ANALYTICS_TEAM, teamId);\n    }\n\n    render() {\n        if (this.props.teams.length === 0 || !this.state.team || !this.state.stats) {\n            return <LoadingScreen/>;\n        }\n\n        if (this.state.team == null) {\n            return (\n                <Banner\n                    description={\n                        <FormattedMessage\n                            id='analytics.team.noTeams'\n                            defaultMessage='There are no teams on this server for which to view statistics.'\n                        />\n                    }\n                />\n            );\n        }\n\n        const stats = this.state.stats;\n        const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n\n        let banner = (\n            <div className='banner'>\n                <div className='banner__content'>\n                    <FormattedMessage\n                        id='analytics.system.info'\n                        defaultMessage='Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team.'\n                    />\n                </div>\n            </div>\n        );\n\n        let totalPostsCount;\n        let postTotalGraph;\n        let userActiveGraph;\n        if (stats[StatTypes.TOTAL_POSTS] === -1) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedHTMLMessage\n                            id='analytics.system.infoAndSkippedIntensiveQueries'\n                            defaultMessage=\"Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team. <br><br> Some statistics have been omitted because they put too much load on the system to calculate. See <a href='https://docs.mattermost.com/administration/statistics.html' target='_blank'>https://docs.mattermost.com/administration/statistics.html</a> for more details.\"\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            totalPostsCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.team.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={stats[StatTypes.TOTAL_POSTS]}\n                />\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            userActiveGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        const recentActiveUsers = formatRecentUsersData(this.state.recentlyActiveUsers, this.props.locale);\n        const newlyCreatedUsers = formatNewUsersData(this.state.newUsers, this.props.locale);\n\n        const teams = this.props.teams.map((team) => {\n            return (\n                <option\n                    key={team.id}\n                    value={team.id}\n                >\n                    {team.display_name}\n                </option>\n            );\n        });\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <div className='admin-console-header team-statistics__header-row'>\n                    <div className='team-statistics__header'>\n                        <h3 className='admin-console-header'>\n                            <FormattedMessage\n                                id='analytics.team.title'\n                                defaultMessage='Team Statistics for {team}'\n                                values={{\n                                    team: this.state.team.display_name,\n                                }}\n                            />\n                        </h3>\n                    </div>\n                    <div className='team-statistics__team-filter'>\n                        <select\n                            className='form-control team-statistics__team-filter__dropdown'\n                            onChange={this.handleTeamChange}\n                            value={this.state.team.id}\n                        >\n                            {teams}\n                        </select>\n                    </div>\n                </div>\n                {banner}\n                <div className='row'>\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.totalUsers'\n                                defaultMessage='Total Active Users'\n                            />\n                        }\n                        icon='fa-user'\n                        count={stats[StatTypes.TOTAL_USERS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.publicChannels'\n                                defaultMessage='Public Channels'\n                            />\n                        }\n                        icon='fa-users'\n                        count={stats[StatTypes.TOTAL_PUBLIC_CHANNELS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.privateGroups'\n                                defaultMessage='Private Channels'\n                            />\n                        }\n                        icon='fa-globe'\n                        count={stats[StatTypes.TOTAL_PRIVATE_GROUPS]}\n                    />\n                    {totalPostsCount}\n                </div>\n                {postTotalGraph}\n                {userActiveGraph}\n                <div className='row'>\n                    <TableChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.recentUsers'\n                                defaultMessage='Recent Active Users'\n                            />\n                        }\n                        data={recentActiveUsers}\n                    />\n                    <TableChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.newlyCreated'\n                                defaultMessage='Newly Created Users'\n                            />\n                        }\n                        data={newlyCreatedUsers}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function formatRecentUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.last_activity_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n\nexport function formatNewUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.create_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport Constants from 'utils/constants.jsx';\n\nexport default class TableChart extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Table title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Table data\n         */\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                name: PropTypes.string.isRequired,\n                tip: PropTypes.string.isRequired,\n                value: PropTypes.node.isRequired,\n            })\n        ).isRequired,\n    };\n\n    render() {\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count recent-active-users'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        <table>\n                            <tbody>\n                                {\n                                    this.props.data.map((item) => {\n                                        const tooltip = (\n                                            <Tooltip id={'tip-table-entry-' + item.name}>\n                                                {item.tip}\n                                            </Tooltip>\n                                        );\n\n                                        return (\n                                            <tr key={'table-entry-' + item.name}>\n                                                <td>\n                                                    <OverlayTrigger\n                                                        trigger={['hover', 'focus']}\n                                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                                        placement='top'\n                                                        overlay={tooltip}\n                                                    >\n                                                        <time>\n                                                            {item.name}\n                                                        </time>\n                                                    </OverlayTrigger>\n                                                </td>\n                                                <td>\n                                                    {item.value}\n                                                </td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getAudits} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport Audits from './audits.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    return {\n        isLicensed,\n        audits: Object.values(Selectors.getAudits(state)),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Audits);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport ComplianceReports from 'components/admin_console/compliance_reports';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport AuditTable from 'components/audit_table.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class Audits extends React.PureComponent {\n    static propTypes = {\n        isLicensed: PropTypes.bool.isRequired,\n\n        /*\n         * Array of audits to render\n         */\n        audits: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to fetch audits\n             */\n            getAudits: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingAudits: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false})\n        );\n    }\n\n    reload = () => {\n        this.setState({loadingAudits: true});\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false})\n        );\n    }\n\n    render() {\n        let content = null;\n\n        if (!this.props.isLicensed) {\n            return <div/>;\n        }\n\n        if (this.state.loadingAudits) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <div style={style.auditTable}>\n                    <AuditTable\n                        audits={this.props.audits}\n                        showUserId={true}\n                        showIp={true}\n                        showSession={true}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className='wrapper--admin'>\n                <ComplianceReports/>\n\n                <div className='panel audit-panel'>\n                    <h3 className='admin-console-header'>\n                        <FormattedMessage\n                            id='admin.audits.title'\n                            defaultMessage='User Activity Logs'\n                        />\n                        <button\n                            type='submit'\n                            className='btn btn-link pull-right'\n                            onClick={this.reload}\n                        >\n                            <i\n                                className='fa fa-refresh'\n                                title={localizeMessage('generic_icons.reload', 'Reload Icon')}\n                            />\n                            <FormattedMessage\n                                id='admin.audits.reload'\n                                defaultMessage='Reload User Activity Logs'\n                            />\n                        </button>\n                    </h3>\n                    <div className='audit-panel__table'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    auditTable: {margin: 10},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createComplianceReport, getComplianceReports} from 'mattermost-redux/actions/admin';\nimport {getComplianceReports as selectComplianceReports, getConfig} from 'mattermost-redux/selectors/entities/admin';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport ComplianceReports from './compliance_reports.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    let enabled = false;\n    const config = getConfig(state);\n    if (config && config.ComplianceSettings) {\n        enabled = config.ComplianceSettings.Enable;\n    }\n\n    let serverError;\n    const error = state.requests.admin.createCompliance.error;\n    if (error) {\n        serverError = error.message;\n    }\n\n    const reports = Object.values(selectComplianceReports(state)).sort((a, b) => {\n        return b.create_at - a.create_at;\n    });\n\n    return {\n        isLicensed,\n        enabled,\n        reports,\n        serverError,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getComplianceReports,\n            createComplianceReport,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComplianceReports);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport UserStore from 'stores/user_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class ComplianceReports extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Set if compliance reports are licensed\n         */\n        isLicensed: PropTypes.bool.isRequired,\n\n        /*\n         * Set if compliance reports are enabled in the config\n         */\n        enabled: PropTypes.bool.isRequired,\n\n        /*\n         * Array of reports to render\n         */\n        reports: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * Error message to display\n         */\n        serverError: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get compliance reports\n             */\n            getComplianceReports: PropTypes.func.isRequired,\n\n            /*\n             * Function to save compliance reports\n             */\n            createComplianceReport: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingReports: true,\n        };\n    }\n\n    componentDidMount() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return;\n        }\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false})\n        );\n    }\n\n    reload = () => {\n        this.setState({loadingReports: true});\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false})\n        );\n    }\n\n    runReport = (e) => {\n        e.preventDefault();\n\n        this.setState({runningReport: true});\n\n        const job = {};\n        job.desc = this.refs.desc.value;\n        job.emails = this.refs.emails.value;\n        job.keywords = this.refs.keywords.value;\n        job.start_at = Date.parse(this.refs.from.value);\n        job.end_at = Date.parse(this.refs.to.value);\n\n        this.props.actions.createComplianceReport(job).then(\n            ({data}) => {\n                if (data) {\n                    this.refs.emails.value = '';\n                    this.refs.keywords.value = '';\n                    this.refs.desc.value = '';\n                    this.refs.from.value = '';\n                    this.refs.to.value = '';\n                }\n                this.setState({runningReport: false});\n            }\n        );\n    }\n\n    getDateTime(millis) {\n        const date = new Date(millis);\n        return (\n            <span style={style.date}>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    render() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return <div/>;\n        }\n\n        let content = null;\n        if (this.state.loadingReports) {\n            content = <LoadingScreen/>;\n        } else {\n            var list = [];\n\n            for (var i = 0; i < this.props.reports.length; i++) {\n                const report = this.props.reports[i];\n\n                let params = '';\n                if (report.type === 'adhoc') {\n                    params = (\n                        <span>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />{' '}{this.getDateTime(report.start_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />{' '}{this.getDateTime(report.end_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />{' '}{report.emails}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />{' '}{report.keywords}\n                        </span>);\n                }\n\n                let download = '';\n                let status = '';\n                if (report.status === 'finished') {\n                    download = (\n                        <a href={`${Client4.getBaseRoute()}/compliance/reports/${report.id}/download`}>\n                            <FormattedMessage\n                                id='admin.compliance_table.download'\n                                defaultMessage='Download'\n                            />\n                        </a>\n                    );\n\n                    status = (\n                        <span style={style.greenStatus}>{report.status}</span>\n                    );\n                } else if (report.status === 'failed') {\n                    status = (\n                        <span style={style.redStatus}>{report.status}</span>\n                    );\n                }\n\n                let user = report.user_id;\n                const profile = UserStore.getProfile(report.user_id);\n                if (profile) {\n                    user = profile.email;\n                }\n\n                list[i] = (\n                    <tr key={report.id}>\n                        <td style={style.dataCell}>{download}</td>\n                        <td>{this.getDateTime(report.create_at)}</td>\n                        <td>{status}</td>\n                        <td>{report.count}</td>\n                        <td>{report.type}</td>\n                        <td style={style.dataCell}>{report.desc}</td>\n                        <td>{user}</td>\n                        <td style={style.dataCell}>{params}</td>\n                    </tr>\n                );\n            }\n\n            content = (\n                <div style={style.content}>\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th/>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.timestamp'\n                                        defaultMessage='Timestamp'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.status'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.records'\n                                        defaultMessage='Records'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.type'\n                                        defaultMessage='Type'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.desc'\n                                        defaultMessage='Description'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.userId'\n                                        defaultMessage='Requested By'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.params'\n                                        defaultMessage='Params'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {list}\n                        </tbody>\n                    </table>\n                </div>\n            );\n        }\n\n        let serverError = '';\n        if (this.props.serverError) {\n            serverError = (\n                <div\n                    className='form-group has-error'\n                    style={style.serverError}\n                >\n                    <label className='control-label'>{this.props.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div className='panel compliance-panel'>\n                <h3>\n                    <FormattedMessage\n                        id='admin.compliance_reports.title'\n                        defaultMessage='Compliance Reports'\n                    />\n                </h3>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.desc'\n                                defaultMessage='Job Name:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='desc'\n                            ref='desc'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.desc_placeholder', 'E.g. \"Audit 445 for HR\"')}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='from'\n                            ref='from'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.from_placeholder', 'E.g. \"2016-03-11\"')}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='to'\n                            ref='to'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.to_placeholder', 'E.g. \"2016-03-15\"')}\n                        />\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='emails'\n                            ref='emails'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.emails_placeholder', 'E.g. \"bill@example.com, bob@example.com\"')}\n                        />\n                    </div>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='keywords'\n                            ref='keywords'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.keywords_placeholder', 'E.g. \"shorting stock\"')}\n                        />\n                    </div>\n                </div>\n                <div className='clearfix'>\n                    <button\n                        id='run-button'\n                        type='submit'\n                        className='btn btn-primary'\n                        onClick={this.runReport}\n                    >\n                        <FormattedMessage\n                            id='admin.compliance_reports.run'\n                            defaultMessage='Run Compliance Report'\n                        />\n                    </button>\n                </div>\n                {serverError}\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        disabled={this.state.runningReport}\n                        onClick={this.reload}\n                    >\n                        <i\n                            className='fa fa-refresh'\n                            title={Utils.localizeMessage('generic_icons.reload', 'Reload Icon')}\n                        />\n                        <FormattedMessage\n                            id='admin.compliance_reports.reload'\n                            defaultMessage='Reload Completed Compliance Reports'\n                        />\n                    </button>\n                </div>\n                <div className='compliance-panel__table'>\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    content: {margin: 10},\n    greenStatus: {color: 'green'},\n    redStatus: {color: 'red'},\n    dataCell: {whiteSpace: 'nowrap'},\n    date: {whiteSpace: 'nowrap'},\n    serverError: {marginTop: '10px'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils';\n\nimport Setting from './setting';\n\nexport default class CustomUrlSchemesSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            value: PropTypes.array.isRequired,\n            onChange: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            setByEnv: PropTypes.bool.isRequired,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.arrayToString(props.value),\n        };\n    }\n\n    stringToArray = (str) => {\n        return str.split(',').map((s) => s.trim()).filter(Boolean);\n    };\n\n    arrayToString = (arr) => {\n        return arr.join(',');\n    };\n\n    handleChange = (e) => {\n        const valueAsArray = this.stringToArray(e.target.value);\n\n        this.props.onChange(this.props.id, valueAsArray);\n\n        this.setState({\n            value: e.target.value,\n        });\n    };\n\n    render() {\n        const label = Utils.localizeMessage('admin.customization.customUrlSchemes', 'Custom URL Schemes:');\n        const helpText = Utils.localizeMessage(\n            'admin.customization.customUrlSchemesDesc',\n            'Allows message text to link if it begins with any of the comma-separated URL schemes listed. By default, the following schemes will create links: \"http\", \"https\", \"ftp\", \"tel\", and \"mailto\".'\n        );\n        const placeholder = Utils.localizeMessage('admin.customization.customUrlSchemesPlaceholder', 'E.g.: \"git,smtp\"');\n\n        return (\n            <Setting\n                label={label}\n                helpText={helpText}\n                inputId={this.props.id}\n                setByEnv={this.props.setByEnv}\n            >\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type='text'\n                    placeholder={placeholder}\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {defineMessages, FormattedHTMLMessage, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {removeLicenseFile, uploadLicenseFile} from 'actions/admin_actions.jsx';\nimport ErrorStore from 'stores/error_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst holders = defineMessages({\n    removing: {\n        id: 'admin.license.removing',\n        defaultMessage: 'Removing License...',\n    },\n    uploading: {\n        id: 'admin.license.uploading',\n        defaultMessage: 'Uploading License...',\n    },\n});\n\nclass LicenseSettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleRemove = this.handleRemove.bind(this);\n\n        this.state = {\n            fileSelected: false,\n            fileName: null,\n            serverError: null,\n        };\n    }\n\n    handleChange() {\n        const element = $(ReactDOM.findDOMNode(this.refs.fileInput));\n        if (element.prop('files').length > 0) {\n            this.setState({fileSelected: true, fileName: element.prop('files')[0].name});\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        const element = $(ReactDOM.findDOMNode(this.refs.fileInput));\n        if (element.prop('files').length === 0) {\n            return;\n        }\n        const file = element.prop('files')[0];\n\n        $('#upload-button').button('loading');\n\n        uploadLicenseFile(\n            file,\n            () => {\n                Utils.clearFileInput(element[0]);\n                $('#upload-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: null});\n                window.location.reload(true);\n            },\n            (error) => {\n                Utils.clearFileInput(element[0]);\n                $('#upload-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: error.message});\n            }\n        );\n    }\n\n    handleRemove(e) {\n        e.preventDefault();\n\n        $('#remove-button').button('loading');\n\n        removeLicenseFile(\n            () => {\n                $('#remove-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: null});\n                ErrorStore.clearLastError(true);\n                window.location.reload(true);\n            },\n            (error) => {\n                $('#remove-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: error.message});\n            }\n        );\n    }\n\n    render() {\n        var serverError = '';\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n\n        var btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let edition;\n        let licenseType;\n        let licenseKey;\n\n        const issued = Utils.displayDate(parseInt(this.props.license.IssuedAt, 10)) + ' ' + Utils.displayTime(parseInt(this.props.license.IssuedAt, 10), true);\n        const startsAt = Utils.displayDate(parseInt(this.props.license.StartsAt, 10));\n        const expiresAt = Utils.displayDate(parseInt(this.props.license.ExpiresAt, 10));\n\n        if (this.props.license.IsLicensed === 'true') {\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = 'Mattermost Enterprise Edition. Enterprise features on this server have been unlocked with a license key and a valid subscription.';\n            licenseType = (\n                <div>\n                    <p>\n                        {'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.\\n\\nYour subscription details are as follows:'}\n                    </p>\n                    {`Name: ${this.props.license.Name}`}<br/>\n                    {`Company or organization name: ${this.props.license.Company}`}<br/>\n                    {`Number of users: ${this.props.license.Users}`}<br/>\n                    {`License issued: ${issued}`}<br/>\n                    {`Start date of license: ${startsAt}`}<br/>\n                    {`Expiry date of license: ${expiresAt}`}<br/>\n                    <br/>\n                    {'See also '}<a href='https://about.mattermost.com/enterprise-edition-terms/'>{'Enterprise Edition Terms of Service'}</a>{' and '}<a href='https://about.mattermost.com/privacy/'>{'Privacy Policy.'}</a>\n                </div>\n            );\n\n            licenseKey = (\n                <div className='col-sm-8'>\n                    <button\n                        className='btn btn-danger'\n                        onClick={this.handleRemove}\n                        id='remove-button'\n                        data-loading-text={'<span class=\\'fa fa-refresh icon--rotate\\' title=\\'' + Utils.localizeMessage('generic_icons.reload', 'Reload Icon') + '\\'></span> ' + this.props.intl.formatMessage(holders.removing)}\n                    >\n                        <FormattedMessage\n                            id='admin.license.keyRemove'\n                            defaultMessage='Remove Enterprise License and Downgrade Server'\n                        />\n                    </button>\n                    <br/>\n                    <br/>\n                    <p className='help-text'>\n                        {'If you migrate servers you may need to remove your license key to install it elsewhere. You can remove the key here, which will revert functionality to that of Team Edition.'}\n                    </p>\n                </div>\n            );\n        } else {\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = (\n                <p>\n                    {'Mattermost Enterprise Edition. Unlock enterprise features in this software through the purchase of a subscription from '}\n                    <a\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href='https://mattermost.com/'\n                    >\n                        {'https://mattermost.com/'}\n                    </a>\n                </p>\n            );\n\n            licenseType = 'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.';\n\n            let fileName;\n            if (this.state.fileName) {\n                fileName = this.state.fileName;\n            } else {\n                fileName = (\n                    <FormattedMessage\n                        id='admin.license.noFile'\n                        defaultMessage='No file uploaded'\n                    />\n                );\n            }\n\n            licenseKey = (\n                <div className='col-sm-8'>\n                    <div className='file__upload'>\n                        <button className='btn btn-primary'>\n                            <FormattedMessage\n                                id='admin.license.choose'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            accept='.mattermost-license'\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button\n                        className={btnClass}\n                        disabled={!this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        id='upload-button'\n                        data-loading-text={'<span class=\\'fa fa-refresh icon--rotate\\' title=\\'' + Utils.localizeMessage('generic_icons.reload', 'Reload Icon') + '\\'></span> ' + this.props.intl.formatMessage(holders.uploading)}\n                    >\n                        <FormattedMessage\n                            id='admin.license.upload'\n                            defaultMessage='Upload'\n                        />\n                    </button>\n                    <div className='help-text no-margin'>\n                        {fileName}\n                    </div>\n                    <br/>\n                    {serverError}\n                    <p className='help-text no-margin'>\n                        <FormattedHTMLMessage\n                            id='admin.license.uploadDesc'\n                            defaultMessage='Upload a license key for Mattermost Enterprise Edition to upgrade this server. <a href=\"http://mattermost.com\" target=\"_blank\">Visit us online</a> to learn more about the benefits of Enterprise Edition or to purchase a key.'\n                        />\n                    </p>\n                </div>\n            );\n        }\n\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.license.title'\n                        defaultMessage='Edition and License'\n                    />\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                >\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.license.edition'\n                                defaultMessage='Edition: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            {edition}\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.license.type'\n                                defaultMessage='License: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            {licenseType}\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.license.key'\n                                defaultMessage='License Key: '\n                            />\n                        </label>\n                        {licenseKey}\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nLicenseSettings.propTypes = {\n    license: PropTypes.object.isRequired,\n    intl: intlShape.isRequired,\n    config: PropTypes.object,\n};\n\nexport default injectIntl(LicenseSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getSchemeTeams as loadSchemeTeams, getSchemes as loadSchemes} from 'mattermost-redux/actions/schemes';\nimport {getSchemes} from 'mattermost-redux/selectors/entities/schemes';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PermissionSchemesSettings from './permission_schemes_settings.jsx';\n\nfunction mapStateToProps(state) {\n    const schemes = getSchemes(state);\n    const config = getConfig(state);\n\n    return {\n        schemes,\n        jobsAreEnabled: config.RunJobs === 'true',\n        clusterIsEnabled: config.EnableCluster === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadSchemes,\n            loadSchemeTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSchemesSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary';\n\nconst PAGE_SIZE = 30;\nconst PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE = 501;\n\nexport default class PermissionSchemesSettings extends React.PureComponent {\n    static propTypes = {\n        schemes: PropTypes.object.isRequired,\n        jobsAreEnabled: PropTypes.bool,\n        clusterIsEnabled: PropTypes.bool,\n        actions: PropTypes.shape({\n            loadSchemes: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            loadingMore: false,\n            page: 0,\n            phase2MigrationIsComplete: false,\n        };\n    }\n\n    static defaultProps = {\n        schemes: {},\n    };\n\n    async UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        let schemes;\n        let phase2MigrationIsComplete = true; // Assume migration is complete unless HTTP status code says otherwise.\n        try {\n            schemes = await this.props.actions.loadSchemes('team', 0, PAGE_SIZE);\n            if (schemes.error.status_code === PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE) {\n                phase2MigrationIsComplete = false;\n            }\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loading: false, phase2MigrationIsComplete}));\n        } catch (err) {\n            this.setState({loading: false, phase2MigrationIsComplete});\n        }\n    }\n\n    loadMoreSchemes = () => {\n        this.setState({loadingMore: true});\n        this.props.actions.loadSchemes('team', this.state.page + 1, PAGE_SIZE).then((schemes) => {\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loadingMore: false, page: this.state.page + 1}));\n        });\n    }\n\n    // |RunJobs && !EnableCluster|(*App).IsPhase2MigrationCompleted|View                                                   |\n    // |-------------------------|---------------------------------|-------------------------------------------------------|\n    // |true                     |true                             |null                                                   |\n    // |false                    |true                             |null (Jobs were disabled after a successful migration.)|\n    // |false                    |false                            |On hold view.                                          |\n    // |true                     |false                            |In progress view.                                      |\n    teamOverrideSchemesMigrationView = () => {\n        if (this.state.phase2MigrationIsComplete) {\n            return null;\n        }\n\n        const docLink = (\n            <Link\n                to='https://docs.mattermost.com/administration/config-settings.html#jobs'\n                target='_blank'\n            >\n                <FormattedMessage\n                    id='admin.permissions.documentationLinkText'\n                    defaultMessage='documentation'\n                />\n            </Link>\n        );\n\n        if (this.props.jobsAreEnabled && !this.props.clusterIsEnabled) {\n            return this.teamOverrideUnavalableView(\n                'admin.permissions.teamOverrideSchemesInProgress',\n                'Migration job in progress: Team Override Schemes are not available until the job server completes the permissions migration. Learn more in the {documentationLink}.',\n                docLink\n            );\n        }\n\n        return this.teamOverrideUnavalableView(\n            'admin.permissions.teamOverrideSchemesNoJobsEnabled',\n            'Migration job on hold: Team Override Schemes are not available until the job server can execute the permissions migration. The job will be automatically started when the job server is enabled. Learn more in the {documentationLink}.',\n            docLink,\n        );\n    }\n\n    teamOverrideUnavalableView = (id, defaultMsg, documentationLink) => {\n        return (\n            <div className='team-override-unavailable'>\n                <div className='team-override-unavailable__inner'>\n                    <FormattedMessage\n                        id={id}\n                        defaultMessage={defaultMsg}\n                        values={{documentationLink}}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    render = () => {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n        const schemes = Object.values(this.props.schemes).map((scheme) => (\n            <PermissionsSchemeSummary\n                scheme={scheme}\n                history={this.props.history}\n                key={scheme.id}\n            />\n        ));\n\n        const teamOverrideView = this.teamOverrideSchemesMigrationView();\n\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.permissions.permissionSchemes'\n                        defaultMessage='Permission Schemes'\n                    />\n                </h3>\n\n                <div className={'banner info'}>\n                    <div className='banner__content'>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='admin.permissions.introBanner'\n                                defaultMessage='Permission Schemes set the default permissions for Team Admins, Channel Admins and everyone else. Learn more about permission schemes in our [documentation](!https://about.mattermost.com/default-advanced-permissions).'\n                            />\n                        </span>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemSchemeBannerTitle'\n                                    defaultMessage='System Scheme'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMarkdownMessage\n                                    id='admin.permissions.systemSchemeBannerText'\n                                    defaultMessage='Set the default permissions inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <Link\n                                className='btn btn-primary'\n                                to='/admin_console/permissions/system-scheme'\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.systemSchemeBannerButton'\n                                    defaultMessage='Edit Scheme'\n                                />\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.teamOverrideSchemesTitle'\n                                    defaultMessage='Team Override Schemes'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMarkdownMessage\n                                    id='admin.permissions.teamOverrideSchemesBannerText'\n                                    defaultMessage='Use when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <Link\n                                className='btn btn-primary'\n                                to='/admin_console/permissions/team-override-scheme'\n                                disabled={teamOverrideView !== null}\n                                onClick={(e) => {\n                                    if (teamOverrideView !== null) {\n                                        e.preventDefault();\n                                        return false;\n                                    }\n                                    return true;\n                                }}\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamOverrideSchemesNewButton'\n                                    defaultMessage='New Team Override Scheme'\n                                />\n                            </Link>\n                        </div>\n                    </div>\n                    {schemes.length === 0 && teamOverrideView === null &&\n                        <div className='no-team-schemes'>\n                            <FormattedMessage\n                                id='admin.permissions.teamOverrideSchemesNoSchemes'\n                                defaultMessage='No team override schemes created.'\n                            />\n                        </div>}\n                    {teamOverrideView}\n                    {schemes.length > 0 && schemes}\n                    {!this.state.loadingMore && schemes.length === (PAGE_SIZE * (this.state.page + 1)) &&\n                        <button\n                            className='more-schemes theme style--none color--link'\n                            onClick={this.loadMoreSchemes}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.loadMoreSchemes'\n                                defaultMessage='Load more schemes'\n                            />\n                        </button>}\n                    {this.state.loadingMore &&\n                        <button className='more-schemes theme style--none color--link'>\n                            <span className='fa fa-refresh icon--rotate'/>\n                            <FormattedMessage\n                                id='admin.permissions.loadingMoreSchemes'\n                                defaultMessage='Loading...'\n                            />\n                        </button>}\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deleteScheme} from 'mattermost-redux/actions/schemes';\n\nimport {makeGetSchemeTeams} from 'mattermost-redux/selectors/entities/schemes';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return function mapStateToProps(state, ownProps) {\n        return {\n            teams: getSchemeTeams(state, {schemeId: ownProps.scheme.id}),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteScheme,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionsSchemeSummary);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport Constants from 'utils/constants.jsx';\n\nconst MAX_TEAMS_PER_SCHEME_SUMMARY = 8;\n\nexport default class PermissionsSchemeSummary extends React.Component {\n    static propTypes = {\n        scheme: PropTypes.object.isRequired,\n        teams: PropTypes.array,\n        actions: PropTypes.shape({\n            deleteScheme: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showConfirmModal: false,\n            deleting: false,\n            serverError: null,\n        };\n    }\n\n    renderConfirmModal = () => {\n        const title = (\n            <FormattedMessage\n                id='admin.permissions.permissionsSchemeSummary.deleteSchemeTitle'\n                defaultMessage='Delete {scheme} scheme?'\n                values={{scheme: this.props.scheme.display_name}}\n            />\n        );\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='permission-scheme-summary-error-message'>\n                    <i className='fa fa-exclamation-circle'/> {this.state.serverError}\n                </div>\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.permissions.permissionsSchemeSummary.deleteConfirmQuestion'\n                        defaultMessage='The permissions in the teams using this scheme will reset to the defaults in the System Scheme. Are you sure you want to delete the {schemeName} scheme?'\n                        values={{schemeName: this.props.scheme.display_name}}\n                    />\n                </p>\n                {serverError}\n            </div>\n        );\n\n        let confirmButton = (\n            <FormattedMessage\n                id='admin.permissions.permissionsSchemeSummary.deleteConfirmButton'\n                defaultMessage='Yes, Delete'\n            />\n        );\n\n        if (this.state.deleting) {\n            confirmButton = (\n                <span>\n                    <span className='fa fa-refresh icon--rotate'/>\n                    <FormattedMessage\n                        id='admin.permissions.permissionsSchemeSummary.deleting'\n                        defaultMessage='Deleting...'\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleDeleteConfirmed}\n                onCancel={this.handleDeleteCanceled}\n            />\n        );\n    }\n\n    stopPropagation = (e) => {\n        e.stopPropagation();\n    }\n\n    handleDeleteCanceled = () => {\n        this.setState({\n            showConfirmModal: false,\n        });\n    }\n\n    handleDeleteConfirmed = async () => {\n        this.setState({deleting: true, serverError: null});\n        const data = await this.props.actions.deleteScheme(this.props.scheme.id);\n        if (data.error) {\n            this.setState({deleting: false, serverError: data.error.message});\n        } else {\n            this.setState({deleting: false, showConfirmModal: false});\n        }\n    }\n\n    delete = (e) => {\n        e.stopPropagation();\n        this.setState({showConfirmModal: true, serverError: null});\n    }\n\n    goToEdit = () => {\n        this.props.history.push('/admin_console/permissions/team-override-scheme/' + this.props.scheme.id);\n    }\n\n    render = () => {\n        const scheme = this.props.scheme;\n\n        let teams = this.props.teams ? this.props.teams.map((team) => (\n            <span\n                className='team'\n                key={team.id}\n            >\n                {team.display_name}\n            </span>\n        )) : [];\n\n        let extraTeams = null;\n        if (teams.length > MAX_TEAMS_PER_SCHEME_SUMMARY) {\n            extraTeams = (\n                <OverlayTrigger\n                    trigger={['hover', 'focus']}\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={\n                        <Tooltip\n                            className='team-scheme-extra-teams-overlay'\n                            id={scheme.id + '-extra-teams-overlay'}\n                        >\n                            {teams.slice(MAX_TEAMS_PER_SCHEME_SUMMARY)}\n                        </Tooltip>\n                    }\n                >\n                    <span\n                        className='team'\n                        key='extra-teams'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionsSchemeSummary.moreTeams'\n                            defaultMessage='+{number} more'\n                            values={{number: teams.length - MAX_TEAMS_PER_SCHEME_SUMMARY}}\n                        />\n                    </span>\n                </OverlayTrigger>\n            );\n            teams = teams.slice(0, MAX_TEAMS_PER_SCHEME_SUMMARY);\n        }\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <div\n                className='permissions-scheme-summary'\n                onClick={this.goToEdit}\n            >\n                <div onClick={this.stopPropagation}>{confirmModal}</div>\n                <div\n                    className='permissions-scheme-summary--header'\n                >\n                    <div className='title'>\n                        {scheme.display_name}\n                    </div>\n                    <div className='actions'>\n                        <Link\n                            className='edit-button'\n                            to={'/admin_console/permissions/team-override-scheme/' + scheme.id}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.edit'\n                                defaultMessage='Edit'\n                            />\n                        </Link>\n                        {'-'}\n                        <a\n                            className='delete-button'\n                            onClick={this.delete}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className='permissions-scheme-summary--description'>\n                    {scheme.description}\n                </div>\n                <div className='permissions-scheme-summary--teams'>\n                    {teams}\n                    {extraTeams}\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionSystemSchemeSettings from './permission_system_scheme_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        roles: getRoles(state),\n        rolesRequest: state.requests.roles.getRolesByNames,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            editRole,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSystemSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport {PermissionsScope, DefaultRolePermissions} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport SaveButton from 'components/save_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport AccordionToggleIcon from 'components/svg/accordion_toggle_icon.jsx';\nimport FormError from 'components/form_error.jsx';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree from '../permissions_tree.jsx';\n\nexport default class PermissionSystemSchemeSettings extends React.Component {\n    static propTypes = {\n        roles: PropTypes.object.isRequired,\n        license: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showResetDefaultModal: false,\n            loaded: false,\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: {},\n            openRoles: {\n                all_users: true,\n                system_admin: true,\n                team_admin: true,\n                channel_admin: true,\n            },\n        };\n        this.rolesNeeded = ['system_admin', 'system_user', 'team_admin', 'team_user', 'channel_admin', 'channel_user'];\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(this.rolesNeeded);\n        if (this.rolesNeeded.every((roleName) => this.props.roles[roleName])) {\n            this.loadRolesIntoState(this.props);\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (!this.state.loaded && this.rolesNeeded.every((roleName) => nextProps.roles[roleName])) {\n            this.loadRolesIntoState(nextProps);\n        }\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    loadRolesIntoState(props) {\n        const {system_admin, team_admin, channel_admin, system_user, team_user, channel_user} = props.roles; // eslint-disable-line camelcase\n        this.setState({\n            selectedPermission: null,\n            loaded: true,\n            roles: {\n                system_admin,\n                team_admin,\n                channel_admin,\n                all_users: {\n                    name: 'all_users',\n                    displayName: 'All members',\n                    permissions: system_user.permissions.concat(team_user.permissions).concat(channel_user.permissions),\n                },\n            },\n        });\n    }\n\n    deriveRolesFromAllUsers = (role) => {\n        return {\n            system_user: {\n                ...this.props.roles.system_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'system_scope'),\n            },\n            team_user: {\n                ...this.props.roles.team_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...this.props.roles.channel_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    handleSubmit = async () => {\n        const teamAdminPromise = this.props.actions.editRole(this.state.roles.team_admin);\n        const channelAdminPromise = this.props.actions.editRole(this.state.roles.channel_admin);\n        const roles = this.deriveRolesFromAllUsers(this.state.roles.all_users);\n        const systemUserPromise = this.props.actions.editRole(roles.system_user);\n        const teamUserPromise = this.props.actions.editRole(roles.team_user);\n        const channelUserPromise = this.props.actions.editRole(roles.channel_user);\n        this.setState({saving: true});\n\n        Promise.all([teamAdminPromise, channelAdminPromise, systemUserPromise, teamUserPromise, channelUserPromise]).then(\n            (results) => {\n                let serverError = null;\n                let saveNeeded = false;\n                for (const result of results) {\n                    if (result.error) {\n                        serverError = result.error.message;\n                        saveNeeded = true;\n                        break;\n                    }\n                }\n                this.setState({serverError, saving: false, saveNeeded});\n                this.props.actions.setNavigationBlocked(saveNeeded);\n            }\n        );\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.state.roles};\n        const role = {...roles[roleId]};\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        roles[roleId] = role;\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    resetDefaults = () => {\n        const newRolesState = JSON.parse(JSON.stringify({...this.state.roles}));\n\n        Object.entries(DefaultRolePermissions).forEach(([roleName, permissions]) => {\n            newRolesState[roleName].permissions = permissions;\n        });\n\n        this.setState({roles: newRolesState, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    render = () => {\n        const hasCustomSchemes = this.props.license.CustomPermissionsSchemes === 'true';\n        if (!this.state.loaded) {\n            return <LoadingScreen/>;\n        }\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className={'admin-console-header ' + (hasCustomSchemes ? 'with-back' : '')}>\n                    {hasCustomSchemes &&\n                        <BlockableLink\n                            to='/admin_console/permissions/schemes'\n                            className='fa fa-chevron-left back'\n                        />}\n                    <FormattedMessage\n                        id='admin.permissions.systemScheme'\n                        defaultMessage='System Scheme'\n                    />\n                </h3>\n\n                <div className={'banner info'}>\n                    <div className='banner__content'>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='admin.permissions.systemScheme.introBanner'\n                                defaultMessage='Configure the default permissions for Team Admins, Channel Admins and other members. This scheme is inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied in specific teams.'\n                            />\n                        </span>\n                    </div>\n                </div>\n\n                <div\n                    className={'permissions-block ' + (this.state.openRoles.all_users ? '' : 'closed')}\n                    id='all_users'\n                >\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('all_users')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersTitle'\n                                    defaultMessage='All Members'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersDescription'\n                                    defaultMessage='Permissions granted to all members, including administrators and newly created users.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        selected={this.state.selectedPermission}\n                        role={this.state.roles.all_users}\n                        scope={'system_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block ' + (this.state.openRoles.channel_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('channel_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsTitle'\n                                    defaultMessage='Channel Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsDescription'\n                                    defaultMessage='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={this.state.roles.all_users}\n                        role={this.state.roles.channel_admin}\n                        scope={'channel_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block ' + (this.state.openRoles.team_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('team_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsTitle'\n                                    defaultMessage='Team Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsDescription'\n                                    defaultMessage='Permissions granted to team creators and any users promoted to Team Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={this.state.roles.all_users}\n                        role={this.state.roles.team_admin}\n                        scope={'team_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block ' + (this.state.openRoles.system_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('system_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.systemAdminsTitle'\n                                    defaultMessage='System Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.systemAdminsDescription'\n                                    defaultMessage='Full permissions granted to System Administrators.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        readOnly={true}\n                        role={this.state.roles.system_admin}\n                        scope={'system_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/permissions/schemes'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <a\n                        onClick={() => this.setState({showResetDefaultModal: true})}\n                        className='cancel-button reset-defaults-btn'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButton'\n                            defaultMessage='Reset to Defaults'\n                        />\n                    </a>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n\n                <Modal\n                    dialogClassName='admin-modal'\n                    show={this.state.showResetDefaultModal}\n                    onHide={() => this.setState({showResetDefaultModal: false})}\n                >\n                    <Modal.Header\n                        closeButton={true}\n                    >\n                        <h4 className='modal-title'>\n                            <FormattedMessage\n                                id='admin.permissions.systemScheme.resetDefaultsButtonModalTitle'\n                                defaultMessage='Reset to Default?'\n                            />\n                        </h4>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButtonModalBody'\n                            defaultMessage='This will reset all selections on this page to their default settings. Are you sure you want to reset?'\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-cancel'\n                            onClick={() => this.setState({showResetDefaultModal: false})}\n                        >\n                            <FormattedMessage\n                                id='confirm_modal.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            id='linkModalCloseButton'\n                            type='button'\n                            className='btn btn-default'\n                            onClick={() => {\n                                this.resetDefaults();\n                                this.setState({showResetDefaultModal: false});\n                            }}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.systemScheme.resetDefaultsConfirmationButton'\n                                defaultMessage='Yes, Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </Modal>\n\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {PermissionsScope} from 'utils/constants.jsx';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionRow from './permission_row.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nexport default class PermissionGroup extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        permissions: PropTypes.array.isRequired,\n        readOnly: PropTypes.bool,\n        role: PropTypes.object,\n        parentRole: PropTypes.object,\n        scope: PropTypes.string.isRequired,\n        combined: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        root: PropTypes.bool,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            prevPermissions: [],\n        };\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected !== nextProps.selected) {\n            if (this.getRecursivePermissions(this.props.permissions).indexOf(nextProps.selected) !== -1) {\n                this.setState({expanded: true});\n            }\n        }\n    }\n\n    toggleExpanded = (e) => {\n        e.stopPropagation();\n        this.setState({expanded: !this.state.expanded});\n    }\n\n    toggleSelectRow = (id) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange([id]);\n    }\n\n    getRecursivePermissions = (permissions) => {\n        let result = [];\n        for (const permission of permissions) {\n            if (typeof permission === 'string') {\n                result.push(permission);\n            } else {\n                result = result.concat(this.getRecursivePermissions(permission.permissions));\n            }\n        }\n        return result;\n    }\n\n    toggleSelectSubGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(ids);\n    }\n\n    toggleSelectGroup = () => {\n        const {readOnly, permissions, role, onChange} = this.props;\n        if (readOnly) {\n            return;\n        }\n        if (this.getStatus(permissions) === 'checked') {\n            const permissionsToToggle = [];\n            for (const permission of this.getRecursivePermissions(permissions)) {\n                if (!this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({expanded: true});\n            onChange(permissionsToToggle);\n        } else if (this.getStatus(permissions) === '') {\n            const permissionsToToggle = [];\n            let expanded = true;\n            if (this.state.prevPermissions.length === 0) {\n                for (const permission of this.getRecursivePermissions(permissions)) {\n                    if (!this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                        expanded = false;\n                    }\n                }\n            } else {\n                for (const permission of this.getRecursivePermissions(permissions)) {\n                    if (this.state.prevPermissions.indexOf(permission) !== -1 && !this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                    }\n                }\n            }\n            onChange(permissionsToToggle);\n            this.setState({prevPermissions: [], expanded});\n        } else {\n            const permissionsToToggle = [];\n            for (const permission of this.getRecursivePermissions(permissions)) {\n                if (role.permissions.indexOf(permission) === -1 && !this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({prevPermissions: role.permissions, expanded: false});\n            onChange(permissionsToToggle);\n        }\n    }\n\n    isInScope = (permission) => {\n        if (this.props.scope === 'channel_scope' && PermissionsScope[permission] !== 'channel_scope') {\n            return false;\n        }\n        if (this.props.scope === 'team_scope' && PermissionsScope[permission] === 'system_scope') {\n            return false;\n        }\n        return true;\n    }\n\n    renderPermission = (permission, additionalValues) => {\n        if (!this.isInScope(permission)) {\n            return null;\n        }\n        const comesFromParent = this.fromParent(permission);\n        const active = comesFromParent || this.props.role.permissions.indexOf(permission) !== -1;\n        return (\n            <PermissionRow\n                key={permission}\n                id={permission}\n                uniqId={this.props.uniqId + '-' + permission}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly || comesFromParent}\n                inherited={comesFromParent ? this.props.parentRole : null}\n                value={active ? 'checked' : ''}\n                onChange={this.toggleSelectRow}\n                additionalValues={additionalValues}\n            />\n        );\n    }\n\n    renderGroup = (g) => {\n        return (\n            <PermissionGroup\n                key={g.id}\n                id={g.id}\n                uniqId={this.props.uniqId + '-' + g.id}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly}\n                permissions={g.permissions}\n                additionalValues={this.props.additionalValues}\n                role={this.props.role}\n                parentRole={this.props.parentRole}\n                scope={this.props.scope}\n                onChange={this.toggleSelectSubGroup}\n                combined={g.combined}\n                root={false}\n            />\n        );\n    }\n\n    fromParent = (id) => {\n        return this.props.parentRole && this.props.parentRole.permissions.indexOf(id) !== -1;\n    }\n\n    getStatus = (permissions) => {\n        let anyChecked = false;\n        let anyUnchecked = false;\n        for (const permission of permissions) {\n            if (typeof permission === 'string') {\n                if (!this.isInScope(permission)) {\n                    continue;\n                }\n                anyChecked = anyChecked || this.fromParent(permission) || this.props.role.permissions.indexOf(permission) !== -1;\n                anyUnchecked = anyUnchecked || (!this.fromParent(permission) && this.props.role.permissions.indexOf(permission) === -1);\n            } else {\n                const status = this.getStatus(permission.permissions);\n                if (status === 'intermediate') {\n                    return 'intermediate';\n                }\n                if (status === 'checked') {\n                    anyChecked = true;\n                }\n                if (status === '') {\n                    anyUnchecked = true;\n                }\n            }\n        }\n        if (anyChecked && anyUnchecked) {\n            return 'intermediate';\n        }\n        if (anyChecked && !anyUnchecked) {\n            return 'checked';\n        }\n        return '';\n    }\n\n    hasPermissionsOnScope = () => {\n        return this.getRecursivePermissions(this.props.permissions).some((permission) => this.isInScope(permission));\n    }\n\n    allPermissionsFromParent = (permissions) => {\n        for (const permission of permissions) {\n            if (typeof permission !== 'string') {\n                if (!this.allPermissionsFromParent(permission.permissions)) {\n                    return false;\n                }\n                continue;\n            }\n            if (this.isInScope(permission) && !this.fromParent(permission)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    render = () => {\n        const {id, uniqId, permissions, readOnly, combined, root, selected, additionalValues} = this.props;\n        if (!this.hasPermissionsOnScope()) {\n            return null;\n        }\n        const permissionsRows = permissions.map((group) => {\n            if (typeof group === 'string') {\n                const addVals = additionalValues && additionalValues[group] ? additionalValues[group] : {};\n                return this.renderPermission(group, addVals);\n            }\n            return this.renderGroup(group);\n        });\n        if (root) {\n            return (\n                <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                    {permissionsRows}\n                </div>\n            );\n        }\n\n        let inherited = null;\n        if (this.allPermissionsFromParent(this.props.permissions) && this.props.combined) {\n            inherited = this.props.parentRole;\n        }\n\n        let classes = '';\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        if (readOnly || this.allPermissionsFromParent(this.props.permissions)) {\n            classes += ' read-only';\n        }\n\n        if (combined) {\n            classes += ' combined';\n        }\n\n        return (\n            <div className='permission-group'>\n                {!root &&\n                    <div\n                        className={'permission-group-row ' + classes}\n                        onClick={this.toggleSelectGroup}\n                        id={uniqId}\n                    >\n                        {!combined &&\n                            <div\n                                className={'fa fa-caret-right permission-arrow ' + (this.state.expanded ? 'open' : '')}\n                                onClick={this.toggleExpanded}\n                            />}\n                        <PermissionCheckbox value={this.getStatus(this.props.permissions)}/>\n                        <span className='permission-name'>\n                            <FormattedMessage id={'admin.permissions.group.' + id + '.name'}/>\n                        </span>\n                        <PermissionDescription\n                            inherited={inherited}\n                            id={id}\n                            selectRow={this.props.selectRow}\n                            rowType='group'\n                        />\n                    </div>}\n                {!combined &&\n                    <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                        {permissionsRows}\n                    </div>}\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxCheckedIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-285.000000, -933.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---Public-Channels'\n                                        transform='translate(12.000000, 35.000000)'\n                                    >\n                                        <g\n                                            id='Stacked-Group'\n                                            transform='translate(0.000000, 5.000000)'\n                                        >\n                                            <g id='data-table/1st/row-checkbox-label-base'>\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                        id='checkbox---checked'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxPartialIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-298.000000, -1273.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---@all-@channel-Mentions'\n                                        transform='translate(0.000000, 375.000000)'\n                                    >\n                                        <g id='Stacked-Group'>\n                                            <g\n                                                id='data-table/1st/row-checkbox-label-base'\n                                                transform='translate(25.000000, 5.000000)'\n                                            >\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 C20.1,3 21,3.9 21,5 L21,19 C21,20.1 20.1,21 19,21 L5,21 C3.9,21 3,20.1 3,19 L3,5 C3,3.9 3.9,3 5,3 L19,3 Z M7,11 L7,13 L17,13 L17,11 L7,11 Z'\n                                                        id='checkbox---partial'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nexport default class PermissionRow extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        readOnly: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    toggleSelect = () => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(this.props.id);\n    }\n\n    render = () => {\n        const {id, uniqId, inherited, value, readOnly, selected, additionalValues} = this.props;\n        let classes = 'permission-row';\n        if (readOnly) {\n            classes += ' read-only';\n        }\n\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        return (\n            <div\n                className={classes}\n                onClick={this.toggleSelect}\n                id={uniqId}\n            >\n                <PermissionCheckbox value={value}/>\n                <span className='permission-name'>\n                    <FormattedMessage\n                        id={'admin.permissions.permission.' + id + '.name'}\n                    />\n                </span>\n                <PermissionDescription\n                    inherited={inherited}\n                    id={id}\n                    selectRow={this.props.selectRow}\n                    rowType='permission'\n                    additionalValues={additionalValues}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditPostTimeLimitButton from './edit_post_time_limit_button';\n\nfunction mapStateToProps(state, ownProps) {\n    const {PostEditTimeLimit} = getConfig(state);\n\n    return {\n        ...ownProps,\n        timeLimit: parseInt(PostEditTimeLimit, 10),\n    };\n}\n\nexport default connect(mapStateToProps)(EditPostTimeLimitButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\n\nexport default class EditPostTimeLimitButton extends React.Component {\n    static propTypes = {\n        timeLimit: PropTypes.number.isRequired,\n        onClick: PropTypes.func,\n    };\n\n    render = () => {\n        let messageID;\n        if (this.props.timeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            messageID = 'edit_post.time_limit_button.no_limit';\n        } else {\n            messageID = 'edit_post.time_limit_button.for_n_seconds';\n        }\n\n        return (\n            <button\n                className='edit-post-time-limit-button'\n                onClick={this.props.onClick}\n            >\n                <i className='fa fa-gear'/>\n                <FormattedMessage\n                    id={messageID}\n                    values={{n: this.props.timeLimit}}\n                />\n            </button>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, updateConfig} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\n\nimport EditPostTimeLimitModal from './edit_post_time_limit_modal';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        ...ownProps,\n        config: Selectors.getConfig(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateConfig,\n            getConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPostTimeLimitModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedHTMLMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst INT32_MAX = 2147483647;\n\nexport default class EditPostTimeLimitModal extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        show: PropTypes.bool,\n        onClose: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateConfig: PropTypes.func.isRequired,\n            getConfig: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            postEditTimeLimit: parseInt(props.config.ServiceSettings.PostEditTimeLimit, 10),\n            saving: false,\n            errorMessage: '',\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.props.actions.getConfig();\n    }\n\n    save = async () => {\n        this.setState({saving: true, errorMessage: ''});\n\n        const val = parseInt(this.state.postEditTimeLimit, 10);\n        if (val !== Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            if (val.toString() === 'NaN' || val <= 0 || val > INT32_MAX) {\n                this.setState({errorMessage: localizeMessage('edit_post.time_limit_modal.invalid_time_limit', 'Invalid time limit'), saving: false});\n                return false;\n            }\n        }\n\n        const newConfig = JSON.parse(JSON.stringify(this.props.config));\n        newConfig.ServiceSettings.PostEditTimeLimit = val;\n\n        const {error: err} = await this.props.actions.updateConfig(newConfig);\n        if (err) {\n            this.setState({errorMessage: err, saving: false});\n        } else {\n            this.setState({saving: false});\n            this.props.onClose();\n        }\n\n        return true;\n    }\n\n    handleOptionChange = (e) => {\n        const {value} = e.target;\n        if (value === Constants.ALLOW_EDIT_POST_ALWAYS) {\n            this.setState({postEditTimeLimit: Constants.UNSET_POST_EDIT_TIME_LIMIT});\n        } else {\n            this.setState({postEditTimeLimit: ''});\n        }\n    }\n\n    handleSecondsChange = (e) => {\n        const {value} = e.target;\n        this.setState({postEditTimeLimit: value});\n    }\n\n    render = () => {\n        return (\n            <Modal\n                dialogClassName='admin-modal edit-post-time-limit-modal'\n                show={this.props.show}\n            >\n                <Modal.Header\n                    closeButton={true}\n                >\n                    <h4 className='modal-title'>\n                        <FormattedMessage\n                            id='edit_post.time_limit_modal.title'\n                            defaultMessage='Configure Global Edit Post Time Limit'\n                        />\n                    </h4>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormattedHTMLMessage\n                        id='edit_post.time_limit_modal.description'\n                        defaultMessage='Setting a time limit <strong>applies to all users</strong> who have the \"Edit Post\" permissions in any permission scheme.'\n                    />\n                    <div className='padding-left x2 padding-top padding-bottom'>\n                        <div className='padding-top x2'>\n                            <input\n                                id='anytime'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_ALWAYS}\n                                checked={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='anytime'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_anytime'\n                                    defaultMessage='Anytime'\n                                />\n                            </label>\n                        </div>\n                        <div className='padding-top'>\n                            <input\n                                id='timelimit'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_TIME_LIMIT}\n                                checked={this.state.postEditTimeLimit !== Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.preinput'\n                                    defaultMessage='Can edit for'\n                                />\n                            </label>\n                            <input\n                                type='number'\n                                className='form-control inline'\n                                min='0'\n                                step='1'\n                                max={INT32_MAX}\n                                id='editPostTimeLimit'\n                                readOnly={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleSecondsChange}\n                                value={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT ? '' : this.state.postEditTimeLimit}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.postinput'\n                                    defaultMessage='seconds after posting'\n                                />\n                            </label>\n                        </div>\n                        <div className='padding-top x2 light'>\n                            <FormattedMessage\n                                id='edit_post.time_limit_modal.subscript'\n                                defaultMessage='Set the length of time users have to edit their messages after posting.'\n                            />\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <div className='edit-post-time-limit-modal__error'>\n                        {this.state.errorMessage}\n                    </div>\n                    <button\n                        type='button'\n                        className='btn btn-cancel'\n                        onClick={this.props.onClose}\n                    >\n                        <FormattedMessage\n                            id='confirm_modal.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        id='linkModalCloseButton'\n                        type='button'\n                        className='btn btn-default'\n                        onClick={this.save}\n                        disabled={this.state.saving}\n                    >\n                        <FormattedMessage\n                            id={this.state.saving ? 'save_button.saving' : 'edit_post.time_limit_modal.save_button'}\n                            defaultMessage='Save Edit Time'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\nimport {getScheme, makeGetSchemeTeams} from 'mattermost-redux/selectors/entities/schemes';\n\nimport {getScheme as loadScheme, patchScheme, createScheme, getSchemeTeams as loadSchemeTeams} from 'mattermost-redux/actions/schemes';\n\nimport {updateTeamScheme} from 'mattermost-redux/actions/teams';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionTeamSchemeSettings from './permission_team_scheme_settings.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return (state, ownProps) => {\n        const schemeId = ownProps.match.params.scheme_id;\n        return {\n            schemeId,\n            scheme: schemeId ? getScheme(state, schemeId) : null,\n            teams: schemeId ? getSchemeTeams(state, {schemeId}) : null,\n            roles: getRoles(state),\n            rolesRequest: state.requests.roles.getRolesByNames,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            loadScheme,\n            loadSchemeTeams,\n            editRole,\n            patchScheme,\n            updateTeamScheme,\n            createScheme,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionTeamSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {PermissionsScope} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport SaveButton from 'components/save_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport AccordionToggleIcon from 'components/svg/accordion_toggle_icon.jsx';\nimport FormError from 'components/form_error.jsx';\nimport TeamSelectorModal from 'components/team_selector_modal';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree from '../permissions_tree.jsx';\n\nimport TeamInList from './team_in_list';\n\nexport default class PermissionTeamSchemeSettings extends React.Component {\n    static propTypes = {\n        schemeId: PropTypes.string,\n        scheme: PropTypes.object,\n        roles: PropTypes.object,\n        teams: PropTypes.array,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            loadScheme: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            patchScheme: PropTypes.func.isRequired,\n            createScheme: PropTypes.func.isRequired,\n            updateTeamScheme: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: null,\n            teams: null,\n            addTeamOpen: false,\n            selectedPermission: null,\n            openRoles: {\n                all_users: true,\n                team_admin: true,\n                channel_admin: true,\n            },\n        };\n    }\n\n    static defaultProps = {\n        scheme: null,\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(['team_admin', 'team_user', 'channel_admin', 'channel_user']);\n        if (this.props.schemeId) {\n            this.props.actions.loadScheme(this.props.schemeId).then((result) => {\n                this.props.actions.loadRolesIfNeeded([\n                    result.data.default_team_user_role,\n                    result.data.default_team_admin_role,\n                    result.data.default_channel_user_role,\n                    result.data.default_channel_admin_role,\n                ]);\n            });\n            this.props.actions.loadSchemeTeams(this.props.schemeId);\n        }\n    }\n\n    isLoaded = (props) => {\n        if (props.schemeId) {\n            if (props.scheme !== null &&\n                props.teams !== null &&\n                props.roles[props.scheme.default_team_user_role] &&\n                props.roles[props.scheme.default_team_admin_role] &&\n                props.roles[props.scheme.default_channel_user_role] &&\n                props.roles[props.scheme.default_channel_admin_role]) {\n                return true;\n            }\n            return false;\n        } else if (props.roles.team_user &&\n            props.roles.team_admin &&\n            props.roles.channel_user &&\n            props.roles.channel_admin) {\n            return true;\n        }\n        return false;\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    getStateRoles = () => {\n        if (this.state.roles !== null) {\n            return this.state.roles;\n        }\n\n        let teamUser = null;\n        let teamAdmin = null;\n        let channelUser = null;\n        let channelAdmin = null;\n\n        if (this.props.schemeId) {\n            if (this.isLoaded(this.props)) {\n                teamUser = this.props.roles[this.props.scheme.default_team_user_role];\n                teamAdmin = this.props.roles[this.props.scheme.default_team_admin_role];\n                channelUser = this.props.roles[this.props.scheme.default_channel_user_role];\n                channelAdmin = this.props.roles[this.props.scheme.default_channel_admin_role];\n            }\n        } else if (this.isLoaded(this.props)) {\n            teamUser = this.props.roles.team_user;\n            teamAdmin = this.props.roles.team_admin;\n            channelUser = this.props.roles.channel_user;\n            channelAdmin = this.props.roles.channel_admin;\n        } else {\n            return null;\n        }\n        return {\n            team_admin: teamAdmin,\n            channel_admin: channelAdmin,\n            all_users: {\n                name: 'all_users',\n                displayName: 'All members',\n                permissions: teamUser.permissions.concat(channelUser.permissions),\n            },\n        };\n    }\n\n    deriveRolesFromAllUsers = (baseTeam, baseChannel, role) => {\n        return {\n            team_user: {\n                ...baseTeam,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...baseChannel,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    handleNameChange = (e) => {\n        this.setState({schemeName: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleDescriptionChange = (e) => {\n        this.setState({schemeDescription: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleSubmit = async () => {\n        const roles = this.getStateRoles();\n        let teamAdmin = roles.team_admin;\n        let channelAdmin = roles.channel_admin;\n        const allUsers = roles.all_users;\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        let teamUser = null;\n        let channelUser = null;\n        let schemeId = null;\n\n        this.setState({saving: true});\n        if (this.props.schemeId) {\n            const derived = this.deriveRolesFromAllUsers(\n                this.props.roles[this.props.scheme.default_team_user_role],\n                this.props.roles[this.props.scheme.default_channel_user_role],\n                allUsers\n            );\n            teamUser = derived.team_user;\n            channelUser = derived.channel_user;\n            await this.props.actions.patchScheme(this.props.schemeId, {\n                display_name: schemeName,\n                description: schemeDescription,\n            });\n            schemeId = this.props.schemeId;\n        } else {\n            const derived = this.deriveRolesFromAllUsers(\n                this.props.roles.team_user,\n                this.props.roles.channel_user,\n                allUsers\n            );\n            teamUser = derived.team_user;\n            channelUser = derived.channel_user;\n            const result = await this.props.actions.createScheme({\n                display_name: schemeName,\n                description: schemeDescription,\n                scope: 'team',\n            });\n            if (result.error) {\n                this.setState({serverError: result.error.message, saving: false, saveNeeded: true});\n                this.props.actions.setNavigationBlocked(true);\n                return;\n            }\n            const newScheme = result.data;\n            schemeId = newScheme.id;\n            await this.props.actions.loadRolesIfNeeded([\n                newScheme.default_team_user_role,\n                newScheme.default_team_admin_role,\n                newScheme.default_channel_user_role,\n                newScheme.default_channel_admin_role,\n            ]);\n            teamUser = {...teamUser, id: this.props.roles[newScheme.default_team_user_role].id};\n            teamAdmin = {...teamAdmin, id: this.props.roles[newScheme.default_team_admin_role].id};\n            channelUser = {...channelUser, id: this.props.roles[newScheme.default_channel_user_role].id};\n            channelAdmin = {...channelAdmin, id: this.props.roles[newScheme.default_channel_admin_role].id};\n        }\n\n        const teamAdminPromise = this.props.actions.editRole(teamAdmin);\n        const channelAdminPromise = this.props.actions.editRole(channelAdmin);\n        const teamUserPromise = this.props.actions.editRole(teamUser);\n        const channelUserPromise = this.props.actions.editRole(channelUser);\n\n        const teamEditPromises = [];\n\n        const currentTeams = new Set((this.state.teams || this.props.teams || []).map((t) => t.id));\n        const serverTeams = new Set((this.props.teams || []).map((t) => t.id));\n\n        // Difference of sets (currentTeams - serverTeams)\n        const addedTeams = new Set([...currentTeams].filter((t) => !serverTeams.has(t)));\n\n        // Difference of sets (serverTeams - currentTeams)\n        const removedTeams = new Set([...serverTeams].filter((t) => !currentTeams.has(t)));\n\n        for (const teamId of addedTeams) {\n            teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, schemeId));\n        }\n\n        for (const teamId of removedTeams) {\n            teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, ''));\n        }\n\n        const results = await Promise.all([teamAdminPromise, channelAdminPromise, teamUserPromise, channelUserPromise, ...teamEditPromises]);\n\n        let serverError = null;\n        let saveNeeded = false;\n        for (const result of results) {\n            if (result.error) {\n                serverError = result.error.message;\n                saveNeeded = true;\n                break;\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded});\n        this.props.actions.setNavigationBlocked(saveNeeded);\n        this.props.history.push('/admin_console/permissions/schemes');\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.getStateRoles()};\n        let role = null;\n        if (roles.team_admin.name === roleId) {\n            role = {...roles.team_admin};\n        } else if (roles.channel_admin.name === roleId) {\n            role = {...roles.channel_admin};\n        } else if (roles.all_users.name === roleId) {\n            role = {...roles.all_users};\n        }\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        if (roles.team_admin.name === roleId) {\n            roles.team_admin = role;\n        } else if (roles.channel_admin.name === roleId) {\n            roles.channel_admin = role;\n        } else if (roles.all_users.name === roleId) {\n            roles.all_users = role;\n        }\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    openAddTeam = () => {\n        this.setState({addTeamOpen: true});\n    }\n\n    removeTeam = (teamId) => {\n        const teams = (this.state.teams || this.props.teams).filter((team) => team.id !== teamId);\n        this.setState({teams, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addTeams = (teams) => {\n        const currentTeams = this.state.teams || this.props.teams || [];\n        this.setState({\n            teams: [...currentTeams, ...teams],\n            saveNeeded: true,\n        });\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    closeAddTeam = () => {\n        this.setState({addTeamOpen: false});\n    }\n\n    render = () => {\n        if (!this.isLoaded(this.props)) {\n            return <LoadingScreen/>;\n        }\n        const roles = this.getStateRoles();\n        const teams = this.state.teams || this.props.teams || [];\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        return (\n            <div className='wrapper--fixed'>\n                {this.state.addTeamOpen &&\n                    <TeamSelectorModal\n                        onModalDismissed={this.closeAddTeam}\n                        onTeamsSelected={this.addTeams}\n                        currentSchemeId={this.props.schemeId}\n                        alreadySelected={teams.map((team) => team.id)}\n                    />\n                }\n                <h3 className='admin-console-header with-back'>\n                    <BlockableLink\n                        to='/admin_console/permissions/schemes'\n                        className='fa fa-chevron-left back'\n                    />\n                    <FormattedMessage\n                        id='admin.permissions.teamScheme'\n                        defaultMessage='Team Scheme'\n                    />\n                </h3>\n\n                <div className={'banner info'}>\n                    <div className='banner__content'>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='admin.permissions.teamScheme.introBanner'\n                                defaultMessage='[Team Override Schemes](!https://about.mattermost.com/default-team-override-scheme) set the permissions for Team Admins, Channel Admins and other members in specific teams. Use a Team Override Scheme when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                            />\n                        </span>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeDetailsTitle'\n                                    defaultMessage='Scheme Details'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeDetailsDescription'\n                                    defaultMessage='Set the name and description for this scheme.'\n                                />\n                            </span>\n                        </div>\n                    </div>\n                    <div className='team-scheme-details'>\n                        <div className='form-group'>\n                            <label\n                                className='control-label'\n                                htmlFor='scheme-name'\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeNameLabel'\n                                    defaultMessage='Scheme Name:'\n                                />\n                            </label>\n                            <input\n                                id='scheme-name'\n                                className='form-control'\n                                type='text'\n                                value={schemeName}\n                                placeholder={localizeMessage('admin.permissions.teamScheme.schemeNamePlaceholder', 'Scheme Name')}\n                                onChange={this.handleNameChange}\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label'\n                                htmlFor='scheme-description'\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeDescriptionLabel'\n                                    defaultMessage='Scheme Description:'\n                                />\n                            </label>\n                            <textarea\n                                id='scheme-description'\n                                className='form-control'\n                                rows='5'\n                                value={schemeDescription}\n                                placeholder={localizeMessage('admin.permissions.teamScheme.schemeDescriptionPlaceholder', 'Scheme Description')}\n                                onChange={this.handleDescriptionChange}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.selectTeamsTitle'\n                                    defaultMessage='Select teams to override permissions'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.selectTeamsDescription'\n                                    defaultMessage='Select teams where permission exceptions are required.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <a\n                                className='btn btn-primary'\n                                onClick={this.openAddTeam}\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.addTeams'\n                                    defaultMessage='Add Teams'\n                                />\n                            </a>\n                        </div>\n                    </div>\n                    <div className='teams-list'>\n                        {teams.length === 0 &&\n                            <div className='no-team-schemes'>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.noTeams'\n                                    defaultMessage='No team selected. Please add teams to this list.'\n                                />\n                            </div>}\n                        {teams.map((team) => (\n                            <TeamInList\n                                key={team.id}\n                                team={team}\n                                onRemoveTeam={this.removeTeam}\n                            />\n                        ))}\n                    </div>\n                </div>\n\n                <div\n                    className={'permissions-block all_users ' + (this.state.openRoles.all_users ? '' : 'closed')}\n                    id='all_users'\n                >\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('all_users')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersTitle'\n                                    defaultMessage='All Members'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersDescription'\n                                    defaultMessage='Permissions granted to all members, including administrators and newly created users.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        selected={this.state.selectedPermission}\n                        role={roles.all_users}\n                        scope={'team_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block channel_admin ' + (this.state.openRoles.channel_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('channel_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsTitle'\n                                    defaultMessage='Channel Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsDescription'\n                                    defaultMessage='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={roles.all_users}\n                        role={roles.channel_admin}\n                        scope={'channel_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block team_admin ' + (this.state.openRoles.team_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('team_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsTitle'\n                                    defaultMessage='Team Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsDescription'\n                                    defaultMessage='Permissions granted to team creators and any users promoted to Team Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={roles.all_users}\n                        role={roles.team_admin}\n                        scope={'team_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/permissions/schemes'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams as loadTeams, searchTeams} from 'mattermost-redux/actions/teams';\nimport {getTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport TeamSelectorModal from './team_selector_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const teams = Object.values(getTeams(state) || {}).filter((team) => {\n        return team.display_name.toLowerCase().startsWith(searchTerm.toLowerCase()) ||\n               team.description.toLowerCase().startsWith(searchTerm.toLowerCase());\n    });\n\n    return {\n        searchTerm,\n        teams,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTeams,\n            setModalSearchTerm,\n            searchTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSelectorModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage, FormattedHTMLMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect.jsx';\nimport TeamInfo from 'components/team_info.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nconst TEAMS_PER_PAGE = 50;\n\nexport default class TeamSelectorModal extends React.Component {\n    static propTypes = {\n        currentSchemeId: PropTypes.string,\n        alreadySelected: PropTypes.array,\n        searchTerm: PropTypes.string.isRequired,\n        teams: PropTypes.array.isRequired,\n        onModalDismissed: PropTypes.func,\n        onTeamsSelected: PropTypes.func,\n        actions: PropTypes.shape({\n            loadTeams: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            searchTeams: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            loadingTeams: true,\n            confirmAddModal: false,\n            confirmAddTeam: null,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.loadTeams(0, TEAMS_PER_PAGE * 2).then(() => {\n            this.setTeamsLoadingState(false);\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = setTimeout(\n                async () => {\n                    this.setTeamsLoadingState(true);\n                    await this.props.actions.searchTeams(searchTerm);\n                    this.setTeamsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    handleSubmit = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (this.state.values.length === 0) {\n            return;\n        }\n\n        this.props.onTeamsSelected(this.state.values);\n        this.handleHide();\n    }\n\n    addValue = (value, confirmed = false) => {\n        if (value.scheme_id !== null && value.scheme_id !== '' && !confirmed) {\n            this.setState({confirmAddModal: true, confirmAddTeam: value});\n            return;\n        }\n        const values = Object.assign([], this.state.values);\n        const teamIds = values.map((v) => v.id);\n        if (value && value.id && teamIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values, confirmAddModal: false, confirmAddTeam: null});\n    }\n\n    setTeamsLoadingState = (loadingState) => {\n        this.setState({\n            loadingTeams: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setTeamsLoadingState(true);\n            this.props.actions.loadTeams(page + 1, TEAMS_PER_PAGE).then(() => {\n                this.setTeamsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption(option, isSelected, onAdd) {\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n            >\n                <div\n                    className='more-modal__details'\n                >\n                    <TeamInfo team={option}/>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <i className='fa fa-plus'/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(team) {\n        return team.display_name;\n    }\n\n    renderConfirmModal(show, team) {\n        const title = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.title'\n                defaultMessage='Team Override Scheme Change?'\n            />\n        );\n        const message = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.message'\n                defaultMessage='This team is already selected in another team scheme, are you sure you want to move it to this team scheme?'\n            />\n        );\n        const confirmButtonText = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.accept'\n                defaultMessage='Yes, Move Team'\n            />\n        );\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButtonText}\n                onCancel={() => this.setState({confirmAddModal: false, confirmAddTeam: null})}\n                onConfirm={() => this.addValue(team, true)}\n            />\n        );\n    }\n\n    render() {\n        const confirmModal = this.renderConfirmModal(this.state.confirmAddModal, this.state.confirmAddTeam);\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.selectTeams'\n                defaultMessage='Use ↑↓ to browse, ↵ to select.'\n            />\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n\n        let teams = [];\n        if (this.props.teams) {\n            teams = this.props.teams.filter((team) => team.delete_at === 0);\n            teams = teams.filter((team) => team.scheme_id !== this.currentSchemeId);\n            teams = teams.filter((team) => this.props.alreadySelected.indexOf(team.id) === -1);\n            teams.sort((a, b) => {\n                const aName = a.display_name.toUpperCase();\n                const bName = b.display_name.toUpperCase();\n                if (aName === bName) {\n                    return 0;\n                }\n                if (aName > bName) {\n                    return 1;\n                }\n                return -1;\n            });\n        }\n\n        return (\n            <Modal\n                dialogClassName={'more-modal more-direct-channels team-selector-modal'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedHTMLMessage\n                            id='add_teams_to_scheme.title'\n                            defaultMessage='Add Teams To <strong>Team Selection</strong> List'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {confirmModal}\n                    <MultiSelect\n                        key='addTeamsToSchemeKey'\n                        options={teams}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueKey='id'\n                        valueRenderer={this.renderValue}\n                        perPage={TEAMS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        saving={false}\n                        loading={this.state.loadingTeams}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeamStats as loadTeamStats} from 'mattermost-redux/actions/teams';\n\nimport {getTeamStats} from 'mattermost-redux/selectors/entities/teams';\n\nimport TeamInList from './team_in_list.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        stats: getTeamStats(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTeamStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamInList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport TeamInfo from 'components/team_info';\n\nexport default class TeamInList extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        onRemoveTeam: PropTypes.func,\n    }\n\n    render() {\n        const team = this.props.team;\n        return (\n            <div\n                className='team'\n                key={team.id}\n            >\n                <TeamInfo team={team}/>\n                <a\n                    className='remove'\n                    onClick={() => this.props.onRemoveTeam(team.id)}\n                >\n                    <FormattedMessage\n                        id='admin.permissions.teamScheme.removeTeam'\n                        defaultMessage='Remove'\n                    />\n                </a>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams, getTeamStats} from 'mattermost-redux/actions/teams';\nimport {getUser, getUserAccessToken} from 'mattermost-redux/actions/users';\nimport {getTeamsList} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {Stats} from 'mattermost-redux/constants';\n\nimport {setSystemUsersSearch} from 'actions/views/search';\nimport {SearchUserTeamFilter} from 'utils/constants.jsx';\n\nimport SystemUsers from './system_users.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const mfaEnabled = (license && license.IsLicensed === 'true' && license.MFA === 'true') &&\n        config.EnableMultifactorAuthentication === 'true';\n    const enableUserAccessTokens = config.EnableUserAccessTokens === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    const search = state.views.search.systemUsersSearch;\n    let totalUsers = 0;\n    let searchTerm = '';\n    let teamId = '';\n    if (search) {\n        searchTerm = search.term || '';\n        teamId = search.team || '';\n\n        if (!teamId || teamId === SearchUserTeamFilter.ALL_USERS) {\n            const stats = state.entities.admin.analytics || {[Stats.TOTAL_USERS]: 0, [Stats.TOTAL_INACTIVE_USERS]: 0};\n            totalUsers = stats[Stats.TOTAL_USERS] + stats[Stats.TOTAL_INACTIVE_USERS];\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            totalUsers = 0;\n        } else {\n            const stats = state.entities.teams.stats[teamId] || {total_member_count: 0};\n            totalUsers = stats.total_member_count;\n        }\n    }\n\n    return {\n        teams: getTeamsList(state),\n        siteName,\n        mfaEnabled,\n        totalUsers,\n        searchTerm,\n        teamId,\n        enableUserAccessTokens,\n        experimentalEnableAuthenticationTransfer,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getTeamStats,\n            getUser,\n            getUserAccessToken,\n            setSystemUsersSearch,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getStandardAnalytics} from 'actions/admin_actions.jsx';\nimport {reloadIfServerVersionChanged} from 'actions/global_actions.jsx';\nimport {loadProfiles, loadProfilesAndTeamMembers, loadProfilesWithoutTeam, searchUsers} from 'actions/user_actions.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport {Constants, UserSearchOptions, SearchUserTeamFilter} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport SystemUsersList from './list';\n\nconst USER_ID_LENGTH = 26;\nconst USERS_PER_PAGE = 50;\n\nexport default class SystemUsers extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of team objects\n         */\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /**\n         * Title of the app or site.\n         */\n        siteName: PropTypes.string,\n\n        /**\n         * Whether or not MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n        totalUsers: PropTypes.number.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get teams\n             */\n            getTeams: PropTypes.func.isRequired,\n\n            /*\n             * Function to get statistics for a team\n             */\n            getTeamStats: PropTypes.func.isRequired,\n\n            /*\n             * Function to get a user\n             */\n            getUser: PropTypes.func.isRequired,\n\n            /*\n             * Function to get a user access token\n             */\n            getUserAccessToken: PropTypes.func.isRequired,\n            setSystemUsersSearch: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.loadDataForTeam = this.loadDataForTeam.bind(this);\n        this.loadComplete = this.loadComplete.bind(this);\n\n        this.handleTeamChange = this.handleTeamChange.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n\n        this.doSearch = this.doSearch.bind(this);\n        this.search = this.search.bind(this);\n        this.getUserById = this.getUserById.bind(this);\n\n        this.renderFilterRow = this.renderFilterRow.bind(this);\n\n        this.state = {\n            loading: true,\n            searching: false,\n        };\n    }\n\n    componentDidMount() {\n        this.loadDataForTeam(this.props.teamId);\n        this.props.actions.getTeams(0, 1000).then(reloadIfServerVersionChanged);\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setSystemUsersSearch('', '');\n    }\n\n    loadDataForTeam(teamId) {\n        if (this.props.searchTerm) {\n            this.search(this.props.searchTerm, teamId);\n            return;\n        }\n\n        if (teamId === SearchUserTeamFilter.ALL_USERS) {\n            loadProfiles(0, Constants.PROFILE_CHUNK_SIZE, this.loadComplete);\n            getStandardAnalytics();\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            loadProfilesWithoutTeam(0, Constants.PROFILE_CHUNK_SIZE, this.loadComplete);\n        } else {\n            loadProfilesAndTeamMembers(0, Constants.PROFILE_CHUNK_SIZE, teamId, this.loadComplete);\n            this.props.actions.getTeamStats(teamId);\n        }\n    }\n\n    loadComplete() {\n        this.setState({loading: false});\n    }\n\n    handleTeamChange(e) {\n        const teamId = e.target.value;\n        this.loadDataForTeam(teamId);\n        this.props.actions.setSystemUsersSearch(this.props.searchTerm, teamId);\n    }\n\n    handleTermChange(term) {\n        this.props.actions.setSystemUsersSearch(term, this.props.teamId);\n    }\n\n    nextPage(page) {\n        // Paging isn't supported while searching\n\n        if (this.props.teamId === SearchUserTeamFilter.ALL_USERS) {\n            loadProfiles(page + 1, USERS_PER_PAGE, this.loadComplete);\n        } else if (this.props.teamId === SearchUserTeamFilter.NO_TEAM) {\n            loadProfilesWithoutTeam(page + 1, USERS_PER_PAGE, this.loadComplete);\n        } else {\n            loadProfilesAndTeamMembers(page + 1, USERS_PER_PAGE, this.props.teamId, this.loadComplete);\n        }\n    }\n\n    search(term, teamId = this.props.teamId) {\n        if (term === '') {\n            this.setState({\n                loading: false,\n            });\n\n            this.searchTimeoutId = '';\n            return;\n        }\n\n        this.doSearch(teamId, term);\n    }\n\n    doSearch(teamId, term, now = false) {\n        clearTimeout(this.searchTimeoutId);\n\n        this.setState({loading: true});\n\n        const options = {\n            [UserSearchOptions.ALLOW_INACTIVE]: true,\n        };\n        if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            options[UserSearchOptions.WITHOUT_TEAM] = true;\n        }\n\n        this.searchTimeoutId = setTimeout(\n            () => {\n                searchUsers(\n                    term,\n                    teamId,\n                    options,\n                    (users) => {\n                        if (users.length === 0 && term.length === USER_ID_LENGTH) {\n                            // This term didn't match any users name, but it does look like it might be a user's ID\n                            this.getUserByTokenOrId(term);\n                        } else {\n                            this.setState({loading: false});\n                        }\n                    },\n                    () => {\n                        this.setState({loading: false});\n                    }\n                );\n            },\n            now ? 0 : Constants.SEARCH_TIMEOUT_MILLISECONDS\n        );\n    }\n\n    getUserById(id) {\n        if (UserStore.hasProfile(id)) {\n            this.setState({loading: false});\n            return;\n        }\n\n        this.props.actions.getUser(id).then(\n            () => {\n                this.setState({\n                    loading: false,\n                });\n            }\n        );\n    }\n\n    getUserByTokenOrId = async (id) => {\n        if (this.props.enableUserAccessTokens) {\n            const {data} = await this.props.actions.getUserAccessToken(id);\n\n            if (data) {\n                this.setState({term: data.user_id});\n                this.getUserById(data.user_id);\n                return;\n            }\n        }\n\n        this.getUserById(id);\n    }\n\n    renderFilterRow(doSearch) {\n        const teams = this.props.teams.map((team) => {\n            return (\n                <option\n                    key={team.id}\n                    value={team.id}\n                >\n                    {team.display_name}\n                </option>\n            );\n        });\n\n        return (\n            <div className='system-users__filter-row'>\n                <div className='system-users__filter'>\n                    <input\n                        id='searchUsers'\n                        ref='filter'\n                        className='form-control filter-textbox'\n                        placeholder={Utils.localizeMessage('filtered_user_list.search', 'Search users')}\n                        onInput={doSearch}\n                    />\n                </div>\n                <label>\n                    <span className='system-users__team-filter-label'>\n                        <FormattedMessage\n                            id='filtered_user_list.show'\n                            defaultMessage='Filter:'\n                        />\n                    </span>\n                    <select\n                        className='form-control system-users__team-filter'\n                        onChange={this.handleTeamChange}\n                        value={this.props.teamId}\n                    >\n                        <option value={SearchUserTeamFilter.ALL_USERS}>{Utils.localizeMessage('admin.system_users.allUsers', 'All Users')}</option>\n                        <option value={SearchUserTeamFilter.NO_TEAM}>{Utils.localizeMessage('admin.system_users.noTeams', 'No Teams')}</option>\n                        {teams}\n                    </select>\n                </label>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.system_users.title'\n                        defaultMessage='{siteName} Users'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </h3>\n                <div className='more-modal__list member-list-holder'>\n                    <SystemUsersList\n                        loading={this.state.loading}\n                        renderFilterRow={this.renderFilterRow}\n                        search={this.search}\n                        nextPage={this.nextPage}\n                        usersPerPage={USERS_PER_PAGE}\n                        total={this.props.totalUsers}\n                        teams={this.props.teams}\n                        teamId={this.props.teamId}\n                        term={this.props.searchTerm}\n                        onTermChange={this.handleTermChange}\n                        mfaEnabled={this.props.mfaEnabled}\n                        enableUserAccessTokens={this.props.enableUserAccessTokens}\n                        experimentalEnableAuthenticationTransfer={this.props.experimentalEnableAuthenticationTransfer}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getUser} from 'mattermost-redux/actions/users';\nimport {updateTeamMemberSchemeRoles} from 'mattermost-redux/actions/teams';\n\nimport SystemUsersList from './system_users_list.jsx';\nimport {getUsers} from './selectors.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        users: getUsers(state, ownProps.loading, ownProps.teamId, ownProps.term),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUser,\n            updateTeamMemberSchemeRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsersList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ManageRolesModal from 'components/admin_console/manage_roles_modal';\nimport ManageTeamsModal from 'components/admin_console/manage_teams_modal/manage_teams_modal.jsx';\nimport ManageTokensModal from 'components/admin_console/manage_tokens_modal';\nimport ResetPasswordModal from 'components/admin_console/reset_password_modal';\nimport ResetEmailModal from 'components/admin_console/reset_email_modal/reset_email_modal.jsx';\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list.jsx';\nimport UserListRowWithError from 'components/user_list_row_with_error.jsx';\n\nimport SystemUsersDropdown from '../system_users_dropdown.jsx';\n\nexport default class SystemUsersList extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        usersPerPage: PropTypes.number,\n        total: PropTypes.number,\n        nextPage: PropTypes.func,\n        search: PropTypes.func.isRequired,\n        focusOnMount: PropTypes.bool,\n        renderFilterRow: PropTypes.func,\n\n        teamId: PropTypes.string.isRequired,\n        term: PropTypes.string.isRequired,\n        onTermChange: PropTypes.func.isRequired,\n\n        /**\n         * Whether MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            getUser: PropTypes.func.isRequired,\n            updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            page: 0,\n\n            showManageTeamsModal: false,\n            showManageRolesModal: false,\n            showManageTokensModal: false,\n            showPasswordModal: false,\n            showEmailModal: false,\n            user: null,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.teamId !== this.props.teamId) {\n            this.setState({page: 0});\n        }\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n\n        this.props.nextPage(this.state.page + 1);\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    search = (term) => {\n        this.props.search(term);\n\n        if (term !== '') {\n            this.setState({page: 0});\n        }\n    }\n\n    doManageTeams = (user) => {\n        this.setState({\n            showManageTeamsModal: true,\n            user,\n        });\n    }\n\n    doManageRoles = (user) => {\n        this.setState({\n            showManageRolesModal: true,\n            user,\n        });\n    }\n\n    doManageTokens = (user) => {\n        this.setState({\n            showManageTokensModal: true,\n            user,\n        });\n    }\n\n    doManageTeamsDismiss = () => {\n        this.setState({\n            showManageTeamsModal: false,\n            user: null,\n        });\n    }\n\n    doManageRolesDismiss = () => {\n        this.setState({\n            showManageRolesModal: false,\n            user: null,\n        });\n    }\n\n    doManageTokensDismiss = () => {\n        this.setState({\n            showManageTokensModal: false,\n            user: null,\n        });\n    }\n\n    doPasswordReset = (user) => {\n        this.setState({\n            showPasswordModal: true,\n            user,\n        });\n    }\n\n    doPasswordResetDismiss = () => {\n        this.setState({\n            showPasswordModal: false,\n            user: null,\n        });\n    }\n\n    doPasswordResetSubmit = (user) => {\n        this.props.actions.getUser(user.id);\n\n        this.setState({\n            showPasswordModal: false,\n            user: null,\n        });\n    }\n\n    doEmailReset = (user) => {\n        this.setState({\n            showEmailModal: true,\n            user,\n        });\n    }\n\n    doEmailResetDismiss = () => {\n        this.setState({\n            showEmailModal: false,\n            user: null,\n        });\n    }\n\n    doEmailResetSubmit = (user) => {\n        this.props.actions.getUser(user.id);\n\n        this.setState({\n            showEmailModal: false,\n            user: null,\n        });\n    }\n\n    getInfoForUser(user) {\n        const info = [];\n\n        if (user.auth_service) {\n            let service;\n            if (user.auth_service === Constants.LDAP_SERVICE || user.auth_service === Constants.SAML_SERVICE) {\n                service = user.auth_service.toUpperCase();\n            } else {\n                service = Utils.toTitleCase(user.auth_service);\n            }\n\n            info.push(\n                <FormattedHTMLMessage\n                    key='admin.user_item.authServiceNotEmail'\n                    id='admin.user_item.authServiceNotEmail'\n                    defaultMessage='<strong>Sign-in Method:</strong> {service}'\n                    values={{\n                        service,\n                    }}\n                />\n            );\n        } else {\n            info.push(\n                <FormattedHTMLMessage\n                    key='admin.user_item.authServiceEmail'\n                    id='admin.user_item.authServiceEmail'\n                    defaultMessage='<strong>Sign-in Method:</strong> Email'\n                />\n            );\n        }\n\n        if (this.props.mfaEnabled) {\n            info.push(', ');\n\n            if (user.mfa_active) {\n                info.push(\n                    <FormattedHTMLMessage\n                        key='admin.user_item.mfaYes'\n                        id='admin.user_item.mfaYes'\n                        defaultMessage='<strong>MFA</strong>: Yes'\n                    />\n                );\n            } else {\n                info.push(\n                    <FormattedHTMLMessage\n                        key='admin.user_item.mfaNo'\n                        id='admin.user_item.mfaNo'\n                        defaultMessage='<strong>MFA</strong>: No'\n                    />\n                );\n            }\n        }\n\n        return info;\n    }\n\n    renderCount(count, total, startCount, endCount, isSearch) {\n        if (total) {\n            if (isSearch) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countSearch'\n                        defaultMessage='{count, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            total,\n                        }}\n                    />\n                );\n            } else if (startCount !== 0 || endCount !== total) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countPage'\n                        defaultMessage='{startCount, number} - {endCount, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            startCount: startCount + 1,\n                            endCount,\n                            total,\n                        }}\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='system_users_list.count'\n                    defaultMessage='{count, number} {count, plural, one {user} other {users}}'\n                    values={{\n                        count,\n                    }}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const extraInfo = {};\n        if (this.props.users) {\n            for (const user of this.props.users) {\n                extraInfo[user.id] = this.getInfoForUser(user);\n            }\n        }\n\n        return (\n            <div>\n                <SearchableUserList\n                    {...this.props}\n                    renderCount={this.renderCount}\n                    extraInfo={extraInfo}\n                    actions={[SystemUsersDropdown]}\n                    actionProps={{\n                        mfaEnabled: this.props.mfaEnabled,\n                        enableUserAccessTokens: this.props.enableUserAccessTokens,\n                        experimentalEnableAuthenticationTransfer: this.props.experimentalEnableAuthenticationTransfer,\n                        doPasswordReset: this.doPasswordReset,\n                        doEmailReset: this.doEmailReset,\n                        doManageTeams: this.doManageTeams,\n                        doManageRoles: this.doManageRoles,\n                        doManageTokens: this.doManageTokens,\n                    }}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    search={this.search}\n                    page={this.state.page}\n                    term={this.props.term}\n                    onTermChange={this.props.onTermChange}\n                    rowComponentType={UserListRowWithError}\n                />\n                <ManageTeamsModal\n                    user={this.state.user}\n                    show={this.state.showManageTeamsModal}\n                    onModalDismissed={this.doManageTeamsDismiss}\n                    updateTeamMemberSchemeRoles={this.props.actions.updateTeamMemberSchemeRoles}\n                />\n                <ManageRolesModal\n                    user={this.state.user}\n                    show={this.state.showManageRolesModal}\n                    onModalDismissed={this.doManageRolesDismiss}\n                />\n                <ManageTokensModal\n                    user={this.state.user}\n                    show={this.state.showManageTokensModal}\n                    onModalDismissed={this.doManageTokensDismiss}\n                />\n                <ResetPasswordModal\n                    user={this.state.user}\n                    show={this.state.showPasswordModal}\n                    onModalSubmit={this.doPasswordResetSubmit}\n                    onModalDismissed={this.doPasswordResetDismiss}\n                />\n                <ResetEmailModal\n                    user={this.state.user}\n                    show={this.state.showEmailModal}\n                    onModalSubmit={this.doEmailResetSubmit}\n                    onModalDismissed={this.doEmailResetDismiss}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateUserRoles} from 'mattermost-redux/actions/users';\n\nimport ManageRolesModal from './manage_roles_modal.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        ...ownProps,\n        userAccessTokensEnabled: state.entities.admin.config.ServiceSettings.EnableUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateUserRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageRolesModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\nimport {General} from 'mattermost-redux/constants';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nfunction getStateFromProps(props) {\n    const roles = props.user && props.user.roles ? props.user.roles : '';\n\n    return {\n        error: null,\n        hasPostAllRole: UserUtils.hasPostAllRole(roles),\n        hasPostAllPublicRole: UserUtils.hasPostAllPublicRole(roles),\n        hasUserAccessTokenRole: UserUtils.hasUserAccessTokenRole(roles),\n        isSystemAdmin: UserUtils.isSystemAdmin(roles),\n    };\n}\n\nexport default class ManageRolesModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set to render the modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * The user the roles are being managed for\n         */\n        user: PropTypes.object,\n\n        /**\n         * Set if user access tokens are enabled\n         */\n        userAccessTokensEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to update a user's roles\n             */\n            updateUserRoles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = getStateFromProps(props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const user = this.props.user || {};\n        const nextUser = nextProps.user || {};\n        if (user.id !== nextUser.id) {\n            this.setState(getStateFromProps(nextProps));\n        }\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    handleSystemAdminChange = (e) => {\n        if (e.target.name === 'systemadmin') {\n            this.setState({isSystemAdmin: true});\n        } else if (e.target.name === 'systemmember') {\n            this.setState({isSystemAdmin: false});\n        }\n    };\n\n    handleUserAccessTokenChange = (e) => {\n        this.setState({\n            hasUserAccessTokenRole: e.target.checked,\n        });\n    };\n\n    handlePostAllChange = (e) => {\n        this.setState({\n            hasPostAllRole: e.target.checked,\n        });\n    };\n\n    handlePostAllPublicChange = (e) => {\n        this.setState({\n            hasPostAllPublicRole: e.target.checked,\n        });\n    };\n\n    trackRoleChanges = (roles, oldRoles) => {\n        if (UserUtils.hasUserAccessTokenRole(roles) && !UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        } else if (!UserUtils.hasUserAccessTokenRole(roles) && UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        }\n\n        if (UserUtils.hasPostAllRole(roles) && !UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        } else if (!UserUtils.hasPostAllRole(roles) && UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        }\n\n        if (UserUtils.hasPostAllPublicRole(roles) && !UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        } else if (!UserUtils.hasPostAllPublicRole(roles) && UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        }\n    }\n\n    handleSave = async () => {\n        this.setState({error: null});\n\n        let roles = General.SYSTEM_USER_ROLE;\n\n        if (this.state.isSystemAdmin) {\n            roles += ' ' + General.SYSTEM_ADMIN_ROLE;\n        } else if (this.state.hasUserAccessTokenRole) {\n            roles += ' ' + General.SYSTEM_USER_ACCESS_TOKEN_ROLE;\n            if (this.state.hasPostAllRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_ROLE;\n            } else if (this.state.hasPostAllPublicRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_PUBLIC_ROLE;\n            }\n        }\n\n        const {data} = await this.props.actions.updateUserRoles(this.props.user.id, roles);\n\n        this.trackRoleChanges(roles, this.props.user.roles);\n\n        if (data) {\n            this.props.onModalDismissed();\n        } else {\n            this.handleError(\n                <FormattedMessage\n                    id='admin.manage_roles.saveError'\n                    defaultMessage='Unable to save roles.'\n                />\n            );\n        }\n    }\n\n    renderContents = () => {\n        const {user} = this.props;\n\n        if (user == null) {\n            return <div/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let additionalRoles;\n        if (this.state.hasUserAccessTokenRole || this.state.isSystemAdmin) {\n            additionalRoles = (\n                <div>\n                    <p>\n                        <FormattedHTMLMessage\n                            id='admin.manage_roles.additionalRoles'\n                            defaultMessage='Select additional permissions for the account. <a href=\"https://about.mattermost.com/default-permissions\" target=\"_blank\">Read more about roles and permissions</a>.'\n                        />\n                    </p>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postall'\n                                checked={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.isSystemAdmin}\n                                onChange={this.handlePostAllChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllRoleTitle'\n                                    defaultMessage='post:all'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllRole'\n                                defaultMessage='Access to post to all Mattermost channels including direct messages.'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postallpublic'\n                                checked={this.state.hasPostAllPublicRole || this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                onChange={this.handlePostAllPublicChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllPublicRoleTitle'\n                                    defaultMessage='post:channels'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllPublicRole'\n                                defaultMessage='Access to post to all Mattermost public channels.'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n        }\n\n        let userAccessTokenContent;\n        if (this.props.userAccessTokensEnabled) {\n            userAccessTokenContent = (\n                <div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postall'\n                                checked={this.state.hasUserAccessTokenRole || this.state.isSystemAdmin}\n                                disabled={this.state.isSystemAdmin}\n                                onChange={this.handleUserAccessTokenChange}\n                            />\n                            <FormattedHTMLMessage\n                                id='admin.manage_roles.allowUserAccessTokens'\n                                defaultMessage='Allow this account to generate <a href=\"https://about.mattermost.com/default-user-access-tokens\" target=\"_blank\">personal access tokens</a>.'\n                            />\n                            <span className='d-block padding-top padding-bottom light'>\n                                <FormattedHTMLMessage\n                                    id='admin.manage_roles.allowUserAccessTokensDesc'\n                                    defaultMessage=\"Removing this permission doesn't delete existing tokens. To delete them, go to the user's Manage Tokens menu.\"\n                                />\n                            </span>\n                        </label>\n                    </div>\n                    <div className='member-row--padded'>\n                        {additionalRoles}\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <img\n                        className='manage-teams__profile-picture'\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className='manage-row--inner'>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemadmin'\n                                    type='radio'\n                                    checked={this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemAdmin'\n                                    defaultMessage='System Admin'\n                                />\n                            </label>\n                        </div>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemmember'\n                                    type='radio'\n                                    checked={!this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemMember'\n                                    defaultMessage='Member'\n                                />\n                            </label>\n                        </div>\n                    </div>\n                    {userAccessTokenContent}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='manage-teams'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='admin.manage_roles.manageRolesTitle'\n                            defaultMessage='Manage Roles'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.props.onModalDismissed}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={this.handleSave}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as TeamActions from 'actions/team_actions.jsx';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport ManageTeamsDropdown from './manage_teams_dropdown.jsx';\nimport RemoveFromTeamButton from './remove_from_team_button.jsx';\n\nexport default class ManageTeamsModal extends React.Component {\n    static propTypes = {\n        onModalDismissed: PropTypes.func.isRequired,\n        show: PropTypes.bool.isRequired,\n        user: PropTypes.object,\n        updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            teams: null,\n            teamMembers: null,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.user) {\n            this.loadTeamsAndTeamMembers();\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const userId = this.props.user ? this.props.user.id : '';\n        const nextUserId = nextProps.user ? nextProps.user.id : '';\n\n        if (userId !== nextUserId) {\n            this.setState({\n                teams: null,\n                teamMembers: null,\n            });\n\n            if (nextProps.user) {\n                this.loadTeamsAndTeamMembers(nextProps.user);\n            }\n        }\n    }\n\n    loadTeamsAndTeamMembers = (user = this.props.user) => {\n        TeamActions.getTeamsForUser(user.id, (teams) => {\n            this.setState({\n                teams: filterAndSortTeamsByDisplayName(teams),\n            });\n        });\n\n        TeamActions.getTeamMembersForUser(user.id, (teamMembers) => {\n            this.setState({\n                teamMembers,\n            });\n        });\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    handleMemberChange = () => {\n        TeamActions.getTeamMembersForUser(this.props.user.id, (teamMembers) => {\n            this.setState({\n                teamMembers,\n            });\n        });\n    }\n\n    handleMemberRemove = (teamId) => {\n        this.setState({\n            teams: this.state.teams.filter((team) => team.id !== teamId),\n            teamMembers: this.state.teamMembers.filter((teamMember) => teamMember.team_id !== teamId),\n        });\n    }\n\n    renderContents = () => {\n        const {user} = this.props;\n        const {teams, teamMembers} = this.state;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        const isSystemAdmin = Utils.isAdmin(user.roles);\n\n        let name = Utils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let teamList;\n        if (teams && teamMembers) {\n            teamList = teams.map((team) => {\n                const teamMember = teamMembers.find((member) => member.team_id === team.id);\n                if (!teamMember) {\n                    return null;\n                }\n\n                let action;\n                if (isSystemAdmin) {\n                    action = (\n                        <RemoveFromTeamButton\n                            user={user}\n                            team={team}\n                            onError={this.handleError}\n                            onMemberRemove={this.handleMemberRemove}\n                        />\n                    );\n                } else {\n                    action = (\n                        <ManageTeamsDropdown\n                            user={user}\n                            team={team}\n                            teamMember={teamMember}\n                            onError={this.handleError}\n                            onMemberChange={this.handleMemberChange}\n                            onMemberRemove={this.handleMemberRemove}\n                            updateTeamMemberSchemeRoles={this.props.updateTeamMemberSchemeRoles}\n                        />\n                    );\n                }\n\n                return (\n                    <div\n                        key={team.id}\n                        className='manage-teams__team'\n                    >\n                        <div className='manage-teams__team-name'>\n                            {team.display_name}\n                        </div>\n                        <div className='manage-teams__team-actions'>\n                            {action}\n                        </div>\n                    </div>\n                );\n            });\n        } else {\n            teamList = <LoadingScreen/>;\n        }\n\n        let systemAdminIndicator = null;\n        if (isSystemAdmin) {\n            systemAdminIndicator = (\n                <div className='manage-teams__system-admin'>\n                    <FormattedMessage\n                        id='admin.user_item.sysAdmin'\n                        defaultMessage='System Admin'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <img\n                        className='manage-teams__profile-picture'\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                    {systemAdminIndicator}\n                </div>\n                <div className='manage-teams__teams'>\n                    {teamList}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='manage-teams'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='admin.user_item.manageTeams'\n                            defaultMessage='Manage Teams'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Dropdown, MenuItem} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {removeUserFromTeam} from 'actions/team_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ManageTeamsDropdown extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        teamMember: PropTypes.object.isRequired,\n        onError: PropTypes.func.isRequired,\n        onMemberChange: PropTypes.func.isRequired,\n        onMemberRemove: PropTypes.func.isRequired,\n        updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.toggleDropdown = this.toggleDropdown.bind(this);\n\n        this.removeFromTeam = this.removeFromTeam.bind(this);\n\n        this.handleMemberChange = this.handleMemberChange.bind(this);\n        this.handleMemberRemove = this.handleMemberRemove.bind(this);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    toggleDropdown() {\n        this.setState((prevState) => {\n            return {show: !prevState.show};\n        });\n    }\n\n    makeTeamAdmin = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, true);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.handleMemberChange();\n        }\n    };\n\n    makeMember = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.handleMemberChange();\n        }\n    };\n\n    removeFromTeam() {\n        removeUserFromTeam(\n            this.props.teamMember.team_id,\n            this.props.user.id,\n            this.handleMemberRemove,\n            this.props.onError\n        );\n    }\n\n    handleMemberChange() {\n        this.props.onMemberChange(this.props.teamMember.team_id);\n    }\n\n    handleMemberRemove() {\n        this.props.onMemberRemove(this.props.teamMember.team_id);\n    }\n\n    render() {\n        const isTeamAdmin = Utils.isAdmin(this.props.teamMember.roles) || this.props.teamMember.scheme_admin;\n\n        let title;\n        if (isTeamAdmin) {\n            title = Utils.localizeMessage('admin.user_item.teamAdmin', 'Team Admin');\n        } else {\n            title = Utils.localizeMessage('admin.user_item.teamMember', 'Team Member');\n        }\n\n        let makeTeamAdmin = null;\n        if (!isTeamAdmin) {\n            makeTeamAdmin = (\n                <MenuItem\n                    id='makeTeamAdmin'\n                    onSelect={this.makeTeamAdmin}\n                >\n                    <FormattedMessage\n                        id='admin.user_item.makeTeamAdmin'\n                        defaultMessage='Make Team Admin'\n                    />\n                </MenuItem>\n            );\n        }\n\n        let makeMember = null;\n        if (isTeamAdmin) {\n            makeMember = (\n                <MenuItem\n                    id='makeMember'\n                    onSelect={this.makeMember}\n                >\n                    <FormattedMessage\n                        id='admin.user_item.makeMember'\n                        defaultMessage='Make Member'\n                    />\n                </MenuItem>\n            );\n        }\n\n        return (\n            <Dropdown\n                id={`manage-teams-${this.props.user.id}-${this.props.teamMember.team_id}`}\n                open={this.state.show}\n                onToggle={this.toggleDropdown}\n            >\n                <Dropdown.Toggle useAnchor={true}>\n                    {title}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {makeTeamAdmin}\n                    {makeMember}\n                    <MenuItem\n                        id='removeFromTeam'\n                        onSelect={this.removeFromTeam}\n                    >\n                        <FormattedMessage\n                            id='team_members_dropdown.leave_team'\n                            defaultMessage='Remove from Team'\n                        />\n                    </MenuItem>\n                </Dropdown.Menu>\n            </Dropdown>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {removeUserFromTeam} from 'actions/team_actions.jsx';\n\nexport default class RemoveFromTeamButton extends React.PureComponent {\n    static propTypes = {\n        onError: PropTypes.func.isRequired,\n        onMemberRemove: PropTypes.func.isRequired,\n        team: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleMemberRemove = this.handleMemberRemove.bind(this);\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n\n        removeUserFromTeam(\n            this.props.team.id,\n            this.props.user.id,\n            this.handleMemberRemove,\n            this.props.onError\n        );\n    }\n\n    handleMemberRemove() {\n        this.props.onMemberRemove(this.props.team.id);\n    }\n\n    render() {\n        return (\n            <button\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='team_members_dropdown.leave_team'\n                    defaultMessage='Remove from Team'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getUserAccessTokensForUser} from 'mattermost-redux/actions/users';\n\nimport ManageTokensModal from './manage_tokens_modal.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const userId = ownProps.user ? ownProps.user.id : '';\n\n    return {\n        userAccessTokens: state.entities.admin.userAccessTokensByUser[userId],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTokensModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport RevokeTokenButton from 'components/admin_console/revoke_token_button';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class ManageTokensModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set to render the modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * The user the roles are being managed for\n         */\n        user: PropTypes.object,\n\n        /**\n         * The personal access tokens for a user, object with token ids as keys\n         */\n        userAccessTokens: PropTypes.object,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to get a user's access tokens\n             */\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {error: null};\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const userId = this.props.user ? this.props.user.id : null;\n        const nextUserId = nextProps.user ? nextProps.user.id : null;\n        if (nextUserId && nextUserId !== userId) {\n            this.props.actions.getUserAccessTokensForUser(nextUserId, 0, 200);\n        }\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    renderContents = () => {\n        const {user, userAccessTokens} = this.props;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let tokenList;\n        if (userAccessTokens) {\n            const userAccessTokensList = Object.values(userAccessTokens);\n\n            if (userAccessTokensList.length === 0) {\n                tokenList = (\n                    <div className='manage-row__empty'>\n                        <FormattedMessage\n                            id='admin.manage_tokens.userAccessTokensNone'\n                            defaultMessage='No personal access tokens.'\n                        />\n                    </div>\n                );\n            } else {\n                tokenList = userAccessTokensList.map((token) => {\n                    return (\n                        <div\n                            key={token.id}\n                            className='manage-teams__team'\n                        >\n                            <div className='manage-teams__team-name'>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensNameLabel'\n                                        defaultMessage='Token Description: '\n                                    />\n                                    {token.description}\n                                </div>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensIdLabel'\n                                        defaultMessage='Token ID: '\n                                    />\n                                    {token.id}\n                                </div>\n                            </div>\n                            <div className='manage-teams__team-actions'>\n                                <RevokeTokenButton\n                                    tokenId={token.id}\n                                    onError={this.handleError}\n                                />\n                            </div>\n                        </div>\n                    );\n                });\n            }\n        } else {\n            tokenList = <LoadingScreen/>;\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <img\n                        className='manage-teams__profile-picture'\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                </div>\n                <div className='padding-top x2'>\n                    <FormattedHTMLMessage\n                        id='admin.manage_tokens.userAccessTokensDescription'\n                        defaultMessage='Personal access tokens function similarly to session tokens and can be used by integrations to <a href=\"https://about.mattermost.com/default-api-authentication\" target=\"_blank\">interact with this Mattermost server</a>. Tokens are disabled if the user is deactivated. Learn more about <a href=\"https://about.mattermost.com/default-user-access-tokens\" target=\"_blank\">personal access tokens</a>.'\n                    />\n                </div>\n                <div className='manage-teams__teams'>\n                    {tokenList}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='manage-teams'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='admin.manage_tokens.manageTokensTitle'\n                            defaultMessage='Manage Personal Access Tokens'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {revokeUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport RevokeTokenButton from './revoke_token_button.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        ...ownProps,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            revokeUserAccessToken,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RevokeTokenButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nexport default class RevokeTokenButton extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Token id to revoke\n         */\n        tokenId: PropTypes.string.isRequired,\n\n        /*\n         * Function to call on error\n         */\n        onError: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to revoke a user access token\n             */\n            revokeUserAccessToken: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = async (e) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.revokeUserAccessToken(this.props.tokenId);\n        trackEvent('system_console', 'revoke_user_access_token');\n\n        if (error) {\n            this.props.onError(error.message);\n        }\n    }\n\n    render() {\n        return (\n            <button\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='admin.revoke_token_button.delete'\n                    defaultMessage='Delete'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ResetPasswordModal from './reset_password_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nexport default connect(mapStateToProps)(ResetPasswordModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {adminResetPassword} from 'actions/admin_actions.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ResetPasswordModal extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        show: PropTypes.bool.isRequired,\n        onModalSubmit: PropTypes.func,\n        onModalDismissed: PropTypes.func,\n        passwordConfig: PropTypes.object,\n    };\n\n    static defaultProps = {\n        show: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.doSubmit = this.doSubmit.bind(this);\n        this.doCancel = this.doCancel.bind(this);\n\n        this.state = {\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        };\n    }\n\n    componentWillUnmount() {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n    }\n\n    doSubmit(e) {\n        e.preventDefault();\n        let currentPassword = '';\n        if (this.refs.currentPassword) {\n            currentPassword = this.refs.currentPassword.value;\n            if (currentPassword === '') {\n                let errorMsg = '';\n                errorMsg = (\n                    <FormattedMessage\n                        id='admin.reset_password.missing_current'\n                        defaultMessage='Please enter your current password.'\n                    />\n                );\n                this.setState({serverErrorCurrentPass: errorMsg});\n                return;\n            }\n        }\n\n        const password = this.refs.password.value;\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({serverErrorNewPass: error});\n            return;\n        }\n\n        this.setState({serverErrorNewPass: null});\n\n        adminResetPassword(\n            this.props.user.id,\n            currentPassword,\n            password,\n            () => {\n                this.props.onModalSubmit(this.props.user);\n            },\n            (err) => {\n                this.setState({serverErrorCurrentPass: err.message});\n            }\n        );\n    }\n\n    doCancel() {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        const user = this.props.user;\n        if (user == null) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let serverErrorNewPass = null;\n\n        if (this.state.serverErrorNewPass) {\n            urlClass += ' has-error';\n            serverErrorNewPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorNewPass}</p></div>;\n        }\n\n        let title;\n        if (user.auth_service) {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleSwitch'\n                    defaultMessage='Switch Account to Email/Password'\n                />\n            );\n        } else {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleReset'\n                    defaultMessage='Reset Password'\n                />\n            );\n        }\n\n        const currentUserId = UserStore.getCurrentId();\n        let currentPassword = null;\n        let serverErrorCurrentPass = null;\n        let newPasswordFocus = true;\n        if (currentUserId === user.id) {\n            newPasswordFocus = false;\n            let urlClassCurrentPass = 'input-group input-group--limit';\n            if (this.state.serverErrorCurrentPass) {\n                urlClassCurrentPass += ' has-error';\n                serverErrorCurrentPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorCurrentPass}</p></div>;\n            }\n            currentPassword = (\n                <div className='col-sm-10 password__group-addon-space'>\n                    <div className={urlClassCurrentPass}>\n                        <span\n                            data-toggle='tooltip'\n                            title='Current Password'\n                            className='input-group-addon password__group-addon'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.curentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </span>\n                        <input\n                            type='password'\n                            ref='currentPassword'\n                            className='form-control'\n                            maxLength='22'\n                            autoFocus={true}\n                            tabIndex='1'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.doCancel}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            {currentPassword}\n                            <div className='col-sm-10'>\n                                <div className={urlClass}>\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Password'\n                                        className='input-group-addon password__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_password.newPassword'\n                                            defaultMessage='New Password'\n                                        />\n                                    </span>\n                                    <input\n                                        type='password'\n                                        ref='password'\n                                        className='form-control'\n                                        maxLength='22'\n                                        autoFocus={newPasswordFocus}\n                                        tabIndex='1'\n                                    />\n                                </div>\n                                {serverErrorNewPass}\n                                {serverErrorCurrentPass}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            tabIndex='2'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {adminResetEmail} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ResetEmailModal extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        show: PropTypes.bool.isRequired,\n        onModalSubmit: PropTypes.func,\n        onModalDismissed: PropTypes.func,\n        passwordConfig: PropTypes.object,\n    };\n\n    static defaultProps = {\n        show: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n        };\n    }\n\n    doSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.refs.email) {\n            const email = this.refs.email.value;\n            if (!Utils.isEmail(email)) {\n                const errMsg = (\n                    <FormattedMessage\n                        id='user.settings.general.validEmail'\n                        defaultMessage='Please enter a valid email address.'\n                    />\n                );\n                this.setState({error: errMsg});\n                return;\n            }\n        }\n\n        const user = Object.assign({}, this.props.user);\n        const email = this.refs.email.value.trim().toLowerCase();\n        user.email = email;\n\n        this.setState({error: null});\n\n        adminResetEmail(\n            user,\n            () => {\n                this.props.onModalSubmit(this.props.user);\n            },\n            (err) => {\n                const serverError = err.message ? err.message : err;\n                this.setState({error: serverError});\n            }\n        );\n    }\n\n    doCancel = () => {\n        this.setState({error: null});\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        if (!this.props.user) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let errorMsg = null;\n        if (this.state.error) {\n            urlClass += ' has-error';\n            errorMsg = <div className='has-error'><p className='input__help error'>{this.state.error}</p></div>;\n        }\n\n        const title = (\n            <FormattedMessage\n                id='admin.reset_email.titleReset'\n                defaultMessage='Reset Email'\n            />\n        );\n\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.doCancel}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            <div className='col-sm-10'>\n                                <div className={urlClass}>\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Email'\n                                        className='input-group-addon email__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_password.newEmail'\n                                            defaultMessage='New Email'\n                                        />\n                                    </span>\n                                    <input\n                                        type='email'\n                                        ref='email'\n                                        className='form-control'\n                                        maxLength='128'\n                                        autoFocus={true}\n                                        tabIndex='1'\n                                    />\n                                </div>\n                                {errorMsg}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            tabIndex='2'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport UserStore from 'stores/user_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture.jsx';\n\nexport default class UserListRowWithError extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        extraInfo: PropTypes.arrayOf(PropTypes.object),\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        userCount: PropTypes.number,\n    };\n\n    static defaultProps = {\n        extraInfo: [],\n        actions: [],\n        actionProps: {},\n        actionUserProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n\n        this.onError = this.onError.bind(this);\n    }\n\n    onError(errorObj) {\n        this.setState({\n            error: errorObj,\n        });\n    }\n\n    render() {\n        let buttons = null;\n        if (this.props.actions) {\n            buttons = this.props.actions.map((Action, index) => {\n                return (\n                    <Action\n                        key={index.toString()}\n                        user={this.props.user}\n                        {...this.props.actionProps}\n                        {...this.props.actionUserProps}\n                        onError={this.onError}\n                    />\n                );\n            });\n        }\n\n        // QUICK HACK, NEEDS A PROP FOR TOGGLING STATUS\n        let email = this.props.user.email;\n        let emailStyle = 'more-modal__description';\n        let status;\n        if (this.props.extraInfo && this.props.extraInfo.length > 0) {\n            email = (\n                <FormattedHTMLMessage\n                    id='admin.user_item.emailTitle'\n                    defaultMessage='<strong>Email:</strong> {email}'\n                    values={{\n                        email: this.props.user.email,\n                    }}\n                />\n            );\n            emailStyle = '';\n        } else if (this.props.user.status) {\n            status = this.props.user.status;\n        } else {\n            status = UserStore.getStatus(this.props.user.id);\n        }\n\n        let userCountID = null;\n        let userCountEmail = null;\n        if (this.props.userCount >= 0) {\n            userCountID = Utils.createSafeId('userListRowName' + this.props.userCount);\n            userCountEmail = Utils.createSafeId('userListRowEmail' + this.props.userCount);\n        }\n\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='has-error'>\n                    <label className='has-error control-label'>{this.state.error.message}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                key={this.props.user.id}\n                className='more-modal__row'\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update)}\n                    status={status}\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__right'>\n                    <div className='more-modal__top'>\n                        <div className='more-modal__details'>\n                            <div\n                                id={userCountID}\n                                className='more-modal__name'\n                            >\n                                {Utils.displayEntireNameForUser(this.props.user)}\n                            </div>\n                            <div\n                                id={userCountEmail}\n                                className={emailStyle}\n                            >\n                                {email}\n                            </div>\n                            {this.props.extraInfo}\n                        </div>\n                        <div\n                            className='more-modal__actions'\n                        >\n                            {buttons}\n                        </div>\n                    </div>\n                    <div\n                        className='more-modal__bottom'\n                    >\n                        {error}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {adminResetMfa} from 'actions/admin_actions.jsx';\nimport {updateActive, revokeAllSessions} from 'actions/user_actions.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {clientLogout} from 'actions/global_actions.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport {browserHistory} from 'utils/browser_history';\n\nexport default class SystemUsersDropdown extends React.Component {\n    static propTypes = {\n\n        /*\n         * User to manage with dropdown\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Whether MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n\n        /*\n         * Function to open password reset, takes user as an argument\n         */\n        doPasswordReset: PropTypes.func.isRequired,\n\n        /*\n         * Function to open email reset, takes user as an argument\n         */\n        doEmailReset: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage teams, takes user as an argument\n         */\n        doManageTeams: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage roles, takes user as an argument\n         */\n        doManageRoles: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage tokens, takes user as an argument\n         */\n        doManageTokens: PropTypes.func.isRequired,\n\n        /*\n         * The function to call when an error occurs\n         */\n        onError: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showDemoteModal: false,\n            showDeactivateMemberModal: false,\n            showRevokeSessionsModal: false,\n            user: null,\n            role: null,\n        };\n    }\n\n    handleMakeActive = (e) => {\n        e.preventDefault();\n        updateActive(this.props.user.id, true, null, this.props.onError);\n    }\n\n    handleManageTeams = (e) => {\n        e.preventDefault();\n\n        this.props.doManageTeams(this.props.user);\n    }\n\n    handleManageRoles = (e) => {\n        e.preventDefault();\n\n        this.props.doManageRoles(this.props.user);\n    }\n\n    handleManageTokens = (e) => {\n        e.preventDefault();\n\n        this.props.doManageTokens(this.props.user);\n    }\n\n    handleResetPassword = (e) => {\n        e.preventDefault();\n        this.props.doPasswordReset(this.props.user);\n    }\n\n    handleResetEmail = (e) => {\n        e.preventDefault();\n        this.props.doEmailReset(this.props.user);\n    }\n\n    handleResetMfa = (e) => {\n        e.preventDefault();\n        adminResetMfa(this.props.user.id, null, this.props.onError);\n    }\n\n    handleDemoteSystemAdmin = (user, role) => {\n        this.setState({\n            showDemoteModal: true,\n            user,\n            role,\n        });\n    }\n\n    handleDemoteCancel = () => {\n        this.setState({\n            showDemoteModal: false,\n            user: null,\n            role: null,\n        });\n        this.props.onError(null);\n    }\n\n    handleDemoteSubmit = () => {\n        if (this.state.role === 'member') {\n            this.doMakeMember();\n        }\n\n        const teamUrl = TeamStore.getCurrentTeamUrl();\n        if (teamUrl) {\n            // the channel is added to the URL cause endless loading not being fully fixed\n            browserHistory.push(teamUrl + `/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else {\n            browserHistory.push('/');\n        }\n    }\n\n    handleShowDeactivateMemberModal = (e) => {\n        e.preventDefault();\n        this.setState({showDeactivateMemberModal: true});\n    }\n\n    handleDeactivateMember = () => {\n        updateActive(this.props.user.id, false, null, this.props.onError);\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    handleDeactivateCancel = () => {\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    renderDeactivateMemberModal = () => {\n        const user = this.props.user;\n\n        const title = (\n            <FormattedMessage\n                id='deactivate_member_modal.title'\n                defaultMessage='Deactivate {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        let warning;\n        if (user.auth_service !== '' && user.auth_service !== Constants.EMAIL_SERVICE) {\n            warning = (\n                <strong>\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='deactivate_member_modal.sso_warning'\n                        defaultMessage='You must also deactivate this user in the SSO provider or they will be reactivated on next login or sync.'\n                    />\n                </strong>\n            );\n        }\n\n        const message = (\n            <div>\n                <FormattedMessage\n                    id='deactivate_member_modal.desc'\n                    defaultMessage='This action deactivates {username}. They will be logged out and not have access to any teams or channels on this system. Are you sure you want to deactivate {username}?'\n                    values={{\n                        username: user.username,\n                    }}\n                />\n                {warning}\n            </div>\n        );\n\n        const confirmButtonClass = 'btn btn-danger';\n        const deactivateMemberButton = (\n            <FormattedMessage\n                id='deactivate_member_modal.deactivate'\n                defaultMessage='Deactivate'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showDeactivateMemberModal}\n                title={title}\n                message={message}\n                confirmButtonClass={confirmButtonClass}\n                confirmButtonText={deactivateMemberButton}\n                onConfirm={this.handleDeactivateMember}\n                onCancel={this.handleDeactivateCancel}\n            />\n        );\n    }\n\n    handleShowRevokeSessionsModal = (e) => {\n        e.preventDefault();\n        this.setState({showRevokeSessionsModal: true});\n    }\n\n    handleRevokeSessions = () => {\n        const me = UserStore.getCurrentUser();\n        revokeAllSessions(this.props.user.id,\n            () => {\n                if (this.props.user.id === me.id) {\n                    clientLogout();\n                }\n            },\n            this.props.onError\n        );\n\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    handleRevokeSessionsCancel = () => {\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    renderRevokeSessionsModal = () => {\n        const title = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.title'\n                defaultMessage='Revoke Sessions for {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.desc'\n                defaultMessage='This action revokes all sessions for {username}. They will be logged out from all devices. Are you sure you want to revoke all sessions for {username}?'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const revokeUserButtonButton = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.revoke'\n                defaultMessage='Revoke'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showRevokeSessionsModal}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={revokeUserButtonButton}\n                onConfirm={this.handleRevokeSessions}\n                onCancel={this.handleRevokeSessionsCancel}\n            />\n        );\n    }\n\n    renderAccessToken = () => {\n        const userAccessTokensEnabled = this.props.enableUserAccessTokens;\n        if (!userAccessTokensEnabled) {\n            return null;\n        }\n\n        const user = this.props.user;\n        const hasPostAllRole = UserUtils.hasPostAllRole(user.roles);\n        const hasPostAllPublicRole = UserUtils.hasPostAllPublicRole(user.roles);\n        const hasUserAccessTokenRole = UserUtils.hasUserAccessTokenRole(user.roles);\n        const isSystemAdmin = UserUtils.isSystemAdmin(user.roles);\n\n        let messageId = '';\n        if (hasUserAccessTokenRole || isSystemAdmin) {\n            if (hasPostAllRole) {\n                messageId = 'admin.user_item.userAccessTokenPostAll';\n            } else if (hasPostAllPublicRole) {\n                messageId = 'admin.user_item.userAccessTokenPostAllPublic';\n            } else {\n                messageId = 'admin.user_item.userAccessTokenYes';\n            }\n        }\n\n        if (!messageId) {\n            return null;\n        }\n\n        return (\n            <div className='light margin-top half'>\n                <FormattedMessage\n                    key='admin.user_item.userAccessToken'\n                    id={messageId}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n        if (!user) {\n            return <div/>;\n        }\n        let currentRoles = (\n            <FormattedMessage\n                id='admin.user_item.member'\n                defaultMessage='Member'\n            />\n        );\n\n        if (user.roles.length > 0 && Utils.isSystemAdmin(user.roles)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.systemAdmin'\n                    defaultMessage='System Admin'\n                />\n            );\n        }\n\n        const me = UserStore.getCurrentUser();\n        let showMakeActive = false;\n        let showMakeNotActive = !Utils.isSystemAdmin(user.roles);\n        let showManageTeams = true;\n        let showRevokeSessions = true;\n        const showMfaReset = this.props.mfaEnabled && user.mfa_active;\n\n        if (user.delete_at > 0) {\n            currentRoles = (\n                <FormattedMessage\n                    id='admin.user_item.inactive'\n                    defaultMessage='Inactive'\n                />\n            );\n            showMakeActive = true;\n            showMakeNotActive = false;\n            showManageTeams = false;\n            showRevokeSessions = false;\n        }\n\n        let disableActivationToggle = false;\n        if (user.auth_service === Constants.LDAP_SERVICE) {\n            disableActivationToggle = true;\n        }\n\n        let menuClass = '';\n        if (disableActivationToggle) {\n            menuClass = 'disabled';\n        }\n\n        let makeActive = null;\n        if (showMakeActive) {\n            makeActive = (\n                <li\n                    role='presentation'\n                    className={menuClass}\n                >\n                    <a\n                        id='activate'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleMakeActive}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.makeActive'\n                            defaultMessage='Activate'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let makeNotActive = null;\n        if (showMakeNotActive) {\n            makeNotActive = (\n                <li\n                    role='presentation'\n                    className={menuClass}\n                >\n                    <a\n                        id='deactivate'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleShowDeactivateMemberModal}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.makeInactive'\n                            defaultMessage='Deactivate'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let manageTeams = null;\n        if (showManageTeams) {\n            manageTeams = (\n                <li role='presentation'>\n                    <a\n                        id='manageTeams'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleManageTeams}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.manageTeams'\n                            defaultMessage='Manage Teams'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let mfaReset = null;\n        if (showMfaReset) {\n            mfaReset = (\n                <li role='presentation'>\n                    <a\n                        id='removeMFA'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleResetMfa}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.resetMfa'\n                            defaultMessage='Remove MFA'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let passwordReset;\n        if (user.auth_service) {\n            if (this.props.experimentalEnableAuthenticationTransfer) {\n                passwordReset = (\n                    <li role='presentation'>\n                        <a\n                            id='switchEmailPassword'\n                            role='menuitem'\n                            href='#'\n                            onClick={this.handleResetPassword}\n                        >\n                            <FormattedMessage\n                                id='admin.user_item.switchToEmail'\n                                defaultMessage='Switch to Email/Password'\n                            />\n                        </a>\n                    </li>\n                );\n            }\n        } else {\n            passwordReset = (\n                <li role='presentation'>\n                    <a\n                        id='resetPassword'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleResetPassword}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.resetPwd'\n                            defaultMessage='Reset Password'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let emailReset;\n        if (!user.auth_service) {\n            emailReset = (\n                <li role='presentation'>\n                    <a\n                        id='resetEmail'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleResetEmail}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.resetEmail'\n                            defaultMessage='Reset Email'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let revokeSessions;\n        if (showRevokeSessions) {\n            revokeSessions = (\n                <SystemPermissionGate permissions={[Permissions.REVOKE_USER_ACCESS_TOKEN]}>\n                    <li role='presentation'>\n                        <a\n                            id='revokeSessions'\n                            role='menuItem'\n                            href='#'\n                            onClick={this.handleShowRevokeSessionsModal}\n                        >\n                            <FormattedMessage\n                                id='admin.user_item.revokeSessions'\n                                defaultMessage='Revoke Sessions'\n                            />\n                        </a>\n                    </li>\n                </SystemPermissionGate>\n            );\n        }\n\n        let manageTokens;\n        if (this.props.enableUserAccessTokens) {\n            manageTokens = (\n                <li role='presentation'>\n                    <a\n                        id='manageTokens'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleManageTokens}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.manageTokens'\n                            defaultMessage='Manage Tokens'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let makeDemoteModal = null;\n        if (this.props.user.id === me.id) {\n            const title = (\n                <FormattedMessage\n                    id='admin.user_item.confirmDemoteRoleTitle'\n                    defaultMessage='Confirm demotion from System Admin role'\n                />\n            );\n\n            const message = (\n                <div>\n                    <FormattedMessage\n                        id='admin.user_item.confirmDemoteDescription'\n                        defaultMessage=\"If you demote yourself from the System Admin role and there is not another user with System Admin privileges, you'll need to re-assign a System Admin by accessing the Mattermost server through a terminal and running the following command.\"\n                    />\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='admin.user_item.confirmDemotionCmd'\n                        defaultMessage='platform roles system_admin {username}'\n                        values={{\n                            username: me.username,\n                        }}\n                    />\n                </div>\n            );\n\n            const confirmButton = (\n                <FormattedMessage\n                    id='admin.user_item.confirmDemotion'\n                    defaultMessage='Confirm Demotion'\n                />\n            );\n\n            makeDemoteModal = (\n                <ConfirmModal\n                    show={this.state.showDemoteModal}\n                    title={title}\n                    message={message}\n                    confirmButtonText={confirmButton}\n                    onConfirm={this.handleDemoteSubmit}\n                    onCancel={this.handleDemoteCancel}\n                />\n            );\n        }\n\n        const deactivateMemberModal = this.renderDeactivateMemberModal();\n        const revokeSessionsModal = this.renderRevokeSessionsModal();\n\n        return (\n            <div className='dropdown member-drop text-right'>\n                <a\n                    id='memberDropdown'\n                    href='#'\n                    className='dropdown-toggle theme'\n                    type='button'\n                    data-toggle='dropdown'\n                    aria-expanded='true'\n                >\n                    <span>{currentRoles} </span>\n                    <span className='caret'/>\n                </a>\n                {this.renderAccessToken()}\n                <ul\n                    className='dropdown-menu member-menu'\n                    role='menu'\n                >\n                    {makeActive}\n                    {makeNotActive}\n                    <li role='presentation'>\n                        <a\n                            id='manageRoles'\n                            role='menuitem'\n                            href='#'\n                            onClick={this.handleManageRoles}\n                        >\n                            <FormattedMessage\n                                id='admin.user_item.manageRoles'\n                                defaultMessage='Manage Roles'\n                            />\n                        </a>\n                    </li>\n                    {manageTeams}\n                    {manageTokens}\n                    {mfaReset}\n                    {passwordReset}\n                    {emailReset}\n                    {revokeSessions}\n                </ul>\n                {makeDemoteModal}\n                {deactivateMemberModal}\n                {revokeSessionsModal}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getUser, getProfiles, getProfilesInTeam, getProfilesWithoutTeam, searchProfiles, searchProfilesInTeam} from 'mattermost-redux/selectors/entities/users';\n\nconst ALL_USERS = '';\nconst NO_TEAM = 'no_team';\nconst USER_ID_LENGTH = 26;\n\nexport function getUsers(state, loading, teamId, term) {\n    if (loading) {\n        // Show no users while loading.\n        return [];\n    }\n\n    if (term) {\n        let users = [];\n        if (teamId) {\n            users = searchProfilesInTeam(state, teamId, term);\n        } else {\n            users = searchProfiles(state, term);\n        }\n\n        if (users.length === 0 && term.length === USER_ID_LENGTH) {\n            const user = getUser(state, term);\n            if (user) {\n                users = [user];\n            }\n        }\n\n        return users;\n    }\n\n    if (teamId === ALL_USERS) {\n        return getProfiles(state);\n    } else if (teamId === NO_TEAM) {\n        return getProfilesWithoutTeam(state);\n    }\n\n    return getProfilesInTeam(state, teamId);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getLogs} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\n\nimport Logs from './logs.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        ...ownProps,\n        logs: Selectors.getLogs(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getLogs,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Logs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport LogList from './log_list.jsx';\n\nexport default class Logs extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of logs to render\n         */\n        logs: PropTypes.arrayOf(PropTypes.string).isRequired,\n        nextPage: PropTypes.func,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to fetch logs\n             */\n            getLogs: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingLogs: true,\n            page: 0,\n            perPage: 1000,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getLogs(this.state.page, this.state.perPage).then(\n            () => this.setState({loadingLogs: false})\n        );\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState) { // eslint-disable-line camelcase\n        if (this.state.page !== nextState.page) {\n            this.props.actions.getLogs(nextState.page, nextState.perPage).then(\n                () => this.setState({loadingLogs: false})\n            );\n        }\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    reload = () => {\n        this.setState({loadingLogs: true});\n        this.props.actions.getLogs(this.state.page, this.state.perPage).then(\n            () => this.setState({loadingLogs: false})\n        );\n    }\n\n    render() {\n        let content = null;\n\n        if (this.state.loadingLogs) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <LogList\n                    {...this.props}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    page={this.state.page}\n                    perPage={this.state.perPage}\n                />\n            );\n        }\n\n        return (\n            <div className='wrapper--admin'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.logs.title'\n                        defaultMessage='Server Logs'\n                    />\n                </h3>\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMessage\n                            id='admin.logs.bannerDesc'\n                            defaultMessage='To look up users by User ID or Token ID, go to Reporting > Users and paste the ID into the search filter.'\n                        />\n                    </div>\n                </div>\n                <button\n                    type='submit'\n                    className='btn btn-primary'\n                    onClick={this.reload}\n                >\n                    <FormattedMessage\n                        id='admin.logs.reload'\n                        defaultMessage='Reload'\n                    />\n                </button>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst NEXT_BUTTON_TIMEOUT = 500;\n\nexport default class Logs extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Array of logs to render\n         */\n        logs: PropTypes.arrayOf(PropTypes.string).isRequired,\n        page: PropTypes.number.isRequired,\n        perPage: PropTypes.number.isRequired,\n        nextPage: PropTypes.func.isRequired,\n        previousPage: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.nextPage = this.nextPage.bind(this);\n        this.previousPage = this.previousPage.bind(this);\n        this.state = {\n            nextDisabled: false,\n        };\n    }\n\n    componentDidMount() {\n        // Scroll Down to get the latest logs\n        var node = this.refs.logPanel;\n        node.scrollTop = node.scrollHeight;\n        node.focus();\n    }\n\n    componentDidUpdate() {\n        // Scroll Down to get the latest logs\n        var node = this.refs.logPanel;\n        node.scrollTop = node.scrollHeight;\n        node.focus();\n    }\n\n    nextPage(e) {\n        e.preventDefault();\n\n        this.setState({nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT);\n\n        this.props.nextPage();\n    }\n\n    previousPage(e) {\n        e.preventDefault();\n\n        this.props.previousPage();\n    }\n\n    render() {\n        let content = null;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.logs.length >= this.props.perPage) {\n            nextButton = (\n                <button\n                    className='btn btn-default filter-control filter-control__next pull-right'\n                    onClick={this.nextPage}\n                    disabled={this.state.nextDisabled}\n                >\n                    <FormattedMessage\n                        id='admin.logs.next'\n                        defaultMessage='Next'\n                    />\n                    <i\n                        className='fa fa-chevron-right margin-left'\n                        title={localizeMessage('generic_icons.next', 'Next Icon')}\n                    />\n                </button>\n            );\n        }\n\n        if (this.props.page > 0) {\n            previousButton = (\n                <button\n                    className='btn btn-default filter-control filter-control__prev'\n                    onClick={this.previousPage}\n                >\n                    <i\n                        className='fa fa-angle-left'\n                        title={localizeMessage('generic_icons.previous', 'Previous Icon')}\n                    />\n                    <FormattedMessage\n                        id='admin.logs.prev'\n                        defaultMessage='Previous'\n                    />\n                </button>\n            );\n        }\n\n        content = [];\n\n        for (let i = 0; i < this.props.logs.length; i++) {\n            const style = {\n                whiteSpace: 'nowrap',\n                fontFamily: 'monospace',\n            };\n\n            if (this.props.logs[i].indexOf('[EROR]') > 0) {\n                style.color = 'red';\n            }\n\n            content.push(<br key={'br_' + i}/>);\n            content.push(\n                <span\n                    key={'log_' + i}\n                    style={style}\n                >\n                    {this.props.logs[i]}\n                </span>\n            );\n        }\n\n        return (\n            <div>\n                <div\n                    tabIndex='-1'\n                    ref='logPanel'\n                    className='log__panel'\n                >\n                    {content}\n                </div>\n                <div className='padding-top padding-bottom x2 filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {saveConfig} from 'actions/admin_actions.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport FormError from 'components/form_error.jsx';\nimport Constants from 'utils/constants.jsx';\n\nexport default class AdminSettings extends React.Component {\n    static propTypes = {\n\n        /*\n         * Object representing the config file\n         */\n        config: PropTypes.object,\n\n        /*\n         * Object containing config fields that have been set through environment variables\n         */\n        environmentConfig: PropTypes.object,\n\n        /*\n         * Action for whether a save is needed\n         */\n        setNavigationBlocked: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = Object.assign(this.getStateFromConfig(props.config), {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n        });\n    }\n\n    closeTooltip = () => {\n        this.setState({errorTooltip: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('.control-label');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({errorTooltip: isElipsis});\n    }\n\n    handleChange = (id, value) => {\n        this.setState({\n            saveNeeded: true,\n            [id]: value,\n        });\n\n        this.props.setNavigationBlocked(true);\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        this.doSubmit();\n    }\n\n    doSubmit = (callback) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        saveConfig(\n            config,\n            (savedConfig) => {\n                this.setState(this.getStateFromConfig(savedConfig));\n\n                this.setState({\n                    saveNeeded: false,\n                    saving: false,\n                });\n\n                this.props.setNavigationBlocked(false);\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            },\n            (err) => {\n                this.setState({\n                    saving: false,\n                    serverError: err.message,\n                    serverErrorId: err.id,\n                });\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            }\n        );\n    };\n\n    parseInt = (str, defaultValue) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n)) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    parseIntNonNegative = (str, defaultValue) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < 0) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    parseIntNonZero = (str, defaultValue) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < 1) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 1;\n        }\n\n        return n;\n    };\n\n    getConfigValue(config, path) {\n        const pathParts = path.split('.');\n\n        return pathParts.reduce((obj, pathPart) => {\n            if (!obj) {\n                return null;\n            }\n\n            return obj[pathPart];\n        }, config);\n    }\n\n    setConfigValue(config, path, value) {\n        function setValue(obj, pathParts) {\n            const part = pathParts[0];\n\n            if (pathParts.length === 1) {\n                obj[part] = value;\n            } else {\n                if (obj[part] == null) {\n                    obj[part] = {};\n                }\n\n                setValue(obj[part], pathParts.slice(1));\n            }\n        }\n\n        setValue(config, path.split('.'));\n    }\n\n    isSetByEnv = (path) => {\n        return Boolean(this.getConfigValue(this.props.environmentConfig, path));\n    };\n\n    render() {\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    {this.renderTitle()}\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                    onSubmit={this.handleSubmit}\n                >\n                    {this.renderSettings()}\n                    <div className='admin-console-save'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                            onClick={this.handleSubmit}\n                            savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                        />\n                        <div\n                            className='error-message'\n                            ref='errorMessage'\n                            onMouseOver={this.openTooltip}\n                            onMouseOut={this.closeTooltip}\n                        >\n                            <FormError error={this.state.serverError}/>\n                        </div>\n                        <Overlay\n                            show={this.state.errorTooltip}\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            target={this.refs.errorMessage}\n                        >\n                            <Tooltip id='error-tooltip' >\n                                {this.state.serverError}\n                            </Tooltip>\n                        </Overlay>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class SettingsGroup extends React.Component {\n    static get propTypes() {\n        return {\n            show: PropTypes.bool.isRequired,\n            header: PropTypes.node,\n            children: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            show: true,\n        };\n    }\n\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n\n        let header = null;\n        if (this.props.header) {\n            header = (\n                <h4>\n                    {this.props.header}\n                </h4>\n            );\n        }\n\n        return (\n            <div className='admin-settings__group'>\n                {header}\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class TextSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            helpText: PropTypes.node,\n            value: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.number,\n            ]).isRequired,\n            maxLength: PropTypes.number,\n            onChange: PropTypes.func,\n            disabled: PropTypes.bool,\n            setByEnv: PropTypes.bool.isRequired,\n            type: PropTypes.oneOf([\n                'number',\n                'input',\n                'textarea',\n            ]),\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            type: 'input',\n            maxLength: null,\n        };\n    }\n\n    handleChange = (e) => {\n        if (this.props.type === 'number') {\n            this.props.onChange(this.props.id, parseInt(e.target.value, 10));\n        } else {\n            this.props.onChange(this.props.id, e.target.value);\n        }\n    }\n\n    render() {\n        let input = null;\n        if (this.props.type === 'input') {\n            input = (\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type='text'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            );\n        } else if (this.props.type === 'number') {\n            input = (\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type='number'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            );\n        } else if (this.props.type === 'textarea') {\n            input = (\n                <textarea\n                    id={this.props.id}\n                    className='form-control'\n                    rows='5'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n                setByEnv={this.props.setByEnv}\n            >\n                {input}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting.jsx';\n\nexport default class BooleanSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.bool.isRequired,\n        onChange: PropTypes.func.isRequired,\n        trueText: PropTypes.node,\n        falseText: PropTypes.node,\n        disabled: PropTypes.bool.isRequired,\n        setByEnv: PropTypes.bool.isRequired,\n        disabledText: PropTypes.node,\n        helpText: PropTypes.node.isRequired,\n    };\n\n    static defaultProps = {\n        trueText: (\n            <FormattedMessage\n                id='admin.true'\n                defaultMessage='true'\n            />\n        ),\n        falseText: (\n            <FormattedMessage\n                id='admin.false'\n                defaultMessage='false'\n            />\n        ),\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onChange(this.props.id, e.target.value === 'true');\n    }\n\n    render() {\n        let helpText;\n        if (this.props.disabled && this.props.disabledText) {\n            helpText = (\n                <div>\n                    <span className='admin-console__disabled-text'>\n                        {this.props.disabledText}\n                    </span>\n                    {this.props.helpText}\n                </div>\n            );\n        } else {\n            helpText = this.props.helpText;\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <a name={this.props.id}/>\n                <label className='radio-inline'>\n                    <input\n                        type='radio'\n                        value='true'\n                        id={Utils.createSafeId(this.props.id) + 'true'}\n                        name={this.props.id}\n                        checked={this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.trueText}\n                </label>\n                <label className='radio-inline'>\n                    <input\n                        type='radio'\n                        value='false'\n                        id={Utils.createSafeId(this.props.id) + 'false'}\n                        name={this.props.id}\n                        checked={!this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.falseText}\n                </label>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\n\nimport SetByEnv from './set_by_env';\n\nexport default class Settings extends PureComponent {\n    static propTypes = {\n        inputId: PropTypes.string,\n        label: PropTypes.node.isRequired,\n        children: PropTypes.node.isRequired,\n        helpText: PropTypes.node,\n        setByEnv: PropTypes.bool,\n    };\n\n    render() {\n        const {\n            children,\n            setByEnv,\n            helpText,\n            inputId,\n            label,\n        } = this.props;\n\n        return (\n            <div className='form-group'>\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={inputId}\n                >\n                    {label}\n                </label>\n                <div className='col-sm-8'>\n                    {children}\n                    <div className='help-text'>\n                        {helpText}\n                    </div>\n                    {setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class DropdownSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n    }\n\n    static defaultProps = {\n        isDisabled: false,\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    render() {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <option\n                    value={value}\n                    key={value}\n                >\n                    {text}\n                </option>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <select\n                    className='form-control'\n                    id={this.props.id}\n                    value={this.props.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                >\n                    {options}\n                </select>\n            </Setting>\n        );\n    }\n}\n"],"sourceRoot":""}