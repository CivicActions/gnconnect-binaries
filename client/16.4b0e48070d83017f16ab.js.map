{"version":3,"sources":["webpack:///./components/login/login_mfa.jsx","webpack:///./components/claim/index.js","webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png"],"names":["__webpack_require__","_reactIntl","_utils","LoginMfa","props","_classCallCheck3","default","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","handleChange","e","preventDefault","token","target","value","trim","replace","state","setState","handleSubmit","submit","loginId","password","saving","serverError","errorClass","_react2","createElement","className","onSubmit","FormattedMessage","id","defaultMessage","type","name","placeholder","localizeMessage","spellCheck","autoComplete","autoFocus","onChange","_save_button2","disabled","onClick","savingMessage","React","PureComponent","propTypes","PropTypes","string","isRequired","func","_reactRedux","_general","connect","config","getConfig","siteName","SiteName","ldapLoginFieldName","LdapLoginFieldName","passwordConfig","getPasswordConfig","ClaimController","_reactRouterDom","_this2","email","URLSearchParams","location","search","get","newType","currentType","_back_button2","src","logoImage","Switch","Route","path","match","url","render","_oauth_to_email2","_extends3","_email_to_oauth2","_ldap_to_email2","_email_to_ldap2","Component","object","shape","_admin_actions","Utils","OAuthToEmail","bind","ReactDOM","findDOMNode","refs","error","_Utils$isValidPasswor","isValidPassword","valid","confirmPassword","passwordconfirm","oauthToEmail","err","message","formClass","uiType","Constants","SAML_SERVICE","toUpperCase","toTitleCase","values","site","ref","_user_actions","EmailToOAuth","preSubmit","showMfa","checkMfa","requiresMfa","_this3","emailToOAuth","data","follow_link","window","href","content","_login_mfa2","LDAPToEmail","passwordError","confirmError","ldapPasswordError","ldapPassword","ldappassword","switchFromLdapToEmail","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","ldapError","emailpassword","ldapId","ldapid","emailToLdap","ldapClass","loginPlaceholder","style","usernameInput","display","BackButton","Link","to","title","defaultProps","module","exports","p"],"mappings":"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","file":"16.4b0e48070d83017f16ab.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={localizeMessage('login_mfa.token', 'MFA Token')}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nexport default connect(mapStateToProps)(ClaimController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\nexport default class ClaimController extends React.Component {\n    render() {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={(props) => (\n                                        <OAuthToEmail\n                                            {...props}\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={(props) => (\n                                        <EmailToOAuth\n                                            {...props}\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={(props) => (\n                                        <LDAPToEmail\n                                            {...props}\n                                            siteName={this.props.siteName}\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={(props) => (\n                                        <EmailToLDAP\n                                            {...props}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nClaimController.propTypes = {\n    location: PropTypes.object.isRequired,\n    siteName: PropTypes.string,\n    ldapLoginFieldName: PropTypes.string,\n    passwordConfig: PropTypes.object,\n\n    /*\n     * Object from react-router\n     */\n    match: PropTypes.shape({\n        url: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class OAuthToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n\n        this.state = {};\n    }\n\n    submit(e) {\n        e.preventDefault();\n        const state = {};\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = ReactDOM.findDOMNode(this.refs.passwordconfirm).value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Password do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            null,\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.newPwd', 'New Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to email and password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nOAuthToEmail.propTypes = {\n    currentType: PropTypes.string,\n    email: PropTypes.string,\n    siteName: PropTypes.string,\n    passwordConfig: PropTypes.object,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\n\nexport default class EmailToOAuth extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {showMfa: false, password: ''};\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n        var state = {};\n\n        var password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '');\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token) {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message, showMfa: false});\n            }\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.email_to_oauth.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToOAuth.propTypes = {\n    newType: PropTypes.string,\n    email: PropTypes.string,\n    siteName: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {checkMfa, switchFromLdapToEmail} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\n\nexport default class LDAPToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.refs.password.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.refs.passwordconfirm.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapPassword) {\n        switchFromLdapToEmail(\n            this.props.email,\n            password,\n            token,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (err.id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nLDAPToEmail.propTypes = {\n    email: PropTypes.string,\n    passwordConfig: PropTypes.object,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\n\nexport default class EmailToLDAP extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.refs.emailpassword.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.refs.ldapid.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapId, ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapId, ldapPassword) {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                switch (err.id) {\n                case 'ent.ldap.do_login.user_not_registered.app_error':\n                case 'ent.ldap.do_login.user_filtered.app_error':\n                case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                    this.setState({ldapError: err.message, showMfa: false});\n                    break;\n                case 'ent.ldap.do_login.invalid_password.app_error':\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                    break;\n                case 'api.user.check_user_password.invalid.app_error':\n                    this.setState({passwordError: err.message, showMfa: false});\n                    break;\n                default:\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref='emailpassword'\n                            autoComplete='off'\n                            placeholder={Utils.localizeMessage('claim.email_to_ldap.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref='ldapid'\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            autoComplete='off'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToLDAP.propTypes = {\n    email: PropTypes.string,\n    siteName: PropTypes.string,\n    ldapLoginFieldName: PropTypes.string,\n};\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/5d6be4015bde2a4e0358c8bc110deadc.png\";"],"sourceRoot":""}